---
title: "In-Class Exercise 1"
author: "Arjun Singh"
date: 2024-08-26
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# 1. Introduction

Welcome to **In Class Exercise 1**. The following documents our in class learnings to improve our understanding of hands on exercise 1 and beyond.

## 1.1 Loading the required packages

We start off by loading the packages required to carry out our analysis. For this analysis, we will use the **sf, tidyverse, ggstatsplot** and **tmap** packages to carry out our analysis.

This is done using the code chunk below.

```{r}
pacman::p_load(sf, tmap, tidyverse, ggstatsplot)
```

## 1.2 Importing the Data

Now, we will import the data used for this analysis. We use the **st_read()** function of the **sf** package for our case.

```{r}
mpsz14_shp=st_read(dsn = "data/geospatial",
             layer="MP14_SUBZONE_WEB_PL")
```

We see that it is a **simple feature data-frame** with 323 features and 15 fields, projected using the **SVY21 coordinate system**.

We attempted to import the main KML file, but it was corrupted.

We then implemented the code chunk below to create the correct KML file for the same. This is a standard procedure that must be followed when dealing with corrupted files in geospatial analysis.

```{r}
st_write(mpsz14_shp, 
         "data/geospatial/MP14_SUBZONE_PL.kml", 
         delete_dsn = TRUE)
```

### 1.2.1 Preschools data

We now import the preschools data. The KML file will be imported using the st_read() function of the sf package.

```{r}
preschool=st_read("data/geospatial/PreSchoolsLocation.kml")%>%
  st_transform(crs=3414)
```

Notice that we change the **EPSG** code above to be consistent with the **SVY21** projected coordinate system of Singapore.

### 1.2.2 MPSZ 2019 Data

We work with an updated version of the data released in 2019 for this. We import the **shapefile** as well as the **KML** files using the code chunks below.

```{r}
mpsz19_shp=st_read(dsn = "data", 
                     layer = "MPSZ-2019" ) %>%
  st_transform(crs=3414)
```

Notice that we transformed the **EPSG** code has been transformed to 3414. This allows our data to be consistent with Singapore's projected coordinate system, **SVY21.**

```{r}
mpsz19_kml=st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

We see a difference in the the number of fields. The **shapefile** has 6 fields while the **KML** file has 2 fields. Both files have 332 features and are projected in the **WGS84 coordinate system**.

Both `mpsz19_shp` and `mpsz19_kml` are **simple feature data-frames**.

1.2.1.1 Glimpse of the data frame.

#### 1.2.2.1 Checking coordinate systems

We will use the st_crs() function to check the coordinate systems and verify the **EPSG** code.

```{r}
st_crs(mpsz19_shp)
```

Based on the above, we verify that the correct **EPSG** code for SVY21 projected data, 3414, is in place.

### 1.2.3 Data Wrangling

Now, we determine the number of pre-schools in each planning subzone using the code chunk below. The **mutate()** function of the dplyr package and **st_intersects()** function of the sf package are used.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool)))
```

After doing this, we can proceed to find the density of pre-schools based on Planning Subzones.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```

#### 1.2.3.1 Exploratory Data Analysis

Now, we want to verify the relationship between the Pre-School count and Pre-School Density. We use the **ggplot()** function of the **ggplot2** package to create a plot for the same.

```{r}
ggplot(mpsz19_shp, aes(x = `PreSch Density`, y = `PreSch Count`)) +
    geom_point() +  # Scatter plot
    geom_smooth(method = "lm", se = FALSE) +  
    theme_minimal()

```

From the above, we can infer that there is indeed a positive relationship between the two variables, Pre-School count and Pre-School Density.

### 1.2.4 Geographic data of Population trends in Singapore.

```{r}
popdata=read_csv("data/respopagesextod2023.csv")

```

```{r}
popdata2023=popdata%>%
  group_by(PA, SZ, AG) %>%
  summarise(POP=sum(Pop))%>%
  ungroup()%>%
  pivot_wider(names_from = AG, 
              values_from = POP)
colnames(popdata2023)
```

```{r}
popdata2023 <- popdata2023 %>%
  mutate(YOUNG = rowSums(.[, 3:6]) + rowSums(.[, 14])) %>%  # Aged 0-24, 10-24 + Aged 5-9
  mutate(`ECONOMY ACTIVE` = rowSums(.[, 7:13]) + rowSums(.[, 15])) %>%  # Aged 25-59 + Aged 60-64
  mutate(AGED = rowSums(.[, 16:21])) %>%  # Aged 65 and above
  mutate(TOTAL = rowSums(.[, 3:21])) %>%  # Total population
  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`) %>%  # Dependency ratio
  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)

```

Now, we take a look at the updated `popdata2023` data-frame.

```{r}
glimpse(popdata2023)
```

## 1.3 Joining Population Data to MPSZ 2019 data

We implement the basic join functions to join `popdata2023` to `mpsz19_shp`.

```{r}
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) 

mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))

pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
```

#### 1.3.1 Drawing a Choropleth Map

After joining the two tables, we can draw a Choropleth map of Dependency ratio by Planning subzone to get a better understanding of how the region impacts the level of dependency and if there is a relationship between the two. the **tm_shape()** and **tm_fill()** functions of the **tmap** package are used for this.

```{r}
tm_shape(mpsz_pop2023)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)

```

#### 1.3.2 Drawing a Percentile Map

We start off by preparing the data.

Null values are dropped using the code chunk below.

```{r}
mpsz_pop2023 <- mpsz_pop2023 %>%
  drop_na()
```

Now, we will define a function that will help us ***get*** the input data and field that will be used for drawing the Percentile Map.

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

Now, we create a function that will compute and plot the percentile map.

```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Oranges",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

After defining the function above, we can implement it to draw the Percentile Map based on Dependency by Planning Subzone.

```{r}
percentmap("DEPENDENCY", mpsz_pop2023)
```

### 1.3.3 Plotting a Box Map

To plot a box map, we define a new function that will create breakpoints to be used for the box map.

The arguments are as follows: v (vector with observations), mult (multiplier for IQR \[default value is 1.5\[).

It returns bb, a vector with 7 breakpoints to compute the quartiles and fences for the box map.

```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

Following this, we define a function that will help us extract a variable as a vector from a simple feature data-frame.

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

Now, we can create the Box Map. We must define a function for this.

The arguments are as follows; vnam (variable name), df (simple features polygon layer), legtitle (legend title), mtitle (map title), mult (multiplier for IQR).

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Oranges",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
```

The box map can now be created by using the function defined above.

```{r}
boxmap("DEPENDENCY", mpsz_pop2023)
```

### 1.3.4 Plotting an Interactive Box Map

We can create an interactive box map to get a more in-depth understanding of the relationship between Dependency and Planning Subzones.

The code chunk below is implemented for the same.

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```
