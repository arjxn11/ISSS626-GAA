{
  "hash": "561966e89d557d4f99386c688aa3150a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 2- Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\"\nauthor: \"Arjun Singh\"\ndate: 2024-09-30\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 2 Introduction\n\nTourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US\\$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US\\$ in 2020.\n\nThe figure below shows the total revenue for the tourism sector from January 2019 until Feb 2023. The figure reveals that the revenue for the industry have been recovering gradually since September 2021.\n\n![](images/clipboard-378385426.png)\n\nHowever, it is important to note that the tourism economy of Thailand is not evenly distributed- not all provinces make a lot of revenue.\n\nThe figure below reveals that the tourism economy of Thailand is carried by five provinces, namely Bangkok, Phuket, Chiang Mai, Sukhothai and Phetchaburi.\n\n![](images/clipboard-986836251.png)\n\n# 2.1 Objectives\n\nThe objectives of this exercise are to understand:\n\n-   if the key indicators of the tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent. If so, then we would like to detect where the clusters and outliers are, as well as the emerging hot spot/cold spot areas.\n\n# 2.2 Data and Packages\n\nThe data used for this exercise are as follows:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) which is sourced from Kaggle. \n\n    ![](images/Screenshot%202024-10-02%20180644.png)\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) which is sourced from Humanitarian Data Exchange. We will use the data at the province level (i.e: ADM1).\n\n    ![](images/clipboard-3292985936.png)\n\nThe following packages are used:\n\n-   **`sf`**: Provides simple features support for handling and analyzing spatial vector data in R.\n-   **`spdep`**: A package for spatial dependence and spatial regression analysis, particularly for handling spatial weights.\n-   **`tmap`**: A flexible visualization package for thematic maps, supporting both static and interactive mapping in R.\n-   **`tidyverse`**: A collection of R packages designed for data science, emphasizing data manipulation, visualization, and functional programming.\n-   **`knitr`**: A dynamic report generation tool in R, allowing for the integration of code, results, and narrative in reproducible documents.\n\nWe now load these packages into our environment by using the p_load() function of the pacman package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\nset.seed(123)\ntmap_mode('plot')\n```\n:::\n\n\n\n## 2.1 Importing the data\n\n### 2.1.1 Importing the aspatial data\n\nWe will now import the aspatial data by implementing the read_csv() function of the readr package as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourists=read_csv('data/aspatial/thailand_domestic_tourism_2019_2023.csv')\n# Summing the 'value' based on 'province_eng' and 'variable'\nsummed_data <- tourists %>%\n  group_by(province_eng, variable) %>%\n  summarize(total_value = sum(value, na.rm = TRUE))\n\n# View the result\nhead(summed_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   province_eng [1]\n  province_eng  variable            total_value\n  <chr>         <chr>                     <dbl>\n1 Amnat Charoen net_profit_all           1075. \n2 Amnat Charoen net_profit_foreign         37.8\n3 Amnat Charoen net_profit_thai          1037. \n4 Amnat Charoen no_tourist_all         841477  \n5 Amnat Charoen no_tourist_foreign      12878  \n6 Amnat Charoen no_tourist_occupied    259406  \n```\n\n\n:::\n:::\n\n\n\n### 2.1.2 Importing the geospatial data\n\nWe now import the geospatial data using the st_read() function of the sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince=st_read(dsn = \"data/geospatial\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")%>%\n  select(1:5, 17)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n### 2.1.3 Performing relational join\n\nWe will now join the aspatial and geospatial data by using the left_join() function of the package as showing in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_tourism=left_join(summed_data, province, by= c(\"province_eng\"=\"ADM1_EN\"))\n```\n:::\n\n\n\n# 2.3 Exploratory Data Analysis\n\n## 2.3.1 Visualizing regional indicators\n\nAfter successfully completing the relational join, we can now plot a choropleth map to visualize the tourism in each province in Thailand using various functions of the tmap package.\n\n#### 2.3.1.1 Number of tourists\n\nWe first take a look at the number of tourists, both foreign and domestic, across all provinces in Thailand.\n\n::: panel-tabset\n## Number of Foreign Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_foreign=pro_tourism%>%\n  filter(variable=='no_tourist_foreign')%>%\n  filter(!st_is_empty(geometry))\nprofit_foreigners=st_as_sf(tourist_foreign)\n\ntourist_foreign=st_as_sf(tourist_foreign)\n\n\n# Create the interactive basemap\nbasemap01 <- tm_shape(tourist_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\") +\n  tm_text(\"province_eng\", size = 0.5)\n\n# Display the interactive map\nbasemap01\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## Number of Domestic Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_domestic=pro_tourism%>%\n  filter(variable=='no_tourist_foreign')%>%\n  filter(!st_is_empty(geometry))\nprofit_foreigners=st_as_sf(tourist_domestic)\n\ntourist_domestic=st_as_sf(tourist_domestic)\n\n\n# Create the interactive basemap\nbasemap02 <- tm_shape(tourist_domestic) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\") +\n  tm_text(\"province_eng\", size = 0.5)\n\n# Display the interactive map\nbasemap02\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n:::\n\n#### 2.3.1.2 Revenue\n\nWe now take a look at the revenue generated by foreign and domestic tourists in Thailand\n\n::: panel-tabset\n## Revenue generated by Foreigners\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_foreigners=pro_tourism%>%\n  filter(variable=='net_profit_foreign')%>%\n  filter(!st_is_empty(geometry))\nprofit_foreigners=st_as_sf(profit_foreigners)\n  \n\n\n# Create the interactive basemap\nbasemap <- tm_shape(profit_foreigners) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style= 'jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\n# Display the interactive map\nbasemap\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Revenue generated by Domestic Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_domestic=pro_tourism%>%\n  filter(variable=='net_profit_thai')%>%\n  filter(!st_is_empty(geometry))\nprofit_foreigners=st_as_sf(profit_domestic)\n\nprofit_domestic=st_as_sf(profit_domestic)\n\n\n# Create the interactive basemap\nbasemap2 <- tm_shape(profit_domestic) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\n# Display the interactive map\nbasemap2\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\nBangkok seems to be the most lucrative province for both foreign and domestic tourists.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(profit_domestic) +\n  tm_polygons() +\n  tm_text(\"province_eng\", size=0.5)\n\ngdppc <- qtm(profit_domestic, \"total_value\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n:::\n\n\n\n# 2.4 Spatial Analysis\n\nWe now implement the **poly2nb()** function of the **spdep** package to compute contiguity weight matrices for the study area selected.\n\nUsing this function, we are able to build a ‘neighbors list’ based on regions with contiguous boundaries.\n\nIn this function, we will pass an argument, ‘queen’, that can be set as either TRUE (default) or FALSE. If the ‘queen’ argument is not explicitly set to FALSE, the function returns a list of first order neighbors using the Queen criteria.\n\n[You may refer to the `spdep` package documentation here](https://cran.r-project.org/web/packages/spdep/spdep.pdf) to learn more about its functions and arguments.\n\n## 2.4.1 Spatial Weights\n\n### 2.4.1.1 Computing Contiguity Spatial Weights\n\nWe use the poly2nb() function as shown in the code chunk below. Using this, we are able to compute a Queen contiguity weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rook contiguity\nwm_r <- poly2nb(profit_foreigners, queen=FALSE)\nwrite_rds(wm_r, 'data/rds/wm_r_pro_foreign')\n\n# Queen Contiguity\nwm_q <- poly2nb(profit_foreigners, queen=TRUE)\nwrite_rds(wm_q, 'data/rds/wm_q_pro_foreign')\n```\n:::\n\n\n\n::: panel-tabset\n## Rook Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r_pro_foreign=read_rds(\"data/rds/wm_r_pro_foreign\")\nsummary(wm_r_pro_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n42\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n46 63 with 1 link\n1 most connected region:\n61 with 9 links\n```\n\n\n:::\n:::\n\n\n\n## Queen Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_pro_foreign=read_rds(\"data/rds/wm_q_pro_foreign\")\nsummary(wm_q_pro_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n42\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n46 63 with 1 link\n1 most connected region:\n61 with 9 links\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r_pro_foreign=read_rds(\"data/rds/wm_r_pro_foreign\")\nsummary(wm_r_pro_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n42\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n46 63 with 1 link\n1 most connected region:\n61 with 9 links\n```\n\n\n:::\n:::\n\n\n\n### 2.4.1.2 Visualizing Contiguity Spatial Weights\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons in this situation, so we need to ensure that our points are in order to produce our connectivity graphs.\n\nUsually, the method of choice will be polygon centroids. We calculate using the sf package before moving onto the graphs. Getting latitude and longitude of the Polygon Centroids.\n\nWe need points to associate with each polygon before we can make our connectivity graph. It won’t be as simple as applying the st_centroid() function of the sf sf object: *`us.bound`*. We need the coordinates in a separate data-frame for this to work.\n\nTo do this, we will use a mapping function which will apply a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of `us.bound`.\n\nThe function that we implement in this situation will be st_centroid().\n\nWe will be using the map_dbl variation of map from the purrr package.\n\n::: panel-tabset\n## Longitude & Latitude of Foreign Travellers\n\nWe start by extracting the longitude and latitude values for foreign travellers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude_profit_foreign= map_dbl(profit_foreigners$geometry, ~st_centroid(.x)[[1]])\nlatitude_profit_foreign= map_dbl(profit_foreigners$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\nNow that we have the latitude and longitude values, we can use the cbind() function to put the longitude and latitude values into the same object, `coords`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_profit_foreign <- cbind(longitude_profit_foreign, latitude_profit_foreign)\n```\n:::\n\n\n\nWe use the head() function to verify if `coords` is in the correct format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords_profit_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude_profit_foreign latitude_profit_foreign\n[1,]                 104.7414                15.89261\n[2,]                 100.3485                14.62354\n[3,]                 100.6235                13.77183\n[4,]                 103.7109                18.14879\n[5,]                 101.4254                13.60649\n[6,]                 101.8194                16.03212\n```\n\n\n:::\n:::\n\n\n\n## Longitude and Latitude of Domestic Travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude_profit_domestic\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude_profit_domestic=\n```\n:::\n\n\n\nWe now create the coords object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_profit_domestic\n```\n:::\n\n\n:::\n\nWe can now visualize it using the plot() function as shown in the following code chunks.\n\n::: panel-tabset\n## Profits from foreign travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_foreigners$geometry, border=\"lightgrey\")\nplot(wm_r_pro_foreign, coords_profit_foreign, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Profits from domestic travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_domestic$geometry, border=\"lightgrey\")\nplot(wm_r_pro_domestic, coords_profit_domestic, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n:::\n\n\n:::\n\n### 2.4.1.3 Computing Distance Based Neighbors\n\nIn order to derive distance-based weight matrices, we will implement the **dnearneigh()** function of the **spdep** package.\n\nThis function identifies neighbors of region points by Euclidean Distance with a distance band with lower d1 and upper d2 bounds controlled by the `bounds=` argument.\n\nIf un-projected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and `longlat=TRUE,` great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n#### 2.4.1.3.1 Determining cut-off distance\n\nWe must first determine the upper limit for the distance band by using the steps shown below:\n\n-   **Find k Nearest Neighbours**: Use **`knearneigh()`** from the **`spdep`** package to get a matrix of indices for the k nearest neighbours of each point.\n\n-   **Convert to Neighbours List**: Convert the **`knn`** object returned by **`knearneigh()`** into a neighbours list of class **`nb`** using **`knn2nb()`**. This list contains integer vectors with neighbour region number IDs.\n\n-   **Calculate Edge Lengths**: Use **`nbdists()`** from **`spdep`** to return the lengths of neighbour relationship edges. The function returns distances in the units of the coordinates if projected, otherwise in kilometers.\n\n-   **Flatten the List**: Remove the list structure of the returned object using **`unlist()`**\n\n::: panel-tabset\n## Profits from foreign travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#coords <- coordinates(hunan)\nk1_pro_foreign <- knn2nb(knearneigh(coords_profit_foreign))\nk1dists_pro_foreign <- unlist(nbdists(k1_pro_foreign, coords_profit_foreign, longlat = TRUE))\nsummary(k1dists_pro_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n\n\nFrom the output above, we can infer that the largest first nearest neighbor distance is just under 125KM. Using this value, 125KM, as the upper threshold gives certainty that all units will have at least one neighbor.\n\n## Profits from domestic travellers\n\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### 2.4.1.3.2 Computing Distance Based Weight Matrix\n\nWe now implement the dnearneigh() function to compute the distance weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d62_pro_foreign <- dnearneigh(coords_profit_foreign, 0, 125, longlat = TRUE)\nwm_d62_pro_foreign\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 368 \nPercentage nonzero weights: 7.729469 \nAverage number of links: 5.333333 \n2 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n\n\n::: insights-box\nFrom the output above, we infer that there are 69 distinct regions, as we identified earlier. There are 368 connections between regions where the distance is within the threshold that we have set. 7.73% of all possible region pairs have a connection. On average, each region is connected to approximately 5.3 other regions.\n:::\n\nWe now use the combination of table() and card() functions from the spdep package to display the structure of the weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(profit_foreigners$province_eng, card(wm_d62_pro_foreign))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          \n                           1 2 3 4 5 6 7 8 9 10 11 12 13 14\n  Amnat Charoen            0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Ang Thong                0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Bangkok                  0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Bueng Kan                0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Chachoengsao             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Chaiyaphum               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Chanthaburi              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Chiang Mai               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Chiang Rai               1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Chumphon                 1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Kalasin                  0 0 0 0 0 0 0 1 0  0  0  0  0  0\n  Kamphaeng Phet           0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Kanchanaburi             0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Khon Kaen                0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Krabi                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Lampang                  0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Lamphun                  0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Loei                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Mae Hong Son             0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Maha Sarakham            0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Mukdahan                 0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Nakhon Nayok             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Pathom            0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Nakhon Phanom            0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nakhon Ratchasima        0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Sawan             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Nakhon Si Thammarat      0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nan                      0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Narathiwat               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nong Khai                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Nonthaburi               0 0 0 0 0 0 0 0 0  0  0  0  0  1\n  Pathum Thani             0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Pattani                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phatthalung              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phayao                   0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phetchabun               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phetchaburi              0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Phichit                  0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phitsanulok              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phra Nakhon Si Ayutthaya 0 0 0 0 0 0 0 0 0  0  0  1  0  0\n  Phrae                    0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Phuket                   1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Prachuap Khiri Khan      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ranong                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Ratchaburi               0 0 0 0 0 0 0 1 0  0  0  0  0  0\n  Rayong                   0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Roi Et                   0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Sa Kaeo                  0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Sakon Nakhon             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Samut Prakan             0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Samut Sakhon             0 0 0 0 0 0 0 0 0  0  1  0  0  0\n  Samut Songkhram          0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Saraburi                 0 0 0 0 0 0 0 0 0  0  1  0  0  0\n  Satun                    0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Sing Buri                0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Songkhla                 0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Sukhothai                0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Suphan Buri              0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Surat Thani              0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Surin                    1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Tak                      0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Trang                    0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Trat                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ubon Ratchathani         0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Udon Thani               0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Uthai Thani              0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Uttaradit                0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Yala                     0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Yasothon                 0 0 0 0 1 0 0 0 0  0  0  0  0  0\n```\n\n\n:::\n:::\n\n\n\nNext, we implement the n.comp.nb() function to identify the number of connected components in a neighbor list object of class nb.\n\n::: note-box\nNote: A connected component is a subset of regions where each region is reachable from any other region within the same subset. The function returns an object that includes the number of connected components (`nc`) and a vector indicating the component membership for each region.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp_pro_foreign <- n.comp.nb(wm_d62_pro_foreign)\nn_comp_pro_foreign$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n_comp_pro_foreign$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2 \n56 13 \n```\n\n\n:::\n:::\n\n\n\n#### 2.4.1.3.3 **Plotting fixed distance weight matrix**\n\nWe now plot the distance weight matrix using the plot() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_foreigners$geometry, border=\"lightgrey\")\nplot(wm_d62_pro_foreign, coords_profit_foreign, add=TRUE)\nplot(k1_pro_foreign, coords_profit_foreign, add=TRUE, col=\"purple\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nAs identified earlier, we see two distinct groups. The upper 56 and the bottom 13.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(profit_foreigners$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1_pro_foreign, coords_profit_foreign, add=TRUE, col=\"red\", length=0.08)\nplot(profit_foreigners$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62_pro_foreign, coords_profit_foreign, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n### 2.4.1.4 **Weights based on Inversed Distance Weighting (IDW)**\n\nWe first compute the distances between areas by implementing the **nbdists()** function of the **spdep** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_pro_foreign <- nbdists(wm_r_pro_foreign, coords_profit_foreign, longlat = TRUE)\nids_pro_foreign <- lapply(dist_pro_foreign, function(x) 1/(x))\nids_pro_foreign\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.01283122 0.01137165 0.02317374\n\n[[2]]\n[1] 0.02756509 0.03127482 0.02029286\n\n[[3]]\n[1] 0.01128043 0.01701948 0.03322088 0.03024035 0.04641391 0.02007407\n\n[[4]]\n[1] 0.008785487 0.010451301 0.011784417\n\n[[5]]\n[1] 0.011280434 0.009026604 0.013713812 0.010525478 0.010089340 0.012920254\n\n[[6]]\n[1] 0.010963897 0.008134706 0.013026280\n\n[[7]]\n[1] 0.009026604 0.013102472 0.009765844 0.013223766\n\n[[8]]\n[1] 0.005984037 0.010253006 0.012763865 0.013589149 0.004349372\n\n[[9]]\n[1] 0.005984037 0.005799456 0.013165076\n\n[[10]]\n[1] 0.005327427 0.017306975 0.007000767\n\n[[11]]\n[1] 0.008769672 0.011775171 0.010437208 0.012343675 0.011493123 0.008361253\n\n[[12]]\n[1] 0.010254426 0.011527636 0.007714179 0.009533663 0.011111643\n\n[[13]]\n[1] 0.007385957 0.007716901 0.010982604 0.004211749 0.010358229\n\n[[14]]\n[1] 0.010963897 0.008769672 0.006691737 0.012916807 0.005943019 0.006514320\n[7] 0.008588872\n\n[[15]]\n[1] 0.01132654 0.00997081 0.01085922\n\n[[16]]\n[1] 0.010253006 0.005799456 0.015806184 0.008104541 0.016638036 0.008359249\n[7] 0.005157708\n\n[[17]]\n[1] 0.012763865 0.015806184 0.006403244\n\n[[18]]\n[1] 0.006691737 0.007140588 0.007375029 0.007976693 0.007671985\n\n[[19]]\n[1] 0.013589149 0.004073493\n\n[[20]]\n[1] 0.011775171 0.012916807 0.014293885 0.007462094\n\n[[21]]\n[1] 0.012831217 0.010437208 0.010934747 0.009660859 0.008504967 0.013119927\n\n[[22]]\n[1] 0.013713812 0.007685469 0.018047546 0.020717010\n\n[[23]]\n[1] 0.017019481 0.007385957 0.031941419 0.015333035 0.014028638 0.024413177\n[7] 0.012579923\n\n[[24]]\n[1] 0.008785487 0.010934747 0.015545066\n\n[[25]]\n[1] 0.008134706 0.005943019 0.007685469 0.007605151 0.008117703\n\n[[26]]\n[1] 0.010254426 0.007982010 0.014915995 0.011395871 0.005405036 0.012326369\n\n[[27]]\n[1] 0.011326537 0.009956219 0.005544296 0.009359481 0.010554311\n\n[[28]]\n[1] 0.012495409 0.009206376 0.007880812\n\n[[29]]\n[1] 0.01359979 0.01841909\n\n[[30]]\n[1] 0.010451301 0.007140588 0.008232097 0.017483864\n\n[[31]]\n[1] 0.03322088 0.03194142 0.02860548 0.02049667\n\n[[32]]\n[1] 0.03024035 0.01052548 0.01804755 0.02860548 0.02835278 0.01391843\n\n[[33]]\n[1] 0.01359979 0.01090219 0.01634790\n\n[[34]]\n[1] 0.009956219 0.013192981 0.012040582 0.019039684\n\n[[35]]\n[1] 0.013165076 0.008104541 0.012495409 0.008669969\n\n[[36]]\n[1] 0.013026280 0.006514320 0.007375029 0.007982010 0.011614531 0.009899588\n\n[[37]]\n[1] 0.009013905 0.015334899 0.016262271\n\n[[38]]\n[1] 0.01152764 0.01491600 0.01161453 0.01209489\n\n[[39]]\n[1] 0.007714179 0.007976693 0.009899588 0.012094889 0.010632695 0.011816759\n\n[[40]]\n[1] 0.02756509 0.01533303 0.02049667 0.02835278 0.01630089 0.01339948\n\n[[41]]\n[1] 0.016638036 0.009206376 0.008669969 0.009069811 0.014433186\n\n[[42]]\nnumeric(0)\n\n[[43]]\n[1] 0.005327427 0.009013905\n\n[[44]]\n[1] 0.01730698 0.00908563\n\n[[45]]\n[1] 0.007716901 0.014028638 0.015334899 0.014563573 0.023042875\n\n[[46]]\n[1] 0.01310247\n\n[[47]]\n[1] 0.012343675 0.014293885 0.009660859 0.008645806 0.017784128\n\n[[48]]\n[1] 0.010089340 0.009765844 0.007605151\n\n[[49]]\n[1] 0.011784417 0.011493123 0.008504967 0.015545066 0.008232097 0.009781624\n\n[[50]]\n[1] 0.04641391 0.01292025\n\n[[51]]\n[1] 0.02007407 0.02441318 0.01456357 0.02941852\n\n[[52]]\n[1] 0.01626227 0.02304288 0.02941852\n\n[[53]]\n[1] 0.020717010 0.008117703 0.013918429 0.016300886\n\n[[54]]\n[1] 0.01319298 0.01448029 0.01168217\n\n[[55]]\n[1] 0.03127482 0.01139587 0.01688512\n\n[[56]]\n[1] 0.005544296 0.010902192 0.012040582 0.014480293 0.008955556\n\n[[57]]\n[1] 0.009533663 0.008359249 0.010632695 0.009069811 0.008697288 0.009934394\n\n[[58]]\n[1] 0.02029286 0.01098260 0.01257992 0.01339948 0.01688512 0.01076819\n\n[[59]]\n[1] 0.007000767 0.009970810 0.009359481 0.009085630\n\n[[60]]\n[1] 0.007462094 0.008645806\n\n[[61]]\n[1] 0.004349372 0.011111643 0.004211749 0.005157708 0.006403244 0.004073493\n[7] 0.005405036 0.008697288 0.005949594\n\n[[62]]\n[1] 0.01085922 0.01055431 0.01903968 0.01168217\n\n[[63]]\n[1] 0.01322377\n\n[[64]]\n[1] 0.011371651 0.008739397\n\n[[65]]\n[1] 0.008361253 0.008588872 0.007671985 0.017483864 0.009781624\n\n[[66]]\n[1] 0.010358229 0.012326369 0.010768191 0.005949594\n\n[[67]]\n[1] 0.007880812 0.011816759 0.014433186 0.009934394\n\n[[68]]\n[1] 0.018419095 0.016347902 0.008955556\n\n[[69]]\n[1] 0.023173744 0.013119927 0.017784128 0.008739397\n```\n\n\n:::\n:::\n\n\n\n### 2.4.1.5 **Row-Standardized Weights Matrix**\n\nWe now need to assign weights to each neighboring polygon. We use equal weights (style=“W”), where each neighboring polygon is assigned a weight of 1 divided by the number of neighbors.\n\nThis means each neighboring county’s weight is calculated as 1/(# of neighbors), and these weights are then used to sum the weighted income values.\n\nWhile this method is intuitive for summarizing neighbors’ values, it has a drawback: polygons at the edges of the study area may rely on fewer neighbors, potentially skewing the spatial autocorrelation results.\n\n::: note-box\nNote: For simplicity, we’ll use the style=“W” option in this example, but be aware that more robust options, such as style=“B”, are available.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_r_pro_foreign <- nb2listw(wm_r_pro_foreign, style=\"W\", zero.policy = TRUE)\nrswm_r_pro_foreign\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n42\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n\n\nSetting the argument `zero.policy` to TRUE allows for lists of non-neighbors. This should be used with caution as users may not be aware of missing neighbors in their data however setting `zero,policy` to FALSE would return an error.\n\nThe code chunk below is implemented to check the weights of the first polygons three neighbors type:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_r_pro_foreign$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.3333333 0.3333333 0.3333333\n```\n\n\n:::\n:::\n\n\n\n::: insights-box\nEach neighbor is assigned a 0.33 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.\n:::\n\nUsing the same method, we derive a row standardized distance weight matrix by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_ids_pro_foreign <- nb2listw(wm_r_pro_foreign, glist=ids_pro_foreign, style=\"B\", zero.policy=TRUE)\nrswm_ids_pro_foreign\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n42\n2 disjoint connected subgraphs\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1        S2\nB 68 4624 3.603816 0.1156751 0.9708891\n```\n\n\n:::\n:::\n\n\n\n### 2.4.1.6 Application of Spatial Weight Matrix\n\nWe now create four different spatial lagged variables:\n\n-   spatial lag with row-standardized weights\n\n-   spatial lag as a sum of neighbouring values\n\n-   spatial window average\n\n-   spatial window sum\n\n#### 2.4.1.6.1 **Spatial Lag With Row-Standardized Weights**\n\nWe now compute the average neighbor profit value for each polygon. We often refer to these values as Spatially Lagged Values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_foreign.lag <- lag.listw(rswm_r_pro_foreign, profit_foreigners$total_value)\npro_foreign.lag\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   8515.193  17968.737   9786.125   8146.420 134596.605  38955.723\n [7]  30027.315  25849.308  69950.727  49495.860  14466.082  12682.008\n[13]  12285.500  17722.284  32856.583  45153.527  74359.923  24181.276\n[19] 105254.185  13518.028   3746.675  23303.505 127335.297   5904.817\n[25]  18962.564   9199.730  41815.892   5435.180   3151.225  11707.842\n[31] 199104.537 139465.317  23475.267  34077.745  27604.423  16031.888\n[37]  38026.663  15162.938   9194.675  11038.343   7792.872      0.000\n[43]  46017.585  31137.765  36364.686  20841.120   4422.484  30034.113\n[49]   9350.865 377986.320 193862.645  30662.133  28195.245  29101.100\n[55]  10132.620  13507.610  11402.520  22217.052  32074.963   3159.425\n[61]  35931.461  33712.050  20841.120   1412.345  14707.668  30176.722\n[67]  11022.135  22918.337   7102.637\n```\n\n\n:::\n:::\n\n\n\nWe can append the spatially lagged profit values onto our `profit_foreigners` sf data-frame by using the code chunk shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list_pro_foreign <- list(profit_foreigners$province_eng, lag.listw(rswm_r_pro_foreign, profit_foreigners$total_value))\nlag.res_pro_foreign <- as.data.frame(lag.list_pro_foreign)\ncolnames(lag.res_pro_foreign) <- c(\"province_eng\", \"lag Profit\")\nprofit_foreigners <- left_join(profit_foreigners,lag.res_pro_foreign)\n```\n:::\n\n\n\nWe now plot the actual profit and spatial lag profits side by side to facilitate comparison.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_foreign <- qtm(profit_foreigners, \"total_value\")\nlag_pro_foreign <- qtm(profit_foreigners, \"lag Profit\")\ntmap_arrange(pro_foreign, lag_pro_foreign, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\nWe see a difference in the surrounding regions of Bangkok as well as Mae Hong Son, all of which are in a higher band as compared to the non-spatially lagged values.\n\n#### 2.4.1.6.2 **Spatial Lag as a sum of neighboring values**\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. For this, we must apply a function that will assign binary weights to our neighbors list. We then use the `glist` argument in the nb2listw function to explicitly assign these weights.\n\nWe first apply a function that assigns a value of 1 per neighbor. This is done with help of lapply(), which helps manipulate the neighbors structure. It basically applies a function across each value in the neighbors structure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights <- lapply(wm_r_pro_foreign, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_r_pro_foreign, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}