{
  "hash": "83988778f129270fad7cbafedd36fbaf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 2- Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\"\nauthor: \"Arjun Singh\"\ndate: 2024-09-30\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 2 Introduction\n\nTourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US\\$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US\\$ in 2020.\n\nThe figure below shows the total revenue for the tourism sector from January 2019 until Feb 2023. The figure reveals that the revenue for the industry have been recovering gradually since September 2021.\n\n![](images/clipboard-378385426.png)\n\nHowever, it is important to note that the tourism economy of Thailand is not evenly distributed- not all provinces make a lot of revenue.\n\nThailand has 77 provinces in total as shown on the map below. This map was sourced from [Wikipedia](https://en.wikipedia.org/wiki/Provinces_of_Thailand).\n\n![](images/clipboard-746665905.png)\n\nThe figure below reveals that the tourism economy of Thailand is carried by five provinces, namely Bangkok, Phuket, Chiang Mai, Sukhothai and Phetchaburi.\n\n![](images/clipboard-986836251.png)\n\n# 2.1 Objectives\n\nThe objectives of this exercise are to understand:\n\n-   if the key indicators of the tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent. If so, then we would like to detect where the clusters and outliers are, as well as the emerging hot spot/cold spot areas.\n\n# 2.2 Data and Packages\n\nThe data used for this exercise are as follows:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) which is sourced from Kaggle. \n\n    ![](images/Screenshot%202024-10-02%20180644.png)\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) which is sourced from Humanitarian Data Exchange. We will use the data at the province level (i.e: ADM1).\n\n    ![](images/clipboard-3292985936.png)\n\nWe will be focusing on various variables present in the Thailand Domestic Tourism Statistics dataset. The variables present in the dataset are as follows:\n\n-   `no_tourist_all` The total number of domestic tourists who visited the province\n\n-   `no_tourist_foreign` The number of foreign tourists who visited the province\n\n-   `no_tourist_occupied` The total number of occupied hotel rooms in the province\n\n-   `no_tourist_thai` The number of Thai tourists who visited the province\n\n-   `ratio_tourist_stay`` The percentage of occupied travel accommodation in the province\n\n-   `revenue`_all` The net profit generated by the tourism industry in the province, in Thai Baht\n\n-   `revenue`_foreign` The net profit generated by foreign tourists in the province, in Thai Baht\n\n-   `revenue_thai` The net profit generated by Thai tourists in the province, in Thai Baht\n\nThe following packages are used:\n\n-   **`sf`**: Provides simple features support for handling and analyzing spatial vector data in R.\n-   **`spdep`**: A package for spatial dependence and spatial regression analysis, particularly for handling spatial weights.\n-   **`tmap`**: A flexible visualization package for thematic maps, supporting both static and interactive mapping in R.\n-   **`tidyverse`**: A collection of R packages designed for data science, emphasizing data manipulation, visualization, and functional programming.\n-   **`knitr`**: A dynamic report generation tool in R, allowing for the integration of code, results, and narrative in reproducible documents.\n\nWe now load these packages into our environment by using the p_load() function of the pacman package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, plotly, Kendall, sfdep)\nset.seed(123)\ntmap_mode('plot')\n```\n:::\n\n\n\n## 2.1 Importing the data\n\n### 2.1.1 Importing the aspatial data\n\nWe will now import the aspatial data by implementing the read_csv() function of the readr package as shown in the code chunk below.\n\nWe create three separate data frames using the same data-set to facilitate our analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourists=read_csv('data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv')\ntourists_temporal= tourists%>%\n  mutate(month=month(date))%>%\n  mutate(year=year(date))\n# Summing the 'value' based on 'province_eng' and 'variable'\nsummed_data <- tourists %>%\n  group_by(region_eng, province_eng, variable) %>%\n  summarize(total_value = sum(value, na.rm = TRUE), .groups = 'drop')\n\n\n# View the result\nhead(summed_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  region_eng province_eng variable           total_value\n  <chr>      <chr>        <chr>                    <dbl>\n1 central    Ang Thong    no_tourist_all        2293450 \n2 central    Ang Thong    no_tourist_foreign      42073 \n3 central    Ang Thong    no_tourist_stay        391465 \n4 central    Ang Thong    no_tourist_thai       2251377 \n5 central    Ang Thong    ratio_tourist_stay       1622.\n6 central    Ang Thong    revenue_all        2556650000 \n```\n\n\n:::\n:::\n\n\n\n### 2.1.2 Importing the geospatial data\n\nWe now import the geospatial data using the st_read() function of the sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince=st_read(dsn = \"data/geospatial\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")%>%\n  select(1:5, 17)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nWe now check the CRS information using the st_crs() function of the sf package and transform the EPSG code using the st_transform() function if it is not 32647, the EPSG code of Thailand.\n\n::: panel-tabset\n## Check CRS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(province)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\n## Transform CRS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_transform(province, 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n                         geometry\n1  MULTIPOLYGON (((674339.8 15...\n2  MULTIPOLYGON (((687139.8 15...\n3  MULTIPOLYGON (((644817.9 15...\n4  MULTIPOLYGON (((704086 1575...\n5  MULTIPOLYGON (((662941.6 16...\n6  MULTIPOLYGON (((643472.8 16...\n7  MULTIPOLYGON (((751293.3 17...\n8  MULTIPOLYGON (((647136.1 16...\n9  MULTIPOLYGON (((620165.4 17...\n10 MULTIPOLYGON (((757935.1 16...\n```\n\n\n:::\n:::\n\n\n:::\n\n### 2.1.3 Performing relational join\n\nAfter performing consistency checks, we notice that the provinces aren't named correctly in our tourist data-set. We correct the names below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummed_data$province_eng <- gsub(\"Nong Bua Lamphu\", \"Nong Bua Lam Phu\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Sisaket\", \"Si Sa Ket\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Phang Nga\", \"Phangnga\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Lopburi\", \"Lop Buri\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Chonburi\", \"Chon Buri\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Chainat\", \"Chai Nat\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Buriram\", \"Buri Ram\", summed_data$province_eng)\nsummed_data$province_eng <- gsub(\"Prachinburi\", \"Prachin Buri\", summed_data$province_eng)\n```\n:::\n\n\n\nWe will now join the aspatial and geospatial data by using the left_join() function of the package as showing in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_tourism=left_join(summed_data, province, by= c(\"province_eng\"=\"ADM1_EN\"))\n```\n:::\n\n\n\n# 2.3 Exploratory Data Analysis\n\n## 2.3.1 Visualizing regional indicators\n\nAfter successfully completing the relational join, we can now plot a choropleth map to visualize the tourism in each province in Thailand using various functions of the tmap package.\n\n### 2.3.1.1 Number of tourists\n\n::: panel-tabset\n## Number of Foreign Tourists\n\nWe first take a look at the number of tourists, both foreign and domestic, across all provinces in Thailand.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_foreign=pro_tourism%>%\n  filter(variable=='no_tourist_foreign')\ntourist_foreign=st_as_sf(tourist_foreign)\n\ntourist_foreign=st_as_sf(tourist_foreign)\n\n\n# Create the interactive basemap\nbasemap01 <- tm_shape(tourist_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style= 'quantile')+\n  tm_text(\"province_eng\", size = 0.3) \n\n\n# Display the interactive map\nbasemap01\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Number of Domestic Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_domestic=pro_tourism%>%\n  filter(variable=='no_tourist_thai')\n\ntourist_domestic=st_as_sf(tourist_domestic)\n\n\n# Create the interactive basemap\nbasemap02 <- tm_shape(tourist_domestic) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile')+\n  tm_text(\"province_eng\", size = 0.3) \n\n# Display the interactive map\nbasemap02\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## All tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_all=pro_tourism%>%\n  filter(variable=='no_tourist_all')\n\ntourist_all=st_as_sf(tourist_all)\n\n\n# Create the interactive basemap\nbasemap03 <- tm_shape(tourist_all) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile')+\n  tm_text(\"province_eng\", size = 0.3) \n\n# Display the interactive map\nbasemap03\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n:::\n\n#### 2.3.1.2 Revenue\n\nWe now take a look at the revenue generated by foreign and domestic tourists in Thailand\n\n::: panel-tabset\n## Revenue generated by Foreigners\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_foreigners=pro_tourism%>%\n  filter(variable=='revenue_foreign')\nprofit_foreigners=st_as_sf(profit_foreigners)\n  \n\n\n# Create the interactive basemap\nbasemap <- tm_shape(profit_foreigners) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style= 'quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\n# Display the interactive map\nbasemap\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Revenue generated by Domestic Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_domestic=pro_tourism%>%\n  filter(variable=='revenue_thai')\n\nprofit_domestic=st_as_sf(profit_domestic)\n\n\n# Create the interactive basemap\nbasemap2 <- tm_shape(profit_domestic) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\n# Display the interactive map\nbasemap2\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Overall Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_all=pro_tourism%>%\n  filter(variable=='revenue_all')\nprofit_all=st_as_sf(profit_all)\n  \n\n\n# Create the interactive basemap\nbasemap3 <- tm_shape(profit_all) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style= 'quantile')+\n  tm_text(\"province_eng\", size = 0.5)     \n\n# Display the interactive map\nbasemap3\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n:::\n\nBangkok seems to be the most lucrative province overall.\n\n#### 2.3.1.3 Occupancy Rate by Year. The impact of Covid.\n\nWe will now look at the occupancy rates, namely the ratio_tourist_stay variable. This is derived by the following formula:\n\n## Total Rooms Booked\n\nTotal Rooms Available\n\nWe do this year by year.\n\n::: panel-tabset\n## 2019\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourists_temporal$province_eng <- gsub(\"Nong Bua Lamphu\", \"Nong Bua Lam Phu\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Sisaket\", \"Si Sa Ket\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Phang Nga\", \"Phangnga\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Lopburi\", \"Lop Buri\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Chonburi\", \"Chon Buri\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Chainat\", \"Chai Nat\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Buriram\", \"Buri Ram\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Prachinburi\", \"Prachin Buri\", tourists_temporal$province_eng)\noccupancy_2019_avg =tourists_temporal %>%\n  filter(year == 2019, variable == 'ratio_tourist_stay') %>%\n  group_by(province_eng) %>%\n  summarize(avg_occupancy = mean(value, na.rm = TRUE))\noccupancy_2019_avg=left_join(occupancy_2019_avg, province, by=c('province_eng'='ADM1_EN'))\n\noccupancy_2019_avg=st_as_sf(occupancy_2019_avg)\ntm_shape(occupancy_2019_avg) +\n  tm_polygons(col = \"avg_occupancy\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2020 data\noccupancy_2020_avg = tourists_temporal %>%\n  filter(year == 2020, variable == 'ratio_tourist_stay') %>%\n  group_by(province_eng) %>%\n  summarize(avg_occupancy = mean(value, na.rm = TRUE))\n\noccupancy_2020_avg = left_join(occupancy_2020_avg, province, by = c('province_eng' = 'ADM1_EN'))\n\noccupancy_2020_avg = st_as_sf(occupancy_2020_avg)\ntm_shape(occupancy_2020_avg) +\n  tm_polygons(col = \"avg_occupancy\", palette = \"Blues\", style = 'quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## 2021\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2021 data\noccupancy_2021_avg = tourists_temporal %>%\n  filter(year == 2021, variable == 'ratio_tourist_stay') %>%\n  group_by(province_eng) %>%\n  summarize(avg_occupancy = mean(value, na.rm = TRUE))\n\noccupancy_2021_avg = left_join(occupancy_2021_avg, province, by = c('province_eng' = 'ADM1_EN'))\n\noccupancy_2021_avg = st_as_sf(occupancy_2021_avg)\ntm_shape(occupancy_2021_avg) +\n  tm_polygons(col = \"avg_occupancy\", palette = \"Blues\", style = 'quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## 2022\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2022 data\noccupancy_2022_avg = tourists_temporal %>%\n  filter(year == 2022, variable == 'ratio_tourist_stay') %>%\n  group_by(province_eng) %>%\n  summarize(avg_occupancy = mean(value, na.rm = TRUE))\n\noccupancy_2022_avg = left_join(occupancy_2022_avg, province, by = c('province_eng' = 'ADM1_EN'))\n\noccupancy_2022_avg = st_as_sf(occupancy_2022_avg)\ntm_shape(occupancy_2022_avg) +\n  tm_polygons(col = \"avg_occupancy\", palette = \"Blues\", style = 'quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n:::\n\nWe immediately see a big difference based on the year. There was a far lesser occupancy rate during the covid years as we can see from the above choropleth maps.\n\nOccupancy rates peaked in 2019 and dropped in 2020 and 2021. The occupancy rate has started to rebound and return to higher levels in 'post-covid'.\n\nAnother thing to pay attention to is the occupancy rate of each individual region. We notice that regions with high occupancy rates do not necessarily indicate high revenue or high number of tourists. This indicates to us that it's a smaller region or a region with few hotels in general. There is room for boosting the tourism in these regions by improving the hotels and increasing the number of hotels in these regions.\n\n#### 2.3.1.4 Seasonal Data\n\n##### 2.3.1.4.1 Number of tourists by season\n\nWe will now analyse how revenue is distributed based on the month of the year.\n\nFor this, we first aggregate data based on certain features such as holiday periods and seasons.\n\nWe determine that there are three distinct seasons in Thailand from the \\['UK Meteorological Office'\\](https://www.metoffice.gov.uk/weather/travel/holiday-weather/asia/thailand#:\\~:text=Part%20of%20Thailand's%20appeal%20is,season%20(March%20to%20May).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourists_temporal$province_eng <- gsub(\"Nong Bua Lamphu\", \"Nong Bua Lam Phu\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Sisaket\", \"Si Sa Ket\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Phang Nga\", \"Phangnga\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Lopburi\", \"Lop Buri\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Chonburi\", \"Chon Buri\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Chainat\", \"Chai Nat\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Buriram\", \"Buri Ram\", tourists_temporal$province_eng)\ntourists_temporal$province_eng <- gsub(\"Prachinburi\", \"Prachin Buri\", tourists_temporal$province_eng)\n# Assuming your dataset is called 'tourists_temporal' and has a 'month' column\ntourists_temporal <- tourists_temporal %>%\n  mutate(season = case_when(\n    month %in% c(5, 6, 7, 8, 9, 10) ~ \"Wet Season\",\n    month %in% c(11, 12, 1, 2) ~ \"Cool Season\",\n    month %in% c(3, 4, 5) ~ \"Hot Season\"\n  ))\n\n# View the result\nhead(tourists_temporal)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 10\n  date       province_thai province_eng    region_thai region_eng variable value\n  <date>     <chr>         <chr>           <chr>       <chr>      <chr>    <dbl>\n1 2019-01-01 กรุงเทพมหานคร  Bangkok         ภาคกลาง     central    ratio_t…  93.4\n2 2019-01-01 ลพบุรี          Lop Buri        ภาคกลาง     central    ratio_t…  61.3\n3 2019-01-01 พระนครศรีอยุธยา Phra Nakhon Si… ภาคกลาง     central    ratio_t…  73.4\n4 2019-01-01 สระบุรี         Saraburi        ภาคกลาง     central    ratio_t…  67.3\n5 2019-01-01 ชัยนาท         Chai Nat        ภาคกลาง     central    ratio_t…  79.3\n6 2019-01-01 นครปฐม        Nakhon Pathom   ภาคกลาง     central    ratio_t…  71.7\n# ℹ 3 more variables: month <dbl>, year <dbl>, season <chr>\n```\n\n\n:::\n:::\n\n\n\nWe now join tourists_temporal df to the province df create separate data-frames for each.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate data frames for each season\n\nwet_season_df <- tourists_temporal %>%\n  filter(season == \"Wet Season\")\n\ncool_season_df <- tourists_temporal %>%\n  filter(season == \"Cool Season\")\n\nhot_season_df <- tourists_temporal %>%\n  filter(season == \"Hot Season\")\n```\n:::\n\n\n\nWe now sum the values using the group_by() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtaining aggregates\nwet_sum= wet_season_df %>%\n  group_by(province_eng, variable) %>%\n  summarize(total_value = sum(value, na.rm = TRUE))\n\n# JOINING DF TO THE PROVINCE DF\nwet_sum=left_join(wet_sum, province, by=c('province_eng'='ADM1_EN'))\n\n# Obtaining Aggregates\ncool_sum= cool_season_df %>%\n  group_by(province_eng, variable) %>%\n  summarize(total_value = sum(value, na.rm = TRUE))\n\n#Joining to province df\ncool_sum= left_join(cool_sum, province, by=c('province_eng'='ADM1_EN'))\n\n# Obtaining Aggregates\nhot_sum= hot_season_df %>%\n  group_by(province_eng, variable) %>%\n  summarize(total_value = sum(value, na.rm = TRUE))\n\n#Joining to province df\nhot_sum=left_join(hot_sum, province, by=c('province_eng'='ADM1_EN'))\n```\n:::\n\n\n\nWe now create choropleth maps for each by implementing functions of the tmap packages.\n\n::: panel-tabset\n## Wet Season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwet_sum=st_as_sf(wet_sum)\n\nwet_tourism_foreign=wet_sum%>%filter(variable=='no_tourist_foreign')\nwet_tourism_thai= wet_sum%>%filter(variable=='no_tourist_thai')\n\n# Create the basemap\nbasemap11 <- tm_shape(wet_tourism_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\n\nbasemap12<- tm_shape(wet_tourism_thai) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\ntmap_arrange(basemap11, basemap12)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nThere are far more domestic travellers in the rainy season compared to foreign travellers.\n\n## Hot season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhot_sum=st_as_sf(hot_sum)\n\nhot_tourism_foreign=hot_sum%>%filter(variable=='no_tourist_foreign')\nhot_tourism_thai= hot_sum%>%filter(variable=='no_tourist_thai')\n\n# Create the basemap\nbasemap13 <- tm_shape(hot_tourism_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\n\nbasemap14<- tm_shape(hot_tourism_thai) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\ntmap_arrange(basemap13, basemap14)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Cool season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncool_sum=st_as_sf(cool_sum)\n\ncool_tourism_foreign=cool_sum%>%filter(variable=='no_tourist_foreign')\ncool_tourism_thai= cool_sum%>%filter(variable=='no_tourist_thai')\n\n# Create the basemap\nbasemap15 <- tm_shape(cool_tourism_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\n\nbasemap16<- tm_shape(cool_tourism_thai) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='jenks') +\n  tm_text(\"province_eng\", size = 0.5)\n\ntmap_arrange(basemap15, basemap16)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n:::\n\nWe see clear differences in number of tourists across regions based on the season, indicating to us that tourism is not independent from temporal factors such as time of the year.\n\n##### 2.3.1.4.2 Profit from tourists by season\n\n::: panel-tabset\n## Wet Season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwet_sum=st_as_sf(wet_sum)\n\nwet_profit_foreign=wet_sum%>%filter(variable=='revenue_foreign')\nwet_profit_thai= wet_sum%>%filter(variable=='revenue_thai')\n\n# Create the basemap\nbasemap21 <- tm_shape(wet_profit_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\n\nbasemap22<- tm_shape(wet_profit_thai) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\ntmap_arrange(basemap21, basemap22)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n## Hot season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhot_sum=st_as_sf(hot_sum)\n\nhot_profit_foreign=hot_sum%>%filter(variable=='revenue_foreign')\nhot_profit_thai= hot_sum%>%filter(variable=='revenue_thai')\n\n# Create the basemap\nbasemap23 <- tm_shape(hot_profit_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\n\nbasemap24<- tm_shape(hot_profit_thai) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\ntmap_arrange(basemap23, basemap24)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## Cool Season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncool_sum=st_as_sf(cool_sum)\n\ncool_profit_foreign=cool_sum%>%filter(variable=='revenue_foreign')\ncool_profit_thai= cool_sum%>%filter(variable=='revenue_thai')\n\n# Create the basemap\nbasemap25 <- tm_shape(cool_profit_foreign) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\n\nbasemap26<- tm_shape(cool_profit_thai) +\n  tm_polygons(col = \"total_value\", palette = \"Blues\", style='quantile') +\n  tm_text(\"province_eng\", size = 0.5)\n\ntmap_arrange(basemap25, basemap26)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n:::\n\nWe notice that while for the most part, there are significantly more domestic travellers, more profit is earned from foreign travellers throughout the year.\n\nWe infer from our above visualizations that tourism statistics are not independent from space and time. Both of these factors impact the different metrics significantly.\n\n# 2.4 Spatial Analysis\n\nWe now implement the **poly2nb()** function of the **spdep** package to compute contiguity weight matrices for the study area selected.\n\nUsing this function, we are able to build a ‘neighbors list’ based on regions with contiguous boundaries.\n\nIn this function, we will pass an argument, ‘queen’, that can be set as either TRUE (default) or FALSE. If the ‘queen’ argument is not explicitly set to FALSE, the function returns a list of first order neighbors using the Queen criteria.\n\n[You may refer to the `spdep` package documentation here](https://cran.r-project.org/web/packages/spdep/spdep.pdf) to learn more about its functions and arguments.\n\n## 2.4.1 Spatial Weights\n\n### 2.4.1.1 Computing Contiguity Spatial Weights\n\nWe use the poly2nb() function as shown in the code chunk below. Using this, we are able to compute a Queen contiguity weight matrix.\n\n::: panel-tabset\n## Profit from Foreigners\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rook contiguity\nwm_r <- poly2nb(profit_foreigners, queen=FALSE)\nwrite_rds(wm_r, 'data/rds/wm_r_pro_foreign')\n\n# Queen Contiguity\nwm_q <- poly2nb(profit_foreigners, queen=TRUE)\nwrite_rds(wm_q, 'data/rds/wm_q_pro_foreign')\n```\n:::\n\n\n\n::: panel-tabset\n## Rook Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r_pro_foreign=read_rds(\"data/rds/wm_r_pro_foreign\")\nsummary(wm_r_pro_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n\n## Queen Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_pro_foreign=read_rds(\"data/rds/wm_q_pro_foreign\")\nsummary(wm_q_pro_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n:::\n\n## Domestic Tourists (Profit)\n\nWe now repeat the same steps for Domestic tourists.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rook contiguity \nwm_r <- poly2nb(profit_domestic, queen=FALSE)\nwrite_rds(wm_r, 'data/rds/wm_r_pro_dom')\n\n# Queen Contiguity\nwm_q <- poly2nb(profit_domestic, queen=TRUE)\nwrite_rds(wm_q, 'data/rds/wm_q_pro_dom')\n```\n:::\n\n\n\nWe now look at a summary of both using the code chunks below.\n\n::: panel-tabset\n## Rook Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r_pro_dom=read_rds(\"data/rds/wm_r_pro_dom\")\nsummary(wm_r_pro_dom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n\n## Queen Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_pro_dom=read_rds(\"data/rds/wm_q_pro_dom\")\nsummary(wm_q_pro_dom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n:::\n\n## Tourists (all)\n\nWe now check all tourists.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rook contiguity\nwm_r <- poly2nb(profit_all, queen=FALSE)\nwrite_rds(wm_r, 'data/rds/wm_r_pro_all')\n\n# Queen Contiguity\nwm_q <- poly2nb(profit_all, queen=TRUE)\nwrite_rds(wm_q, 'data/rds/wm_q_pro_all')\n```\n:::\n\n\n\n::: panel-tabset\n## Rook Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_r_pro_all=read_rds(\"data/rds/wm_r_pro_all\")\nsummary(wm_r_pro_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n\n## Queen Contiguity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_pro_all=read_rds(\"data/rds/wm_q_pro_all\")\nsummary(wm_q_pro_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\nWe generate the Queen Contiguity data for Number of tourists.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_tour= poly2nb(tourist_all, queen=TRUE)\n```\n:::\n\n\n\nWe now load the Queen Contiguity data for each individual year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 2019\nwm_q_2019=read_rds('data/rds/wm_q_2019')\n\n## 2020\nwm_q_2020=read_rds('data/rds/wm_q_2020')\n\n\n## 2021\nwm_q_2021=read_rds('data/rds/wm_q_2021')\n\n## 2022\nwm_q_2022=read_rds('data/rds/wm_q_2022')\n```\n:::\n\n\n\n\n### 2.4.1.2 Visualizing Contiguity Spatial Weights\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons in this situation, so we need to ensure that our points are in order to produce our connectivity graphs.\n\nUsually, the method of choice will be polygon centroids. We calculate using the sf package before moving onto the graphs. Getting latitude and longitude of the Polygon Centroids.\n\nWe need points to associate with each polygon before we can make our connectivity graph. It won’t be as simple as applying the st_centroid() function of the sf sf object: *`us.bound`*. We need the coordinates in a separate data-frame for this to work.\n\nTo do this, we will use a mapping function which will apply a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of `us.bound`.\n\nThe function that we implement in this situation will be st_centroid().\n\nWe will be using the map_dbl variation of map from the purrr package.\n\n::: panel-tabset\n## Coordinates of Foreign Travellers\n\nWe start by extracting the longitude and latitude values for foreign travellers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude_profit_foreign= map_dbl(profit_foreigners$geometry, ~st_centroid(.x)[[1]])\nlatitude_profit_foreign= map_dbl(profit_foreigners$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\nNow that we have the latitude and longitude values, we can use the cbind() function to put the longitude and latitude values into the same object, `coords`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_profit_foreign <- cbind(longitude_profit_foreign, latitude_profit_foreign)\n```\n:::\n\n\n\nWe use the head() function to verify if `coords` is in the correct format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords_profit_foreign)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude_profit_foreign latitude_profit_foreign\n[1,]                100.34851                14.62354\n[2,]                100.62353                13.77183\n[3,]                100.02748                15.13390\n[4,]                 99.04668                14.58513\n[5,]                100.90713                15.10760\n[6,]                100.10312                13.92502\n```\n\n\n:::\n:::\n\n\n\n## Coordinates of Domestic Travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude_profit_domestic= map_dbl(profit_domestic$geometry, ~st_centroid(.x)[[1]])\nlatitude_profit_domestic= map_dbl(profit_domestic$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\nNow that we have the latitude and longitude values, we can use the cbind() function to put the longitude and latitude values into the same object, `coords`. We now create the coords object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_profit_domestic=cbind(longitude_profit_domestic, latitude_profit_domestic)\n```\n:::\n\n\n\nWe use the head() function to verify if `coords` is in the correct format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords_profit_domestic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude_profit_domestic latitude_profit_domestic\n[1,]                 100.34851                 14.62354\n[2,]                 100.62353                 13.77183\n[3,]                 100.02748                 15.13390\n[4,]                  99.04668                 14.58513\n[5,]                 100.90713                 15.10760\n[6,]                 100.10312                 13.92502\n```\n\n\n:::\n:::\n\n\n\n## Coordinates for all travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude_profit_all= map_dbl(profit_all$geometry, ~st_centroid(.x)[[1]])\nlatitude_profit_all= map_dbl(profit_all$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\nWe now create the coords object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_profit_all <- cbind(longitude_profit_all, latitude_profit_all)\nhead(coords_profit_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude_profit_all latitude_profit_all\n[1,]            100.34851            14.62354\n[2,]            100.62353            13.77183\n[3,]            100.02748            15.13390\n[4,]             99.04668            14.58513\n[5,]            100.90713            15.10760\n[6,]            100.10312            13.92502\n```\n\n\n:::\n:::\n\n\n:::\n\nWe can now visualize it using the plot() function as shown in the following code chunks.\n\n::: panel-tabset\n## Profits from foreign travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_foreigners$geometry, border=\"lightgrey\")\nplot(wm_r_pro_foreign, coords_profit_foreign, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_foreigners$geometry, border=\"lightgrey\")\nplot(wm_q_pro_foreign, coords_profit_foreign, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n## Profits from domestic travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_domestic$geometry, border=\"lightgrey\")\nplot(wm_r_pro_dom, coords_profit_domestic, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_domestic$geometry, border=\"lightgrey\")\nplot(wm_q_pro_dom, coords_profit_foreign, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\n## Profits from all travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_all$geometry, border=\"lightgrey\")\nplot(wm_r_pro_all, coords_profit_all, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_all$geometry, border=\"lightgrey\")\nplot(wm_q_pro_all, coords_profit_foreign, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 2.4.1.3 Computing Distance Based Neighbors\n\nIn order to derive distance-based weight matrices, we will implement the **dnearneigh()** function of the **spdep** package.\n\nThis function identifies neighbors of region points by Euclidean Distance with a distance band with lower d1 and upper d2 bounds controlled by the `bounds=` argument.\n\nIf un-projected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and `longlat=TRUE,` great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n#### 2.4.1.3.1 Determining cut-off distance\n\nWe must first determine the upper limit for the distance band by using the steps shown below:\n\n-   **Find k Nearest Neighbours**: Use **`knearneigh()`** from the **`spdep`** package to get a matrix of indices for the k nearest neighbours of each point.\n\n-   **Convert to Neighbours List**: Convert the **`knn`** object returned by **`knearneigh()`** into a neighbours list of class **`nb`** using **`knn2nb()`**. This list contains integer vectors with neighbour region number IDs.\n\n-   **Calculate Edge Lengths**: Use **`nbdists()`** from **`spdep`** to return the lengths of neighbour relationship edges. The function returns distances in the units of the coordinates if projected, otherwise in kilometers.\n\n-   **Flatten the List**: Remove the list structure of the returned object using **`unlist()`**\n\nWe focus on ALL travellers as opposed to singling out Foreign and/or Domestic travellers for the following.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1_pro_all <- knn2nb(knearneigh(coords_profit_all))\nk1dists_pro_all <- unlist(nbdists(k1_pro_all, coords_profit_all, longlat = TRUE))\nsummary(k1dists_pro_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   51.92   64.33   63.24   76.77  110.94 \n```\n\n\n:::\n:::\n\n\n\n::: note-box\nYou could also do the below if you are interested in singling them out based on foreign and domestic travellers.\n:::\n\n::: panel-tabset\n## Profits from foreign travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1_pro_foreign <- knn2nb(knearneigh(coords_profit_foreign))\nk1dists_pro_foreign <- unlist(nbdists(k1_pro_foreign, coords_profit_foreign, longlat = TRUE))\nsummary(k1dists_pro_foreign)\n```\n:::\n\n\n\nFrom the output above, we can infer that the largest first nearest neighbor distance is just under 125KM. Using this value, 125KM, as the upper threshold gives certainty that all units will have at least one neighbor.\n\n## Profits from domestic travellers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1_pro_domestic <- knn2nb(knearneigh(coords_profit_domestic))\nk1dists_pro_domestic <- unlist(nbdists(k1_pro_domestic, coords_profit_domestic, longlat = TRUE))\nsummary(k1dists_pro_domestic)\n```\n:::\n\n\n:::\n\n#### 2.4.1.3.2 Computing Distance Based Weight Matrix\n\nWe now implement the dnearneigh() function to compute the distance weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d62_pro_all <- dnearneigh(coords_profit_all, 0, 111, longlat = TRUE)\nwm_d62_pro_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 350 \nPercentage nonzero weights: 5.903188 \nAverage number of links: 4.545455 \n2 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n\n\n::: insights-box\nFrom the output above, we infer that there are 69 distinct regions, as we identified earlier. There are 368 connections between regions where the distance is within the threshold that we have set. 7.73% of all possible region pairs have a connection. On average, each region is connected to approximately 5.3 other regions.\n:::\n\nWe now use the combination of table() and card() functions from the spdep package to display the structure of the weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(profit_all$province_eng, card(wm_d62_pro_all))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          \n                           1 2 3 4 5 6 7 8 9 10 11 12 13 14\n  Amnat Charoen            0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Ang Thong                0 0 0 0 0 0 0 0 0  0  1  0  0  0\n  Bangkok                  0 0 0 0 0 0 0 0 0  0  0  1  0  0\n  Bueng Kan                0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Buri Ram                 0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Chachoengsao             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Chai Nat                 0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Chaiyaphum               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Chanthaburi              0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Chiang Mai               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Chiang Rai               1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Chon Buri                0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Chumphon                 1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Kalasin                  0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Kamphaeng Phet           0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Kanchanaburi             0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Khon Kaen                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Krabi                    0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Lampang                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Lamphun                  0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Loei                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Lop Buri                 0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Mae Hong Son             1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Maha Sarakham            0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Mukdahan                 0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Nakhon Nayok             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Pathom            0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Phanom            0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Ratchasima        1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Sawan             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Nakhon Si Thammarat      0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nan                      0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Narathiwat               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nong Bua Lam Phu         0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nong Khai                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Nonthaburi               0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Pathum Thani             0 0 0 0 0 0 0 0 0  0  0  0  0  1\n  Pattani                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phangnga                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phatthalung              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phayao                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Phetchabun               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phetchaburi              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phichit                  0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phitsanulok              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phra Nakhon Si Ayutthaya 0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Phrae                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phuket                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Prachin Buri             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Prachuap Khiri Khan      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ranong                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Ratchaburi               0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Rayong                   0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Roi Et                   0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Sa Kaeo                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Sakon Nakhon             0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Samut Prakan             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Samut Sakhon             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Samut Songkhram          0 0 0 0 0 0 0 1 0  0  0  0  0  0\n  Saraburi                 0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Satun                    0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Si Sa Ket                0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Sing Buri                0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Songkhla                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Sukhothai                0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Suphan Buri              0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Surat Thani              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Surin                    0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Tak                      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Trang                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Trat                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ubon Ratchathani         0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Udon Thani               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Uthai Thani              0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Uttaradit                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Yala                     0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Yasothon                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n```\n\n\n:::\n:::\n\n\n\nNext, we implement the n.comp.nb() function to identify the number of connected components in a neighbor list object of class nb.\n\n::: note-box\nNote: A connected component is a subset of regions where each region is reachable from any other region within the same subset. The function returns an object that includes the number of connected components (`nc`) and a vector indicating the component membership for each region.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp_pro_all<- n.comp.nb(wm_d62_pro_all)\nn_comp_pro_all$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n_comp_pro_all$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2 \n63 14 \n```\n\n\n:::\n:::\n\n\n\n#### 2.4.1.3.3 **Plotting fixed distance weight matrix**\n\nWe now plot the distance weight matrix using the plot() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(profit_all$geometry, border=\"lightgrey\")\nplot(wm_d62_pro_all, coords_profit_all, add=TRUE)\nplot(k1_pro_all, coords_profit_all, add=TRUE, col=\"purple\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\nAs identified earlier, we see two distinct groups. The upper 63 and the bottom 14.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(profit_all$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1_pro_all, coords_profit_foreign, add=TRUE, col=\"red\", length=0.08)\nplot(profit_all$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62_pro_all, coords_profit_foreign, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n\n### 2.4.1.4 **Weights based on Inversed Distance Weighting (IDW)**\n\nWe first compute the distances between areas by implementing the **nbdists()** function of the **spdep** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_pro_all <- nbdists(wm_q_pro_all, coords_profit_all, longlat = TRUE)\nids_pro_all <- lapply(dist_pro_all, function(x) 1/(x))\nids_pro_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.004304527 0.001160634 0.001066433\n\n[[2]]\n[1] 0.012985433 0.001690876 0.002273629 0.001178524\n\n[[3]]\n[1] 0.007462489 0.001950621 0.001878392 0.004449595 0.004722243 0.002947391\n\n[[4]]\n[1] 0.001573833 0.001596968 0.004315842\n\n[[5]]\n[1] 0.015632633 0.003912968 0.004489280 0.007575615 0.001312962\n\n[[6]]\n[1] 0.007462489 0.008317161 0.014028638 0.003155141 0.004087449 0.002035937\n[7] 0.003527405 0.002928580\n\n[[7]]\n[1] 0.003581885 0.002363964 0.001150661 0.001293117\n\n[[8]]\n[1] 0.009952248 0.018047546 0.003860230 0.003001429\n\n[[9]]\n[1] 0.008317161 0.015334899 0.001501404 0.002477496 0.002901933\n\n[[10]]\n[1] 0.003537334 0.007878212 0.004212708 0.007957349 0.001320848\n\n[[11]]\n[1] 0.003537334 0.003736228 0.001328590\n\n[[12]]\n[1] 0.014028638 0.015334899 0.001657611\n\n[[13]]\n[1] 0.001870586 0.001552262 0.001311196\n\n[[14]]\n[1] 0.006701583 0.006503928 0.004354774 0.001595340 0.003356687 0.002124330\n\n[[15]]\n[1] 0.002823347 0.001837465 0.001826891 0.001801133 0.001537177\n\n[[16]]\n[1] 0.002359220 0.006697566 0.001066427 0.001260504 0.001173126\n\n[[17]]\n[1] 0.015632633 0.009952248 0.006701583 0.004725908 0.003907719 0.003558587\n[7] 0.003072110 0.002808776 0.002310335\n\n[[18]]\n[1] 0.002183596 0.002065176 0.001128192 0.001325482\n\n[[19]]\n[1] 0.007878212 0.003736228 0.009026604 0.002035029 0.001407667 0.001652236\n[7] 0.001449637\n\n[[20]]\n[1] 0.004212708 0.009026604 0.001575009\n\n[[21]]\n[1] 0.004725908 0.002660170 0.001937480 0.003080049 0.002215115 0.002573408\n\n[[22]]\n[1] 0.012985433 0.018047546 0.004910079 0.004704466 0.003599849 0.001755660\n[7] 0.002656938 0.002520896\n\n[[23]]\n[1] 0.007957349 0.001346034\n\n[[24]]\n[1] 0.003912968 0.006503928 0.003907719 0.001392161 0.001761791\n\n[[25]]\n[1] 0.004304527 0.004354774 0.001980272 0.001552070 0.002884652 0.001178221\n\n[[26]]\n[1] 0.003155141 0.003558711 0.003382780 0.001352479 0.001584017\n\n[[27]]\n[1] 0.0019506208 0.0023592196 0.0059364663 0.0013983663 0.0020314658\n[6] 0.0017873918 0.0008895808\n\n[[28]]\n[1] 0.001573833 0.001980272 0.002410879\n\n[[29]]\n[1] 0.004489280 0.003860230 0.003558587 0.004910079 0.003558711 0.001870923\n[7] 0.003963653 0.002028040\n\n[[30]]\n[1] 0.0035818850 0.0028233466 0.0047044657 0.0042667164 0.0052617025\n[6] 0.0042537796 0.0010404155 0.0009843316\n\n[[31]]\n[1] 0.0021835958 0.0123436755 0.0009408462 0.0008908885 0.0008955000\n\n[[32]]\n[1] 0.005831318 0.002097865 0.001114347\n\n[[33]]\n[1] 0.0133013891 0.0008980288\n\n[[34]]\n[1] 0.003072110 0.002660170 0.005531089\n\n[[35]]\n[1] 0.001596968 0.001937480 0.002236446 0.005277973\n\n[[36]]\n[1] 0.001878392 0.005936466 0.002734973 0.001604487\n\n[[37]]\n[1] 0.004449595 0.004087449 0.003382780 0.002734973 0.001796205 0.002468228\n\n[[38]]\n[1] 0.0133013891 0.0009426671 0.0009042085\n\n[[39]]\n[1] 0.0020651761 0.0019354986 0.0007996429\n\n[[40]]\n[1] 0.0123436755 0.0021315468 0.0009945834 0.0009414076\n\n[[41]]\n[1] 0.001328590 0.002035029 0.005831318 0.002006311\n\n[[42]]\n[1] 0.003001429 0.002808776 0.003080049 0.003599849 0.004266716 0.003407656\n[7] 0.007482348\n\n[[43]]\n[1] 0.001364908 0.001868686 0.001609008\n\n[[44]]\n[1] 0.001837465 0.005261703 0.003407656 0.004327631\n\n[[45]]\n[1] 0.001826891 0.002215115 0.007482348 0.004327631 0.001033418 0.001055321\n\n[[46]]\n[1] 0.0016908763 0.0017556598 0.0013983663 0.0016044867 0.0017962051\n[6] 0.0043493723 0.0006979124\n\n[[47]]\n[1] 0.0014076669 0.0020978649 0.0020063106 0.0007880819 0.0008352345\n\n[[48]]\nnumeric(0)\n\n[[49]]\n[1] 0.002035937 0.001352479 0.001870923 0.003499025\n\n[[50]]\n[1] 0.001870586 0.001364908\n\n[[51]]\n[1] 0.001552262 0.001935499 0.000722524\n\n[[52]]\n[1] 0.006697566 0.002031466 0.001868686 0.003588130 0.005521926\n\n[[53]]\n[1] 0.001501404 0.001657611\n\n[[54]]\n[1] 0.0015953402 0.0013921607 0.0015520704 0.0010089184 0.0008445359\n[6] 0.0006908864\n\n[[55]]\n[1] 0.007575615 0.003527405 0.002477496 0.003963653 0.003499025\n\n[[56]]\n[1] 0.004315842 0.003356687 0.002884652 0.002410879 0.002236446 0.002178883\n\n[[57]]\n[1] 0.004722243 0.002928580\n\n[[58]]\n[1] 0.002947391 0.001787392 0.003588130 0.009069811\n\n[[59]]\n[1] 0.001609008 0.005521926 0.009069811\n\n[[60]]\n[1] 0.002656938 0.001584017 0.002028040 0.002468228 0.004349372\n\n[[61]]\n[1] 0.002131547 0.001252905 0.001210392\n\n[[62]]\n[1] 0.0022736286 0.0023639641 0.0025208956 0.0042537796 0.0007773996\n\n[[63]]\n[1] 0.001008918 0.005053451 0.002509349 0.001931811\n\n[[64]]\n[1] 0.0009408462 0.0009426671 0.0009945834 0.0012529046 0.0108592161\n\n[[65]]\n[1] 0.0018011331 0.0016522358 0.0010334178 0.0007880819 0.0099562188\n[6] 0.0093594811\n\n[[66]]\n[1] 0.0011785245 0.0011506607 0.0010664269 0.0008895808 0.0006979124\n[6] 0.0007773996 0.0064754571\n\n[[67]]\n[1] 0.0013111958 0.0011281918 0.0008908885 0.0007996429 0.0007225240\n\n[[68]]\n[1] 0.0013129618 0.0017617908 0.0008445359 0.0050534505\n\n[[69]]\n[1] 0.001320848 0.001537177 0.001260504 0.001449637 0.001575009 0.001346034\n[7] 0.001040416 0.009956219 0.012040582\n\n[[70]]\n[1] 0.0013254821 0.0008955000 0.0009414076 0.0012103921\n\n[[71]]\n[1] 0.002901933\n\n[[72]]\n[1] 0.001160634 0.002509349 0.006205971\n\n[[73]]\n[1] 0.002124330 0.002310335 0.002573408 0.005531089 0.005277973 0.002178883\n\n[[74]]\n[1] 0.0012931171 0.0011731257 0.0009843316 0.0064754571 0.0120405815\n\n[[75]]\n[1] 0.0011143468 0.0010553209 0.0008352345 0.0093594811\n\n[[76]]\n[1] 0.0008980288 0.0009042085 0.0108592161\n\n[[77]]\n[1] 0.0010664325 0.0011782214 0.0006908864 0.0019318111 0.0062059708\n```\n\n\n:::\n:::\n\n\n\n### 2.4.1.5 **Row-Standardized Weights Matrix**\n\nWe now need to assign weights to each neighboring polygon. We use equal weights (style=“W”), where each neighboring polygon is assigned a weight of 1 divided by the number of neighbors.\n\nThis means each neighboring county’s weight is calculated as 1/(# of neighbors), and these weights are then used to sum the weighted income values.\n\nWhile this method is intuitive for summarizing neighbors’ values, it has a drawback: polygons at the edges of the study area may rely on fewer neighbors, potentially skewing the spatial autocorrelation results.\n\n::: note-box\nNote: For simplicity, we’ll use the style=“W” option in this example, but be aware that more robust options, such as style=“B”, are available.\n:::\n\n::: panel-tabset\n\n## Profits \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_pro_all <- nb2listw(wm_q_pro_all, style=\"W\", zero.policy = TRUE)\nrswm_q_pro_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_tour <- nb2listw(wm_q_tour, style=\"W\", zero.policy = TRUE)\nrswm_q_tour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n70\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n\n## Occupancy\n\n::: panel-tabset\n\n## 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_2019 <- nb2listw(wm_q_2019, style=\"W\", zero.policy = TRUE)\nrswm_q_2019\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n\n## 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_2020 <- nb2listw(wm_q_2020, style=\"W\", zero.policy = TRUE)\nrswm_q_2020\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n\n## 2021\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_2021 <- nb2listw(wm_q_2021, style=\"W\", zero.policy = TRUE)\nrswm_q_2021\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n\n## 2022\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_2022 <- nb2listw(wm_q_2022, style=\"W\", zero.policy = TRUE)\nrswm_q_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\nSetting the argument `zero.policy` to TRUE allows for lists of non-neighbors. This should be used with caution as users may not be aware of missing neighbors in their data however setting `zero,policy` to FALSE would return an error.\n\n::: insights-box\nThe `nb2listw()` function requires an input of class `nb`, representing a neighborhood object. The function’s two key arguments are `style` and `zero.policy`.\n\n-   The `style` argument defines how the weights are calculated. It can take several values:\n\n    -   `\"B\"`: Binary coding, where weights are either 0 or 1.\n\n    -   `\"W\"`: Row-standardized, where the sum of weights across all neighbors equals 1.\n\n    -   `\"C\"`: Globally standardized, where the sum of weights across all neighbors equals the total number of neighbors.\n\n    -   `\"U\"`: A variation of `\"C\"`, where weights are normalized by the number of neighbors.\n\n    -   `\"S\"`: A variance-stabilizing scheme proposed by Tiefelsdorf et al. (1999), which adjusts weights based on the number of neighbors.\n\n-   The `zero.policy` argument, when set to `TRUE`, handles regions with no neighbors by assigning them a weight vector of zero length. This results in a spatial lag value of zero for regions without neighbors, which may or may not be a suitable assumption depending on the context. For such regions, the spatially lagged value is computed as the sum of the products of a zero vector with any numerical vector `x`, effectively setting the lagged value to zero for those regions.\n:::\n\nThe code chunk below is implemented to check the weights of the first polygons three neighbors type:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q_pro_all$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n```\n\n\n:::\n:::\n\n\n\n::: insights-box\nEach neighbor is assigned a 0.33 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.\n:::\n\nUsing the same method, we derive a row standardized distance weight matrix by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_ids_pro_all <- nb2listw(wm_q_pro_all, glist=ids_pro_all, style=\"B\", zero.policy=TRUE)\nrswm_ids_pro_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0         S1        S2\nB 76 5776 1.213098 0.01552322 0.1106777\n```\n\n\n:::\n:::\n\n\n\n### 2.4.1.6 Application of Spatial Weight Matrix\n\nWe now create four different spatial lagged variables:\n\n-   spatial lag with row-standardized weights\n\n-   spatial lag as a sum of neighbouring values\n\n-   spatial window average\n\n-   spatial window sum\n\n#### 2.4.1.6.1 Spatial Lag With Row-Standardized Weights\n\nWe now compute the average neighbor profit value for each polygon. We often refer to these values as Spatially Lagged Values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_all.lag <- lag.listw(rswm_q_pro_all, profit_all$total_value)\npro_all.lag\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  15248910000  71904305000  17782063583   5178840000  36013064000\n [6]  31745038750  32105155000  10405027500  12712836300  33305844000\n[11]  22020000000  35697183833   7173613333  16223873333  14814766000\n[16]  27425816000  67352080889 212310945000  45577798571  21752636667\n[21]   4584020000 270772546000  24977540000  20078698000   4460971667\n[26]  23296622300  44589101714  32263766667  17276292250  24668200588\n[31] 203675776000  86141040000  10075095000 163646976667 142613772500\n[36]  80010247500  57489828583  65740183333  10838346667 250877220000\n[41]  65822225000  77822444000   8713083333   6442295000 119772565000\n[46] 278672914286  50654714000            0  23475485375  15365575000\n[51]   9887916667  10243580400  46938295000  30342651667  28203860300\n[56]  18890338333   8793150750   6465472500  11795120000  77961440000\n[61] 333411596667 377157446940  27488695000   6144732000  47679541667\n[66] 322168826671  12065114000  25180272500  30452323556   6594607500\n[71]  83774300000   8448340000  84276121667   9224755340  43124960000\n[76]  59620853333  12093334000\n```\n\n\n:::\n:::\n\n\n\nWe can append the spatially lagged profit values onto our `profit_foreigners` sf data-frame by using the code chunk shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list_pro_all <- list(profit_all$province_eng, lag.listw(rswm_q_pro_all, profit_all$total_value))\nlag.res_pro_all <- as.data.frame(lag.list_pro_all)\ncolnames(lag.res_pro_all) <- c(\"province_eng\", \"lag Profit\")\nprofit_all <- left_join(profit_all,lag.res_pro_all)\n```\n:::\n\n\n\nWe now plot the actual profit and spatial lag profits side by side to facilitate comparison.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npro_all <- qtm(profit_all, \"total_value\")\nlag_pro_all <- qtm(profit_all, \"lag Profit\")\ntmap_arrange(pro_all, lag_pro_all, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n\nWe see a difference in the surrounding regions of Bangkok as well as Mae Hong Son, all of which are in a higher band as compared to the non-spatially lagged values.\n\n#### 2.4.1.6.2 Spatial Window Sum\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\nTo add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_qs_profit <- include.self(wm_q_pro_all)\nwm_qs_profit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 429 \nPercentage nonzero weights: 7.235622 \nAverage number of links: 5.571429 \n2 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n\n\nWe now assign binary weights to the neighbour structure that includes the diagonal element.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights <- lapply(wm_qs_profit, function(x) 0*x + 1)\nb_weights[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 1 1 1\n```\n\n\n:::\n:::\n\n\n\nNotice that now \\[1\\] has four neighbours instead of three.\n\nAgain, we use *nb2listw()* and *glist()* to explicitly assign weight values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_weights2 <- nb2listw(wm_qs_profit, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 429 \nPercentage nonzero weights: 7.235622 \nAverage number of links: 5.571429 \n2 disjoint connected subgraphs\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 77 5929 429 858 10572\n```\n\n\n:::\n:::\n\n\n\nWith our newly obtained weight structure, we can compute the lag variable with *lag.listw()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_profit <- list(profit_all$province_eng, lag.listw(b_weights2, profit_all$total_value))\nw_sum_profit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] \"Ang Thong\"                \"Bangkok\"                 \n [3] \"Chai Nat\"                 \"Kanchanaburi\"            \n [5] \"Lop Buri\"                 \"Nakhon Pathom\"           \n [7] \"Nonthaburi\"               \"Pathum Thani\"            \n [9] \"Phetchaburi\"              \"Phra Nakhon Si Ayutthaya\"\n[11] \"Prachuap Khiri Khan\"      \"Ratchaburi\"              \n[13] \"Samut Prakan\"             \"Samut Sakhon\"            \n[15] \"Samut Songkhram\"          \"Saraburi\"                \n[17] \"Sing Buri\"                \"Suphan Buri\"             \n[19] \"Chachoengsao\"             \"Chanthaburi\"             \n[21] \"Chon Buri\"                \"Nakhon Nayok\"            \n[23] \"Prachin Buri\"             \"Rayong\"                  \n[25] \"Sa Kaeo\"                  \"Trat\"                    \n[27] \"Amnat Charoen\"            \"Bueng Kan\"               \n[29] \"Buri Ram\"                 \"Chaiyaphum\"              \n[31] \"Kalasin\"                  \"Khon Kaen\"               \n[33] \"Loei\"                     \"Maha Sarakham\"           \n[35] \"Mukdahan\"                 \"Nakhon Phanom\"           \n[37] \"Nakhon Ratchasima\"        \"Nong Bua Lam Phu\"        \n[39] \"Nong Khai\"                \"Roi Et\"                  \n[41] \"Sakon Nakhon\"             \"Surin\"                   \n[43] \"Ubon Ratchathani\"         \"Udon Thani\"              \n[45] \"Yasothon\"                 \"Chiang Mai\"              \n[47] \"Chiang Rai\"               \"Kamphaeng Phet\"          \n[49] \"Lampang\"                  \"Lamphun\"                 \n[51] \"Mae Hong Son\"             \"Nakhon Sawan\"            \n[53] \"Nan\"                      \"Phayao\"                  \n[55] \"Phetchabun\"               \"Phichit\"                 \n[57] \"Phitsanulok\"              \"Phrae\"                   \n[59] \"Sukhothai\"                \"Tak\"                     \n[61] \"Uthai Thani\"              \"Uttaradit\"               \n[63] \"Chumphon\"                 \"Krabi\"                   \n[65] \"Nakhon Si Thammarat\"      \"Narathiwat\"              \n[67] \"Pattani\"                  \"Phangnga\"                \n[69] \"Phatthalung\"              \"Phuket\"                  \n[71] \"Ranong\"                   \"Satun\"                   \n[73] \"Si Sa Ket\"                \"Songkhla\"                \n[75] \"Surat Thani\"              \"Trang\"                   \n[77] \"Yala\"                    \n\n[[2]]\n [1] 4.830338e+10 2.134585e+12 1.101507e+11 9.340557e+10 1.946905e+11\n [6] 2.680883e+11 1.396260e+11 4.928399e+10 1.473385e+11 2.103152e+11\n[11] 1.772473e+11 1.171938e+11 3.554698e+10 1.016263e+11 8.539054e+10\n[16] 1.552375e+11 6.085889e+11 8.650487e+11 3.343474e+11 8.676681e+10\n[21] 5.111633e+11 2.183154e+12 6.231617e+10 1.664943e+11 4.162284e+10\n[26] 1.587393e+11 3.131988e+11 9.978200e+10 1.532802e+11 2.028048e+11\n[31] 1.021204e+12 2.996642e+11 3.231268e+10 4.936895e+11 5.789357e+11\n[36] 3.266903e+11 4.004009e+11 1.981167e+11 4.581352e+10 1.007159e+12\n[41] 2.702601e+11 5.519137e+11 4.284426e+10 5.251363e+10 7.204721e+11\n[46] 2.210756e+12 3.488313e+11 4.543780e+09 1.073239e+11 3.554191e+10\n[51] 4.403470e+10 6.355763e+10 1.030658e+11 1.870943e+11 1.634672e+11\n[56] 1.174073e+11 4.062376e+10 3.220251e+10 4.437412e+10 4.082087e+11\n[61] 1.004334e+12 1.891204e+12 1.249114e+11 1.965276e+11 3.199416e+11\n[66] 2.260363e+12 6.266470e+10 1.747477e+11 2.802401e+11 8.571596e+11\n[71] 9.147103e+10 4.840299e+10 5.105184e+11 1.584872e+11 3.283940e+11\n[76] 1.981167e+11 6.829842e+10\n```\n\n\n:::\n:::\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw_sum_profit.res <- as.data.frame(w_sum_profit)\ncolnames(w_sum_profit.res) <- c(\"province_eng\", \"w_sum Profit\")\n```\n:::\n\n\n\n::: note-box\nDo note that the second command line on the code chunk above renames the field names of *w_sum_profit.res* object into province_eng and *w_sum Profit* respectively.\n:::\n\nNext, the code chunk below will be used to append w_sum *Profit* values onto our profit sf data.frame by using left_join() of **dplyr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_all <- left_join(profit_all, w_sum_profit.res)\n```\n:::\n\n\n\nTo compare the values of lag Profit and Spatial window average, the `kable()` function of the Knitr package is used to prepare a table using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_all %>%\n  select(\"province_eng\", \"total_value\", \"w_sum Profit\") %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|province_eng             |  total_value| w_sum Profit|geometry                       |\n|:------------------------|------------:|------------:|:------------------------------|\n|Ang Thong                | 2.556650e+09| 4.830338e+10|MULTIPOLYGON (((100.3332 14... |\n|Bangkok                  | 1.846967e+12| 2.134585e+12|MULTIPOLYGON (((100.6139 13... |\n|Chai Nat                 | 3.458300e+09| 1.101507e+11|MULTIPOLYGON (((100.1199 15... |\n|Kanchanaburi             | 7.786905e+10| 9.340557e+10|MULTIPOLYGON (((98.58631 15... |\n|Lop Buri                 | 1.462523e+10| 1.946905e+11|MULTIPOLYGON (((101.3453 15... |\n|Nakhon Pathom            | 1.412800e+10| 2.680883e+11|MULTIPOLYGON (((100.2231 14... |\n|Nonthaburi               | 1.120537e+10| 1.396260e+11|MULTIPOLYGON (((100.3415 14... |\n|Pathum Thani             | 7.663878e+09| 4.928399e+10|MULTIPOLYGON (((100.8916 14... |\n|Phetchaburi              | 8.377430e+10| 1.473385e+11|MULTIPOLYGON (((99.75869 13... |\n|Phra Nakhon Si Ayutthaya | 4.378594e+10| 2.103152e+11|MULTIPOLYGON (((100.5131 14... |\n|Prachuap Khiri Khan      | 1.111873e+11| 1.772473e+11|MULTIPOLYGON (((99.56326 11... |\n|Ratchaburi               | 1.010229e+10| 1.171938e+11|MULTIPOLYGON (((99.8821 13.... |\n|Samut Prakan             | 1.402614e+10| 3.554698e+10|MULTIPOLYGON (((100.7306 13... |\n|Samut Sakhon             | 4.283070e+09| 1.016263e+11|MULTIPOLYGON (((100.3091 13... |\n|Samut Songkhram          | 1.131671e+10| 8.539054e+10|MULTIPOLYGON (((100.0116 13... |\n|Saraburi                 | 1.810841e+10| 1.552375e+11|MULTIPOLYGON (((101.3994 15... |\n|Sing Buri                | 2.420130e+09| 6.085889e+11|MULTIPOLYGON (((100.3691 15... |\n|Suphan Buri              | 1.580496e+10| 8.650487e+11|MULTIPOLYGON (((99.37118 15... |\n|Chachoengsao             | 1.530283e+10| 3.343474e+11|MULTIPOLYGON (((101.0612 13... |\n|Chanthaburi              | 2.150890e+10| 8.676681e+10|MULTIPOLYGON (((102.2517 12... |\n|Chon Buri                | 4.836592e+11| 5.111633e+11|MULTIPOLYGON (((100.9719 12... |\n|Nakhon Nayok             | 1.697358e+10| 2.183154e+12|MULTIPOLYGON (((101.2827 14... |\n|Prachin Buri             | 1.236109e+10| 6.231617e+10|MULTIPOLYGON (((101.4881 14... |\n|Rayong                   | 6.610082e+10| 1.664943e+11|MULTIPOLYGON (((101.4421 12... |\n|Sa Kaeo                  | 1.485701e+10| 4.162284e+10|MULTIPOLYGON (((102.1877 14... |\n|Trat                     | 4.225621e+10| 1.587393e+11|MULTIPOLYGON (((102.5216 11... |\n|Amnat Charoen            | 1.075100e+09| 3.131988e+11|MULTIPOLYGON (((104.9598 16... |\n|Bueng Kan                | 2.990700e+09| 9.978200e+10|MULTIPOLYGON (((103.405 18.... |\n|Buri Ram                 | 1.506982e+10| 1.532802e+11|MULTIPOLYGON (((102.9303 15... |\n|Chaiyaphum               | 5.459210e+09| 2.028048e+11|MULTIPOLYGON (((101.5603 16... |\n|Kalasin                  | 2.825040e+09| 1.021204e+12|MULTIPOLYGON (((103.584 17.... |\n|Khon Kaen                | 4.124104e+10| 2.996642e+11|MULTIPOLYGON (((102.7072 17... |\n|Loei                     | 1.216249e+10| 3.231268e+10|MULTIPOLYGON (((102.095 18.... |\n|Maha Sarakham            | 2.748530e+09| 4.936895e+11|MULTIPOLYGON (((103.1562 16... |\n|Mukdahan                 | 8.480580e+09| 5.789357e+11|MULTIPOLYGON (((104.2527 16... |\n|Nakhon Phanom            | 6.649310e+09| 3.266903e+11|MULTIPOLYGON (((104.192 18.... |\n|Nakhon Ratchasima        | 5.546189e+10| 4.004009e+11|MULTIPOLYGON (((102.3144 15... |\n|Nong Bua Lam Phu         | 8.961000e+08| 1.981167e+11|MULTIPOLYGON (((102.2866 17... |\n|Nong Khai                | 1.329848e+10| 4.581352e+10|MULTIPOLYGON (((103.2985 18... |\n|Roi Et                   | 3.649690e+09| 1.007159e+12|MULTIPOLYGON (((104.314 16.... |\n|Sakon Nakhon             | 6.971230e+09| 2.702601e+11|MULTIPOLYGON (((103.5404 18... |\n|Surin                    | 7.156580e+09| 5.519137e+11|MULTIPOLYGON (((103.1336 15... |\n|Ubon Ratchathani         | 1.670501e+10| 4.284426e+10|MULTIPOLYGON (((105.0633 16... |\n|Udon Thani               | 2.674445e+10| 5.251363e+10|MULTIPOLYGON (((102.0581 18... |\n|Yasothon                 | 1.836680e+09| 7.204721e+11|MULTIPOLYGON (((104.3952 16... |\n|Chiang Mai               | 2.600457e+11| 2.210756e+12|MULTIPOLYGON (((99.52512 20... |\n|Chiang Rai               | 9.555777e+10| 3.488313e+11|MULTIPOLYGON (((99.96093 20... |\n|Kamphaeng Phet           | 4.543780e+09| 4.543780e+09|MULTIPOLYGON (((99.48875 16... |\n|Lampang                  | 1.342195e+10| 1.073239e+11|MULTIPOLYGON (((99.58445 19... |\n|Lamphun                  | 4.810760e+09| 3.554191e+10|MULTIPOLYGON (((99.18821 18... |\n|Mae Hong Son             | 1.437095e+10| 4.403470e+10|MULTIPOLYGON (((98.0591 19.... |\n|Nakhon Sawan             | 1.233973e+10| 6.355763e+10|MULTIPOLYGON (((100.0266 16... |\n|Nan                      | 9.189250e+09| 1.030658e+11|MULTIPOLYGON (((100.8948 19... |\n|Phayao                   | 5.038420e+09| 1.870943e+11|MULTIPOLYGON (((100.4195 19... |\n|Phetchabun               | 2.244791e+10| 1.634672e+11|MULTIPOLYGON (((101.3987 17... |\n|Phichit                  | 4.065240e+09| 1.174073e+11|MULTIPOLYGON (((100.2165 16... |\n|Phitsanulok              | 2.303746e+10| 4.062376e+10|MULTIPOLYGON (((101.0033 17... |\n|Phrae                    | 6.340620e+09| 3.220251e+10|MULTIPOLYGON (((100.1597 18... |\n|Sukhothai                | 8.988760e+09| 4.437412e+10|MULTIPOLYGON (((99.60051 17... |\n|Tak                      | 1.840145e+10| 4.082087e+11|MULTIPOLYGON (((97.97318 17... |\n|Uthai Thani              | 4.098740e+09| 1.004334e+12|MULTIPOLYGON (((99.13905 15... |\n|Uttaradit                | 5.416300e+09| 1.891204e+12|MULTIPOLYGON (((101.0924 18... |\n|Chumphon                 | 1.495662e+10| 1.249114e+11|MULTIPOLYGON (((99.19067 10... |\n|Krabi                    | 1.658040e+11| 1.965276e+11|MULTIPOLYGON (((99.11329 7.... |\n|Nakhon Si Thammarat      | 3.386435e+10| 3.199416e+11|MULTIPOLYGON (((99.77467 9.... |\n|Narathiwat               | 5.181640e+09| 2.260363e+12|MULTIPOLYGON (((101.6323 6.... |\n|Pattani                  | 2.339130e+09| 6.266470e+10|MULTIPOLYGON (((101.2827 6.... |\n|Phangnga                 | 7.402664e+10| 1.747477e+11|MULTIPOLYGON (((98.61471 7.... |\n|Phatthalung              | 6.169140e+09| 2.802401e+11|MULTIPOLYGON (((99.96416 7.... |\n|Phuket                   | 8.307811e+11| 8.571596e+11|MULTIPOLYGON (((98.31437 7.... |\n|Ranong                   | 7.696730e+09| 9.147103e+10|MULTIPOLYGON (((98.35294 9.... |\n|Satun                    | 2.305797e+10| 4.840299e+10|MULTIPOLYGON (((100.0903 6.... |\n|Si Sa Ket                | 4.861620e+09| 5.105184e+11|MULTIPOLYGON (((104.1052 15... |\n|Songkhla                 | 1.123635e+11| 1.584872e+11|MULTIPOLYGON (((100.5973 7.... |\n|Surat Thani              | 1.558941e+11| 3.283940e+11|MULTIPOLYGON (((99.96396 9.... |\n|Trang                    | 1.925409e+10| 1.981167e+11|MULTIPOLYGON (((99.47579 6.... |\n|Yala                     | 7.831750e+09| 6.829842e+10|MULTIPOLYGON (((101.2927 6.... |\n\n\n:::\n:::\n\n\n\nWe now plot the actual profit and w_sum_profit maps next to each other using the qtm() function of the tmap package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the first map for 'total_value' using Jenks classification\nprofit_map <- tm_shape(profit_all) +\n              tm_polygons(\"total_value\", style = \"jenks\", palette = \"Blues\", title = \"Total Value\") +\n              tm_layout(legend.outside = TRUE)\n\n# Create the second map for 'w_sum Profit' using Jenks classification\nw_sum_profit_map <- tm_shape(profit_all) +\n                    tm_polygons(\"w_sum Profit\", style = \"jenks\", palette = \"Reds\", title = \"W Sum Profit\") +\n                    tm_layout(legend.outside = TRUE)\ntmap_arrange(profit_map, w_sum_profit_map, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n\n## 2.4.2 Global Measures of Spatial Autocorrelation\n\n::: panel-tabset\n### 2.4.2.1 Moran's I test\n\nWe now conduct Moran’s I statistics testing by using the **moran.test()** function of the **spdep** package.\n\n::: note-box\nStatistical tests are conducted at a 5% significance level.\n:::\n\nThe hypotheses for the test are as follows:\n\n-   H0: Regions with similar levels of profit from tourism are randomly distributed.\n\n-   H1: Regions with similar levels of profit from tourism are not randomly distributed and exhibit spatial clustering.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(profit_all$total_value, \n           listw=rswm_q_pro_all, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  profit_all$total_value  \nweights: rswm_q_pro_all  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 0.065612, p-value = 0.4738\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.010147395      -0.013333333       0.002357817 \n```\n\n\n:::\n:::\n\n\n\nWe now implement the Moran's Test for **Occupancy Rate** across the 4 years of our data.\n\n## Number of Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(tourist_all$total_value, \n           listw=rswm_q_tour, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  tourist_all$total_value  \nweights: rswm_q_tour  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 0.24853, p-value = 0.4019\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.001276884      -0.013333333       0.002353354 \n```\n\n\n:::\n:::\n\n\n\n## Occupancy Rate\n\n::: panel-tabset\n\n## 2019\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(occupancy_2019_avg$avg_occupancy, \n           listw=rswm_q_2019, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  occupancy_2019_avg$avg_occupancy  \nweights: rswm_q_2019  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 1.078, p-value = 0.1405\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.069367921      -0.013333333       0.005885618 \n```\n\n\n:::\n:::\n\n\n\n## 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(occupancy_2020_avg$avg_occupancy, \n           listw=rswm_q_2020, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  occupancy_2020_avg$avg_occupancy  \nweights: rswm_q_2020  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 4.9018, p-value = 4.748e-07\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.365225001      -0.013333333       0.005964181 \n```\n\n\n:::\n:::\n\n\n\n## 2021\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(occupancy_2021_avg$avg_occupancy, \n           listw=rswm_q_2021, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  occupancy_2021_avg$avg_occupancy  \nweights: rswm_q_2021  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 3.5428, p-value = 0.000198\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.259295540      -0.013333333       0.005921797 \n```\n\n\n:::\n:::\n\n\n\n## 2022\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(occupancy_2022_avg$avg_occupancy, \n           listw=rswm_q_2022, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  occupancy_2022_avg$avg_occupancy  \nweights: rswm_q_2022  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 3.0146, p-value = 0.001287\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.218650983      -0.013333333       0.005921784 \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\nFrom the output above, we can infer the following:\n\n-   The p-value 0.7224\\>0.05, indicating that the observed spatial autocorrelation is not statistically significant.\n\n-   Moran’s I statistic: The observed value of -0.037 indicates **no spatial autocorrelation**, meaning that regions with similar levels of profit from tourism are randomly distributed.\n\nThere isn't sufficient evidence to reject H0 and we conclude that there is no spatial clustering with regards to profits from tourism in Thailand.\n\n::: note-box\nIf Morans I Statistic is = 0, there is Complete Random Spatial Distribution.\n:::\n\n#### 2.4.2.1.1 Monte Carlo Moran's I\n\nWe now implement the moran.mc() function of the spdep package. In this scenario, we will run 1000 simulations.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm= moran.mc(profit_all$total_value, \n           listw=rswm_q_pro_all, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  profit_all$total_value \nweights: rswm_q_pro_all  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.010147, observed rank = 697, p-value = 0.303\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm= moran.mc(tourist_all$total_value, \n           listw=rswm_q_tour, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  tourist_all$total_value \nweights: rswm_q_tour  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0012769, observed rank = 655, p-value = 0.345\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## Occupancy \n\n::: panel-tabset\n\n## 2019\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm= moran.mc(occupancy_2019_avg$avg_occupancy, \n           listw=rswm_q_pro_all, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  occupancy_2019_avg$avg_occupancy \nweights: rswm_q_pro_all  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.065701, observed rank = 856, p-value = 0.144\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2020= moran.mc(occupancy_2020_avg$avg_occupancy, \n           listw=rswm_q_2020, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm2020\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  occupancy_2020_avg$avg_occupancy \nweights: rswm_q_2020  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.36523, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## 2021\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2021= moran.mc(occupancy_2021_avg$avg_occupancy, \n           listw=rswm_q_2021, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm2021\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  occupancy_2021_avg$avg_occupancy \nweights: rswm_q_2021  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.2593, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## 2022\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2022= moran.mc(occupancy_2022_avg$avg_occupancy, \n           listw=rswm_q_2022, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  occupancy_2019_avg$avg_occupancy \nweights: rswm_q_pro_all  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.065701, observed rank = 856, p-value = 0.144\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n::: insights-box\nFrom the above output, notice that the observed rank is 326. This indicates that the observed Moran's I value of -0.037893 is not 'unusual' compared to the distribution that was generated by the simulations run. This further supports the high p-value and reinforces our earlier conclusion that there is no significant spatial autocorrelation in the data.\n:::\n\nWe visualize the test statistics obtained from the above simulation by implementing the below code chunk.\n\n::: panel-tabset\n## Summary Statistics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mean\nmean(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01371676\n```\n\n\n:::\n\n```{.r .cell-code}\n# Variance\nvar(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.005616186\n```\n\n\n:::\n\n```{.r .cell-code}\n# Summary\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.22415 -0.06916 -0.01685 -0.01372  0.03682  0.23088 \n```\n\n\n:::\n:::\n\n\n\n## The plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-94-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 2.4.2.2 Geary's C\n\nWe now implement a further test to verify if our findings from the above test are indeed correct.\n\nThe Geary’s C test for spatial autocorrelation is implemented by using the **geary.test()** function of the **spdep** package.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(profit_all$total_value, listw=rswm_q_pro_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  profit_all$total_value \nweights: rswm_q_pro_all  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 0.89723, p-value = 0.1848\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.85789622        1.00000000        0.02508438 \n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(tourist_all$total_value, listw=rswm_q_tour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  tourist_all$total_value \nweights: rswm_q_tour  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -0.86246, p-value = 0.8058\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.13666038        1.00000000        0.02510762 \n```\n\n\n:::\n:::\n\n\n\n## Occupancy Rate\n\n::: panel-tabset\n\n## 2019\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(occupancy_2019_avg$avg_occupancy, listw=rswm_q_2019)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  occupancy_2019_avg$avg_occupancy \nweights: rswm_q_2019  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 1.3731, p-value = 0.08486\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.887473023       1.000000000       0.006715942 \n```\n\n\n:::\n:::\n\n\n\n\n## 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(occupancy_2020_avg$avg_occupancy, listw=rswm_q_2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  occupancy_2020_avg$avg_occupancy \nweights: rswm_q_2020  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 4.977, p-value = 3.228e-07\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.604743349       1.000000000       0.006306885 \n```\n\n\n:::\n:::\n\n\n\n## 2021\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(occupancy_2021_avg$avg_occupancy, listw=rswm_q_2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  occupancy_2021_avg$avg_occupancy \nweights: rswm_q_2021  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 3.5783, p-value = 0.0001729\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.710899976       1.000000000       0.006527571 \n```\n\n\n:::\n:::\n\n\n\n## 2022\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(occupancy_2022_avg$avg_occupancy, listw=rswm_q_2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  occupancy_2022_avg$avg_occupancy \nweights: rswm_q_2022  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 3.5359, p-value = 0.0002032\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.714319646       1.000000000       0.006527638 \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\nWe once again see that the p-value (0.8784) is greater than 0.05. We do not have sufficient evidence to reject the null hypothesis. In fact, from the Geary C statistic value, we infer that there is actually **negative** spatial autocorrelation.\n\n#### 2.4.2.2.1 Monte Carlo Geary's C\n\nWe implement the the geary.mc() function of the spdep package to conduct 1000 simulations.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm=geary.mc(profit_all$total_value, listw=rswm_q_pro_all, \n               nsim=999)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  profit_all$total_value \nweights: rswm_q_pro_all  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.8579, observed rank = 168, p-value = 0.168\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\nThe simulations above reinforce our earlier conclusion.\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm_tour=geary.mc(tourist_all$total_value, listw=rswm_q_tour, \n               nsim=999)\nbperm_tour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  tourist_all$total_value \nweights: rswm_q_tour  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.1367, observed rank = 837, p-value = 0.837\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## Occupancy Rate\n\n::: panel-tabset\n\n## 2019\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2019_geary=geary.mc(occupancy_2019_avg$avg_occupancy, listw=rswm_q_2019, \n               nsim=999)\nbperm2019_geary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  occupancy_2019_avg$avg_occupancy \nweights: rswm_q_2019  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.88747, observed rank = 120, p-value = 0.12\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2020_geary=geary.mc(occupancy_2020_avg$avg_occupancy, listw=rswm_q_2020, \n               nsim=999)\nbperm2020_geary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  occupancy_2020_avg$avg_occupancy \nweights: rswm_q_2020  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.60474, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n\n## 2021\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2021_geary=geary.mc(occupancy_2021_avg$avg_occupancy, listw=rswm_q_2021, \n               nsim=999)\nbperm2021_geary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  occupancy_2021_avg$avg_occupancy \nweights: rswm_q_2021  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.7109, observed rank = 2, p-value = 0.002\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n## 2022\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2022_geary=geary.mc(occupancy_2022_avg$avg_occupancy, listw=rswm_q_2022, \n               nsim=999)\nbperm2022_geary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  occupancy_2022_avg$avg_occupancy \nweights: rswm_q_2022  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.71432, observed rank = 3, p-value = 0.003\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n### 2.4.2.3 Spatial Correlogram\n\nSpatial correlograms are a powerful tool for analyzing patterns of spatial autocorrelation in your data or model residuals. They illustrate how the correlation between pairs of spatial observations changes as the distance (or lag) between them increases. Essentially, they plot an index of autocorrelation, such as Moran’s I or Geary’s C, against distance.\n\nWhile correlograms are not as central to geostatistics as variograms—an essential concept in that field—they offer valuable insights as an exploratory and descriptive tool. In fact, for examining spatial autocorrelation, correlograms often provide more detailed information than variograms, making them particularly useful for initial spatial data analysis.\n\n::: panel-tabset\n## Moran's I Correlogram\n\nWe implement the sp.correlogram() function of the spdep package to compute a 6-lag spatial correlogram of profit from tourism in Thailand. The global spatial autocorrelation used in Moran’s I.\n\nThe **plot()** of base Graph is then used to plot the output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_corr <- sp.correlogram(wm_q_pro_all, \n                          profit_all$total_value, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\", zero.policy = TRUE)\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-107-1.png){width=672}\n:::\n:::\n\n\n\nThe plot above may not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for profit_all$total_value \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided\n1 (76) -0.0101474  -0.0133333  0.0023578           0.0656          0.9477\n2 (76) -0.0176961  -0.0133333  0.0014567          -0.1143          0.9090\n3 (76) -0.0191112  -0.0133333  0.0011568          -0.1699          0.8651\n4 (76) -0.0304960  -0.0133333  0.0012360          -0.4882          0.6254\n5 (76) -0.0175200  -0.0133333  0.0013957          -0.1121          0.9108\n6 (76) -0.0254808  -0.0133333  0.0020155          -0.2706          0.7867\n```\n\n\n:::\n:::\n\n\n\nFrom above, we can conclude that there is NO spatial autocorrelation.\n\n## Geary's C Correlogram\n\nWe implement the `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of total_value, profit. The global spatial autocorrelation used in Geary’s C. The **plot()** of base Graph is then used to plot the output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGC_corr <- sp.correlogram(wm_q_pro_all, \n                          profit_all$total_value, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\", zero.policy = TRUE)\nplot(GC_corr)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-109-1.png){width=672}\n:::\n:::\n\n\n\nSimilar to the step done for Moran's I, we will print out the analysis report by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(GC_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for profit_all$total_value \nmethod: Geary's C\n       estimate expectation variance standard deviate Pr(I) two sided\n1 (76) 0.857896    1.000000 0.025084          -0.8972          0.3696\n2 (76) 0.943719    1.000000 0.021602          -0.3829          0.7018\n3 (76) 1.010709    1.000000 0.022887           0.0708          0.9436\n4 (76) 1.082440    1.000000 0.037279           0.4270          0.6694\n5 (76) 0.884287    1.000000 0.079390          -0.4107          0.6813\n6 (76) 0.711056    1.000000 0.161791          -0.7183          0.4725\n```\n\n\n:::\n:::\n\n\n\nIndeed, our findings are reinforced.\n:::\n:::\n\n::: insights-box\nGenerally, using one of the Geary or Moran Test is enough in terms of deriving insights. However, we apply both in our case to have more evidence to support our claims of the spatial clustering exhibited in certain aspects, and the lack thereof in certain aspects.\n:::\n\n## 2.4.3 Local Indicators of Spatial Association\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of profits from tourism across Thailand, local clusters in profit mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\n\n### 2.4.3.1 Computing Local Moran's I\n\nWe implement the localmoran() function of spdep compute the local Moran’s I statistic. This function helps us compute li values, given a set of zi values and a listw object providing neighbor weighting information for the polygon associated with the zi values.\n\nWe compute Local Moran's I for Profits from Tourism at the County Level\n\n::: panel-tabset\n\n## Profits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(profit_all$province_eng)\nlocalMI <- localmoran(profit_all$total_value, rswm_q_pro_all)\nhead(localMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii       Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.06181623 -1.012111e-03 0.0252591992  0.3953173      0.6926088\n2  0.15435147 -7.673501e-01 3.2991219598  0.5074475      0.6118408\n3  0.05798144 -9.840716e-04 0.0117753912  0.5433884      0.5868624\n4 -0.01218856 -2.760711e-05 0.0006896679 -0.4630711      0.6433134\n5  0.03017796 -6.694470e-04 0.0097531108  0.3123540      0.7547715\n6  0.03463324 -6.821710e-04 0.0059490181  0.4578695      0.6470462\n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips_tour <- order(tourist_all$province_eng)\nlocalMI_tour <- localmoran(tourist_all$total_value, rswm_q_tour)\nhead(localMI_tour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.0380628637 -2.521443e-03 4.647878e-02 -0.16485701   0.8690565295\n2 -1.0645919900 -7.791818e-01 2.060867e+00 -0.19881290   0.8424091066\n3  0.1155194004 -2.384943e-03 4.396864e-02  0.56228734   0.5739202607\n4 -0.2075133865 -2.174592e-02 3.101325e-01 -0.33357695   0.7386988143\n5  0.0002423068 -9.920520e-06 8.657221e-05  0.02710833   0.9783733287\n6  0.0015776720 -1.971715e-08 1.995375e-07  3.53191182   0.0004125669\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: insights-box\n*localmoran()* function returns a matrix of values whose columns are:\n\n-   Ii: the local Moran’s I statistics\n\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n\n-   Z.Ii:the standard deviate of local moran statistic\n\n-   Pr(): the p-value of local moran statistic\n:::\n\nWe now use the printCoefmat() to display the content of the local Moran matrix that we created.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=profit_all$province_eng[fips]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                  Ii        E.Ii      Var.Ii        Z.Ii\nAmnat Charoen             2.7517e-02 -1.0590e-03  1.0706e-02  2.7618e-01\nAng Thong                 6.1816e-02 -1.0121e-03  2.5259e-02  3.9532e-01\nBangkok                   1.5435e-01 -7.6735e-01  3.2991e+00  5.0745e-01\nBueng Kan                 4.1289e-02 -9.9856e-04  2.4921e-02  2.6787e-01\nBuri Ram                  4.7904e-02 -6.5817e-04  5.7399e-03  6.4098e-01\nChachoengsao              2.0651e-02 -6.5230e-04  6.5970e-03  2.6229e-01\nChai Nat                  5.7981e-02 -9.8407e-04  1.1775e-02  5.4339e-01\nChaiyaphum                4.8334e-02 -9.2325e-04  8.0495e-03  5.4902e-01\nChanthaburi               3.8221e-02 -5.0560e-04  1.2625e-02  3.4466e-01\nChiang Mai                7.5088e-01 -9.0097e-03  9.0357e-02  2.5279e+00\nChiang Rai               -8.6369e-03 -1.9489e-04  2.8407e-03 -1.5839e-01\nChon Buri                -4.8006e-01 -4.2017e-02  4.8212e-01 -6.3087e-01\nChumphon                  3.8186e-02 -6.6103e-04  1.2208e-02  3.5159e-01\nKalasin                  -1.6174e-01 -1.0037e-03  1.4618e-02 -1.3295e+00\nKamphaeng Phet            0.0000e+00  0.0000e+00  0.0000e+00         NaN\nKanchanaburi             -1.2189e-02 -2.7607e-05  6.8967e-04 -4.6307e-01\nKhon Kaen                -9.0533e-03 -1.6317e-04  4.0756e-03 -1.3926e-01\nKrabi                    -1.1084e-01 -2.3556e-03  3.4261e-02 -5.8607e-01\nLampang                   4.3281e-02 -7.0044e-04  1.2935e-02  3.8671e-01\nLamphun                   5.9526e-02 -9.4275e-04  3.5778e-02  3.1969e-01\nLoei                      5.7872e-02 -7.3364e-04  2.7848e-02  3.5119e-01\nLop Buri                  3.0178e-02 -6.6945e-04  9.7531e-03  3.1235e-01\nMae Hong Son              5.5731e-02 -6.7594e-04  1.6875e-02  4.3422e-01\nMaha Sarakham            -1.1444e-01 -1.0061e-03  2.5110e-02 -7.1586e-01\nMukdahan                 -8.1527e-02 -8.3509e-04  1.5420e-02 -6.4982e-01\nNakhon Nayok             -1.8823e-01 -6.1097e-04  5.3285e-03 -2.5702e+00\nNakhon Pathom             3.4633e-02 -6.8217e-04  5.9490e-03  4.5787e-01\nNakhon Phanom            -1.4286e-02 -8.8800e-04  1.6396e-02 -1.0464e-01\nNakhon Ratchasima         2.0960e-03 -3.3343e-05  3.9936e-04  1.0655e-01\nNakhon Sawan              5.7515e-02 -7.2892e-04  1.0619e-02  5.6521e-01\nNakhon Si Thammarat       1.1975e-02 -2.6910e-04  3.2224e-03  2.1568e-01\nNan                       2.1631e-02 -8.1506e-04  3.0936e-02  1.2762e-01\nNarathiwat               -2.9111e-01 -9.3157e-04  9.4188e-03 -2.9899e+00\nNong Bua Lam Phu          1.7743e-03 -1.0648e-03  2.6572e-02  1.7416e-02\nNong Khai                 5.5920e-02 -7.0367e-04  1.7567e-02  4.2722e-01\nNonthaburi                3.6169e-02 -7.5938e-04  1.4023e-02  3.1185e-01\nPathum Thani              6.2241e-02 -8.5849e-04  1.5851e-02  5.0118e-01\nPattani                   6.5826e-02 -1.0189e-03  1.4840e-02  5.4873e-01\nPhangnga                 -5.2853e-03 -1.1310e-05  2.0901e-04 -3.6480e-01\nPhatthalung               4.1280e-02 -9.0214e-04  6.8888e-03  5.0823e-01\nPhayao                    4.2170e-02 -9.3588e-04  1.1199e-02  4.0733e-01\nPhetchabun                3.2121e-02 -4.8503e-04  7.0677e-03  3.8784e-01\nPhetchaburi              -1.6631e-02 -6.6598e-05  9.7084e-04 -5.3162e-01\nPhichit                   5.6141e-02 -9.6542e-04  1.1552e-02  5.3131e-01\nPhitsanulok               4.7478e-02 -4.7233e-04  1.7934e-02  3.5805e-01\nPhra Nakhon Si Ayutthaya  1.4604e-02 -1.3274e-04  1.9348e-03  3.3503e-01\nPhrae                     6.8038e-02 -8.9708e-04  1.6563e-02  5.3564e-01\nPhuket                   -8.5193e-01 -1.4125e-01  2.2416e+00 -4.7468e-01\nPrachin Buri              4.2618e-02 -7.2836e-04  2.7648e-02  2.6069e-01\nPrachuap Khiri Khan      -3.6589e-02 -4.6886e-04  1.1708e-02 -3.3382e-01\nRanong                   -1.8162e-02 -8.5754e-04  6.5974e-02 -6.7372e-02\nRatchaburi                3.3106e-02 -7.8960e-04  1.9710e-02  2.4144e-01\nRayong                    9.4808e-04 -2.8939e-07  4.2189e-06  4.6172e-01\nRoi Et                   -2.1489e-01 -9.7817e-04  1.8059e-02 -1.5918e+00\nSa Kaeo                   6.0448e-02 -6.6356e-04  7.9427e-03  6.8571e-01\nSakon Nakhon              1.5207e-03 -8.7858e-04  1.6222e-02  1.8838e-02\nSamut Prakan              5.8752e-02 -6.8479e-04  1.7096e-02  4.5458e-01\nSamut Sakhon              5.9036e-02 -9.5877e-04  1.1473e-02  5.6011e-01\nSamut Songkhram           5.3885e-02 -7.5637e-04  1.1018e-02  5.2055e-01\nSaraburi                  3.5939e-02 -5.8367e-04  8.5042e-03  3.9604e-01\nSatun                     4.7736e-02 -4.7190e-04  1.1783e-02  4.4410e-01\nSi Sa Ket                -1.9604e-02 -9.4121e-04  1.1263e-02 -1.7585e-01\nSing Buri                -1.8877e-04 -1.0164e-03  7.7603e-03  9.3949e-03\nSongkhla                 -4.8208e-02 -4.9426e-04  7.2021e-03 -5.6223e-01\nSukhothai                 5.9366e-02 -8.2070e-04  2.0486e-02  4.2050e-01\nSuphan Buri              -1.3730e-01 -6.3974e-04  1.1815e-02 -1.2573e+00\nSurat Thani              -3.9306e-02 -1.9060e-03  3.5155e-02 -1.9947e-01\nSurin                    -1.1748e-02 -8.7318e-04  8.8289e-03 -1.1574e-01\nTak                      -9.6728e-03 -5.7672e-04  8.4030e-03 -9.9228e-02\nTrang                     6.6840e-03 -5.5674e-04  1.3901e-02  6.1413e-02\nTrat                      2.0154e-02 -1.5065e-04  2.1960e-03  4.3330e-01\nUbon Ratchathani          5.4361e-02 -6.1752e-04  1.5418e-02  4.4277e-01\nUdon Thani                4.5242e-02 -3.9636e-04  7.3218e-03  5.3337e-01\nUthai Thani              -3.0925e-01 -9.6439e-04  2.4069e-02 -1.9871e+00\nUttaradit                -3.5255e-01 -9.2454e-04  1.3466e-02 -3.0301e+00\nYala                      6.0220e-02 -8.5365e-04  1.2435e-02  5.4770e-01\nYasothon                 -6.3268e-02 -1.0348e-03  1.2382e-02 -5.5928e-01\n                         Pr.z....E.Ii..\nAmnat Charoen                    0.7824\nAng Thong                        0.6926\nBangkok                          0.6118\nBueng Kan                        0.7888\nBuri Ram                         0.5215\nChachoengsao                     0.7931\nChai Nat                         0.5869\nChaiyaphum                       0.5830\nChanthaburi                      0.7303\nChiang Mai                       0.0115\nChiang Rai                       0.8741\nChon Buri                        0.5281\nChumphon                         0.7251\nKalasin                          0.1837\nKamphaeng Phet                      NaN\nKanchanaburi                     0.6433\nKhon Kaen                        0.8892\nKrabi                            0.5578\nLampang                          0.6990\nLamphun                          0.7492\nLoei                             0.7254\nLop Buri                         0.7548\nMae Hong Son                     0.6641\nMaha Sarakham                    0.4741\nMukdahan                         0.5158\nNakhon Nayok                     0.0102\nNakhon Pathom                    0.6470\nNakhon Phanom                    0.9167\nNakhon Ratchasima                0.9151\nNakhon Sawan                     0.5719\nNakhon Si Thammarat              0.8292\nNan                              0.8985\nNarathiwat                       0.0028\nNong Bua Lam Phu                 0.9861\nNong Khai                        0.6692\nNonthaburi                       0.7552\nPathum Thani                     0.6162\nPattani                          0.5832\nPhangnga                         0.7153\nPhatthalung                      0.6113\nPhayao                           0.6838\nPhetchabun                       0.6981\nPhetchaburi                      0.5950\nPhichit                          0.5952\nPhitsanulok                      0.7203\nPhra Nakhon Si Ayutthaya         0.7376\nPhrae                            0.5922\nPhuket                           0.6350\nPrachin Buri                     0.7943\nPrachuap Khiri Khan              0.7385\nRanong                           0.9463\nRatchaburi                       0.8092\nRayong                           0.6443\nRoi Et                           0.1114\nSa Kaeo                          0.4929\nSakon Nakhon                     0.9850\nSamut Prakan                     0.6494\nSamut Sakhon                     0.5754\nSamut Songkhram                  0.6027\nSaraburi                         0.6921\nSatun                            0.6570\nSi Sa Ket                        0.8604\nSing Buri                        0.9925\nSongkhla                         0.5740\nSukhothai                        0.6741\nSuphan Buri                      0.2087\nSurat Thani                      0.8419\nSurin                            0.9079\nTak                              0.9210\nTrang                            0.9510\nTrat                             0.6648\nUbon Ratchathani                 0.6579\nUdon Thani                       0.5938\nUthai Thani                      0.0469\nUttaradit                        0.0024\nYala                             0.5839\nYasothon                         0.5760\n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI_tour[fips_tour,], \n  row.names=tourist_all$province_eng[fips_tour]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                  Ii        E.Ii      Var.Ii        Z.Ii\nAmnat Charoen             1.4440e-01 -3.5167e-03  8.7545e-02  4.9991e-01\nAng Thong                -3.8063e-02 -2.5214e-03  4.6479e-02 -1.6486e-01\nBangkok                  -1.0646e+00 -7.7918e-01  2.0609e+00 -1.9881e-01\nBueng Kan                 1.2282e-01 -2.7246e-03  6.7881e-02  4.8188e-01\nBuri Ram                  9.2307e-04 -2.9542e-04  4.3055e-03  1.8570e-02\nChachoengsao              1.0659e-01 -1.3828e-04  1.2066e-03  3.0726e+00\nChai Nat                  1.1552e-01 -2.3849e-03  4.3969e-02  5.6229e-01\nChaiyaphum               -7.8253e-02 -1.4078e-03  2.5980e-02 -4.7676e-01\nChanthaburi              -7.8012e-02 -5.7990e-04  8.4493e-03 -8.4239e-01\nChiang Mai               -2.5781e-01 -1.8017e-02  2.5793e-01 -4.7216e-01\nChiang Rai                2.5849e-02 -4.1080e-04  1.0259e-02  2.5927e-01\nChon Buri                 1.3150e-01 -5.2488e-02  1.2424e+00  1.6506e-01\nChumphon                 -6.4679e-02 -1.6600e-03  4.1402e-02 -3.0971e-01\nKalasin                   8.9201e-02 -2.5958e-03  3.1011e-02  5.2128e-01\nKamphaeng Phet            1.1287e-01 -2.4293e-03  3.5330e-02  6.1344e-01\nKanchanaburi             -2.0751e-01 -2.1746e-02  3.1013e-01 -3.3358e-01\nKhon Kaen                -3.0183e-02 -5.4953e-04  4.1977e-03 -4.5738e-01\nKrabi                    -3.2130e-03 -1.6954e-05  3.1330e-04 -1.8056e-01\nLampang                   1.8252e-02 -1.2481e-03  1.2615e-02  1.7361e-01\nLamphun                  -7.5909e-02 -1.7169e-03  4.2818e-02 -3.5854e-01\nLoei                      2.2156e-02 -5.8829e-04  7.0422e-03  2.7104e-01\nLop Buri                  2.4231e-04 -9.9205e-06  8.6572e-05  2.7108e-02\nMae Hong Son             -1.7705e-01 -1.8735e-03  7.1034e-02 -6.5727e-01\nMaha Sarakham             1.0703e-01 -2.7167e-03  3.9499e-02  5.5222e-01\nMukdahan                  1.1032e-01 -9.1833e-04  1.0989e-02  1.0612e+00\nNakhon Nayok             -1.5062e-02 -3.2303e-04  4.7079e-03 -2.1480e-01\nNakhon Pathom             1.5777e-03 -1.9717e-08  1.9954e-07  3.5319e+00\nNakhon Phanom             1.1588e-01 -1.4958e-03  3.7313e-02  6.0766e-01\nNakhon Ratchasima        -1.0243e-01 -1.0241e-02  8.8455e-02 -3.0998e-01\nNakhon Sawan              7.8346e-02 -8.0497e-04  7.0190e-03  9.4476e-01\nNakhon Si Thammarat       2.5608e-03 -2.0765e-05  3.0271e-04  1.4838e-01\nNan                       1.4264e-01 -1.6696e-03  4.1641e-02  7.0716e-01\nNarathiwat                2.2606e-01 -3.0469e-03  1.1539e-01  6.7446e-01\nNong Bua Lam Phu         -5.8555e-03 -3.4093e-03  8.4882e-02 -8.3964e-03\nNong Khai                 3.7639e-02 -3.3988e-04  6.2788e-03  4.7929e-01\nNonthaburi               -2.7317e-01 -2.3588e-04  4.3580e-03 -4.1345e+00\nPathum Thani             -3.7830e-01 -9.7639e-04  1.1684e-02 -3.4908e+00\nPattani                   1.1576e-01 -3.5682e-03  8.8824e-02  4.0037e-01\nPhangnga                  8.8450e-03 -1.3043e-04  3.2580e-03  1.5725e-01\nPhatthalung               4.3888e-02 -1.8269e-03  3.3700e-02  2.4903e-01\nPhayao                    9.2570e-02 -2.3577e-03  4.3468e-02  4.5531e-01\nPhetchabun                2.3124e-02 -3.2479e-04  3.2858e-03  4.0906e-01\nPhetchaburi               1.9970e-01 -1.2305e-02  3.0362e-01  3.8475e-01\nPhichit                   9.4452e-02 -2.4146e-03  4.4514e-02  4.5912e-01\nPhitsanulok               1.5742e-02 -3.0078e-05  3.6026e-04  8.3096e-01\nPhra Nakhon Si Ayutthaya -7.1213e-02 -7.1468e-03  7.1808e-02 -2.3908e-01\nPhrae                     1.4222e-01 -1.9730e-03  2.8707e-02  8.5106e-01\nPhuket                    0.0000e+00  0.0000e+00  0.0000e+00         NaN\nPrachin Buri             -4.2596e-02 -1.3462e-03  2.4844e-02 -2.6170e-01\nPrachuap Khiri Khan       2.5964e-01 -9.4776e-03  3.5661e-01  4.5065e-01\nRanong                    4.6365e-02 -2.5896e-03  6.4527e-02  1.9272e-01\nRatchaburi               -7.5141e-02 -5.5852e-04  8.1380e-03 -8.2676e-01\nRayong                    2.7251e-01 -1.2235e-03  4.6421e-02  1.2705e+00\nRoi Et                    1.6554e-01 -2.3267e-03  2.7804e-02  1.0067e+00\nSa Kaeo                  -1.8024e-02 -1.1480e-03  1.6717e-02 -1.3053e-01\nSakon Nakhon              8.4183e-02 -1.2796e-03  1.5307e-02  6.9076e-01\nSamut Prakan             -4.6931e-01 -1.9064e-04  7.2405e-03 -5.5131e+00\nSamut Sakhon             -7.6004e-01 -2.1810e-03  4.0217e-02 -3.7791e+00\nSamut Songkhram          -2.7309e-03 -7.0522e-06  1.7618e-04 -2.0521e-01\nSaraburi                  2.1469e-02 -1.0227e-04  1.4908e-03  5.5868e-01\nSatun                     5.0708e-02 -1.2208e-03  3.0460e-02  2.9754e-01\nSi Sa Ket                 1.2144e-01 -1.6740e-03  3.0884e-02  7.0056e-01\nSing Buri                 9.6538e-02 -2.8754e-03  4.1799e-02  4.8625e-01\nSongkhla                 -7.7244e-02 -7.1528e-04  1.0420e-02 -7.4969e-01\nSukhothai                 1.0716e-01 -1.6880e-03  2.0185e-02  7.6618e-01\nSuphan Buri               1.9710e-03 -3.3990e-05  3.4397e-04  1.0811e-01\nSurat Thani              -2.5482e-02 -2.6241e-04  3.8246e-03 -4.0780e-01\nSurin                     1.2696e-01 -1.7782e-03  3.2803e-02  7.1081e-01\nTak                       1.2199e-03 -7.0668e-04  5.3973e-03  2.6223e-02\nTrang                     6.1288e-02 -1.7049e-03  3.1454e-02  3.5519e-01\nTrat                      5.2763e-02 -8.3115e-04  6.3945e-02  2.1194e-01\nUbon Ratchathani          4.4419e-02 -1.2847e-04  3.2090e-03  7.8639e-01\nUdon Thani               -9.9330e-03 -2.2764e-05  2.7266e-04 -6.0017e-01\nUthai Thani              -3.6369e-02 -2.3361e-03  3.3978e-02 -1.8463e-01\nUttaradit                 1.1228e-01 -2.0087e-03  3.7046e-02  5.9377e-01\nYala                      1.0732e-01 -2.3077e-03  5.7519e-02  4.5712e-01\nYasothon                  1.5741e-01 -2.9679e-03  4.3140e-02  7.7215e-01\n                         Pr.z....E.Ii..\nAmnat Charoen                    0.6171\nAng Thong                        0.8691\nBangkok                          0.8424\nBueng Kan                        0.6299\nBuri Ram                         0.9852\nChachoengsao                     0.0021\nChai Nat                         0.5739\nChaiyaphum                       0.6335\nChanthaburi                      0.3996\nChiang Mai                       0.6368\nChiang Rai                       0.7954\nChon Buri                        0.8689\nChumphon                         0.7568\nKalasin                          0.6022\nKamphaeng Phet                   0.5396\nKanchanaburi                     0.7387\nKhon Kaen                        0.6474\nKrabi                            0.8567\nLampang                          0.8622\nLamphun                          0.7199\nLoei                             0.7864\nLop Buri                         0.9784\nMae Hong Son                     0.5110\nMaha Sarakham                    0.5808\nMukdahan                         0.2886\nNakhon Nayok                     0.8299\nNakhon Pathom                    0.0004\nNakhon Phanom                    0.5434\nNakhon Ratchasima                0.7566\nNakhon Sawan                     0.3448\nNakhon Si Thammarat              0.8820\nNan                              0.4795\nNarathiwat                       0.5000\nNong Bua Lam Phu                 0.9933\nNong Khai                        0.6317\nNonthaburi                       0.0000\nPathum Thani                     0.0005\nPattani                          0.6889\nPhangnga                         0.8751\nPhatthalung                      0.8033\nPhayao                           0.6489\nPhetchabun                       0.6825\nPhetchaburi                      0.7004\nPhichit                          0.6461\nPhitsanulok                      0.4060\nPhra Nakhon Si Ayutthaya         0.8110\nPhrae                            0.3947\nPhuket                              NaN\nPrachin Buri                     0.7936\nPrachuap Khiri Khan              0.6522\nRanong                           0.8472\nRatchaburi                       0.4084\nRayong                           0.2039\nRoi Et                           0.3141\nSa Kaeo                          0.8962\nSakon Nakhon                     0.4897\nSamut Prakan                     0.0000\nSamut Sakhon                     0.0002\nSamut Songkhram                  0.8374\nSaraburi                         0.5764\nSatun                            0.7661\nSi Sa Ket                        0.4836\nSing Buri                        0.6268\nSongkhla                         0.4534\nSukhothai                        0.4436\nSuphan Buri                      0.9139\nSurat Thani                      0.6834\nSurin                            0.4772\nTak                              0.9791\nTrang                            0.7224\nTrat                             0.8322\nUbon Ratchathani                 0.4316\nUdon Thani                       0.5484\nUthai Thani                      0.8535\nUttaradit                        0.5527\nYala                             0.6476\nYasothon                         0.4400\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n#### 2.4.3.1.1 Mapping the Local Moran's I\n\nBefore we map the local Moran’s I map, it is wise to append the local Moran’s data-frame (`localMI`) onto the profit SpatialPolygonDataFrame.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit.localMI <- cbind(profit_all,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourists.localMI <- cbind(tourist_all,localMI_tour) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\n\n\nWe map both, the local Moran's I values as well as p-values side by side for comparison. The tmap package is used for this. \n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalMI.map <- tm_shape(profit.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(profit.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-117-1.png){width=672}\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalMI.map_tour <- tm_shape(tourists.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map_tour <- tm_shape(tourists.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map_tour, pvalue.map_tour, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-118-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### 2.4.3.2 Creating a LISA Cluster Map\n\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation.\n\nBefore we can generate the LISA cluster map, we must plot the Moran scatterplot.\n\n#### 2.4.3.2.1 Plotting a Moran Scatterplot\n\nThe Moran Scatterplot depicts the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nWe will implement the moran.plot() function of the spdep package to create the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnci <- moran.plot(profit_all$total_value, rswm_q_pro_all,\n                  labels=as.character(profit_all$province_eng), \n                  xlab=\"Total Value\", \n                  ylab=\"Spatially Lag Total Value\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-119-1.png){width=672}\n:::\n:::\n\n\n\n::: insights-box\nNotice that the plot is split in 4 quadrants.\n\nThe top right corner belongs to areas that have high profits and are surrounded by other areas that have the average level of profits.\n:::\n\n#### 2.4.3.2.2 Plotting Moran Scatterplot with Standardised variable\n\nWe first implement the scale() function to center and scale the variable. Here, centering is done by subtracting the mean (omitting NAs) from the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_all$Z.value <- scale(profit_all$total_value) %>% \n  as.vector \n```\n:::\n\n\n\n::: note-box\nNote that the as.vector() function is added so that we get a vector as the output. This allows us to map it neatly into our data-frame.\n:::\n\nWe can now plot the Moran scatterplot again by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnci2 <- moran.plot(profit_all$Z.value, rswm_q_pro_all,\n                   labels=as.character(profit_all$province_eng),\n                   xlab=\"z-Value\", \n                   ylab=\"Spatially Lag z-Value\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-121-1.png){width=672}\n:::\n:::\n\n\n\n#### 2.4.3.2.3 Preparing LISA Map Classes\n\nWe now prepare the data in order to facilitate plotting a LISA Cluster Map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n```\n:::\n\n\n\nNow, we will derive the spatially lagged variable of interest (i.e: GDPPC) and center the spatially lagged variable around its mean for both our variables of interest.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_all$`lag Profit` <- lag.listw(rswm_q_pro_all, profit_all$total_value)\nDV <- profit_all$`lag Profit` - mean(profit_all$`lag Profit`)     \n```\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_all$lag_tourists <- lag.listw(rswm_q_tour, tourist_all$total_value)\nDV <- tourist_all$lag_tourists - mean(tourist_all$lag_tourists)     \n```\n:::\n\n\n\n:::\n\nThe below code chunk performs multiple tasks for us as described in the chunk itself. \n\nThe key functions are the setting of the significance level at 0.05 as well as the creation of the `quadrant` data-frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now, we work on centering the local Moran around the mean.\nLM_I <- localMI[,1]   \n\n# We set the significance level for the Local Moran in the code chunk below.\nsignif <- 0.05       \n\n# The following code chunk defines the four categories (low-low (1), low-high (2), high-low (3), high-high (4))\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4   \n\n# Finally, we place the non-significant Moran in the category 0.\nquadrant[localMI[,5]>signif] <- 0\n```\n:::\n\n\n\n#### 2.4.3.2.3 LISA Map\n\nIn the interest of easier visualization and interpretation, we plot the Total Values and their corresponding quadrants next to each other.\n\nWe can now implement functions of the tmap package to plot the LISA Map.\n\n::: panel-tabset\n\n## Profits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofits <- tm_shape(profit_all) +\n              tm_polygons(\"total_value\", style = \"jenks\", palette = \"Blues\", title = \"Total Value\") +\n              tm_layout(legend.outside = TRUE)\n\nprofit.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(profit.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(profits, LISAmap, \n             asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-126-1.png){width=672}\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tm_shape(tourist_all) +\n              tm_polygons(\"total_value\", style = \"jenks\", palette = \"Blues\", title = \"Total Value\") +\n              tm_layout(legend.outside = TRUE)\n\ntourists.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_tour <- tm_shape(tourists.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(tourism, LISAmap_tour, \n             asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-127-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### 2.4.3.3 Hot and Cold Spot Analysis\n\nWe now use localized spatial statistics to detect hot and cold spot areas.\n\n::: note-box\n“Hot Spot’ is generally used across various disciplines to describe a region or value that is higher relative to its surroundings.\n:::\n\n#### 2.4.3.3.1 Getis and Ord’s G-Statistics\n\nAn alternative spatial statistic used to detect spatial anomalies is the Getis-Ord G-statistic (Getis and Ord, 1972; Ord and Getis, 1995). This method examines spatial relationships within a defined proximity to identify clusters of high or low values. Statistically significant hotspots are areas where high values are spatially clustered, meaning that not only do these areas have high values, but their neighboring areas also exhibit similarly high values.\n\nThe analysis involves three key steps:\n\nDeriving the spatial weight matrix: This defines the spatial relationships between areas, specifying which locations are considered neighbors based on proximity. Computing the Gi statistic: This step calculates the G-statistic for each location, identifying regions where values are significantly higher or lower than expected. Mapping the Gi statistics: The results are visualized to reveal spatial patterns of high-value clusters (hotspots) and low-value clusters (cold spots). This approach is useful for identifying localized patterns of spatial clustering and detecting significant anomalies in the data.\n\n#### 2.4.3.3.2 Deriving Distance Based Weight Matrix\n\nWe start by defining a new set of neighbors. While the spatial autocorrelation considered units which shared borders, for Getis-Ord, we will define the neighbors based on distance.\n\nThere are two types of distance-based proximity matrices:\n\nFixed Distance Weight Matrix\n\nAdaptive Distance Weight Matrix\n\n##### 2.4.3.3.2.1 Deriving distance-based weight matrix\n\n::: panel-tabset\n## fixed distance matrix\n\nBefore creating our connectivity graph, we need to assign a point to each polygon. This requires more than simply running st_centroid() on the us.bound spatial object. Specifically, we need to extract the coordinates into a separate data frame. We have already done this previously and have the object coords_all\n\nFor more detailed information, you can refer to the map documentation here.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm62_lw_profit <- nb2listw(wm_d62_pro_all, style = 'B')\nsummary(wm62_lw_profit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 350 \nPercentage nonzero weights: 5.903188 \nAverage number of links: 4.545455 \n2 disjoint connected subgraphs\nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 \n 8 15 15 13  6  4  2  1  4  4  1  1  2  1 \n8 least connected regions:\n11 26 33 37 47 51 60 63 with 1 link\n1 most connected region:\n8 with 14 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 77 5929 350 700 9560\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(profit_all$province_eng)\ngi.fixed_profit <- localG(profit_all$total_value, wm62_lw_profit)\ngi.fixed_profit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1.72204198  0.32507206 -0.63963877 -0.34656391 -0.63106922  1.85263552\n [7]  1.45185156  1.35082616 -0.28501259  1.41225147  0.07316501 -0.42146553\n[13]  2.55350535  2.15204901  2.29392753  2.02716770 -0.78617455 -0.66718360\n[19]  2.81711623  0.55503719  2.95575400  1.88026186  0.26863597  0.79540880\n[25] -0.38548695 -0.19616145 -0.52581301 -0.35160364 -0.22202539 -0.21957271\n[31] -0.54479866 -0.48275821 -0.28580881 -0.39038265 -0.63470128 -0.36591874\n[37] -0.22285852 -0.38920403 -0.43191914 -0.63354645 -0.50650962 -0.35227572\n[43] -0.39394926 -0.45414601 -0.47661388 -0.40437456 -0.26339386 -0.57279423\n[49]  0.16843044  0.41726596  0.81941327 -0.67447118 -0.37806669 -0.09495497\n[55] -0.42615323 -0.45645978 -0.50084879 -0.51135981 -0.50598386 -0.26988232\n[61] -0.52573156 -0.41343694 -0.25664198  1.53862423  0.16663889 -0.38207690\n[67] -0.19658983  2.37283918 -0.18161089  0.41109227  0.10594488 -0.16352985\n[73] -0.34053906 -0.41978322  0.03763722 -0.09226794 -0.38989571\nattr(,\"internals\")\n                Gi      E(Gi)       V(Gi)       Z(Gi) Pr(z != E(Gi))\n [1,] 0.3858055203 0.14473684 0.019597204  1.72204198    0.085061914\n [2,] 0.1932727918 0.15789474 0.011844279  0.32507206    0.745126534\n [3,] 0.0184957073 0.09210526 0.013243380 -0.63963877    0.522407472\n [4,] 0.0039057092 0.02631579 0.004181385 -0.34656391    0.728918959\n [5,] 0.0193132416 0.09210526 0.013304960 -0.63106922    0.527995263\n [6,] 0.3813548575 0.13157895 0.018176955  1.85263552    0.063934618\n [7,] 0.3889691031 0.17105263 0.022528677  1.45185156    0.146542885\n [8,] 0.3927872620 0.18421053 0.023841458  1.35082616    0.176751126\n [9,] 0.0268929985 0.05263158 0.008155321 -0.28501259    0.775634493\n[10,] 0.3844383845 0.17105263 0.022830045  1.41225147    0.157875930\n[11,] 0.0165472431 0.01315789 0.002145979  0.07316501    0.941674808\n[12,] 0.0241502351 0.06578947 0.009760711 -0.42146553    0.673415178\n[13,] 0.4758402376 0.13157895 0.018176189  2.55350535    0.010664464\n[14,] 0.3951862319 0.11842105 0.016539356  2.15204901    0.031393495\n[15,] 0.3858808558 0.10526316 0.014964793  2.29392753    0.021794662\n[16,] 0.3798739678 0.11842105 0.016634418  2.02716770    0.042645265\n[17,] 0.0258430186 0.13157895 0.018088694 -0.78617455    0.431765234\n[18,] 0.0324122288 0.11842105 0.016618633 -0.66718360    0.504654862\n[19,] 0.4815471011 0.11842105 0.016615189  2.81711623    0.004845699\n[20,] 0.1207543063 0.06578947 0.009806762  0.55503719    0.578869221\n[21,] 0.4213553387 0.07894737 0.013419958  2.95575400    0.003119058\n[22,] 0.3852284095 0.13157895 0.018198317  1.88026186    0.060072399\n[23,] 0.1078287978 0.07894737 0.011558701  0.26863597    0.788209826\n[24,] 0.1018968575 0.03947368 0.006159010  0.79540880    0.426375743\n[25,] 0.0095313437 0.03947368 0.006033261 -0.38548695    0.699876672\n[26,] 0.0041914072 0.01315789 0.002089380 -0.19616145    0.844483802\n[27,] 0.0059294160 0.05263158 0.007888807 -0.52581301    0.599018137\n[28,] 0.0039199342 0.02631579 0.004057220 -0.35160364    0.725135534\n[29,] 0.0121380628 0.02631579 0.004077631 -0.22202539    0.824294115\n[30,] 0.0123226101 0.02631579 0.004061403 -0.21957271    0.826203944\n[31,] 0.0042254150 0.05263158 0.007894584 -0.54479866    0.585892002\n[32,] 0.0017737008 0.03947368 0.006098499 -0.48275821    0.629267429\n[33,] 0.0001736036 0.01315789 0.002063884 -0.28580881    0.775024563\n[34,] 0.0092272618 0.03947368 0.006002982 -0.39038265    0.696253617\n[35,] 0.0031044434 0.06578947 0.009754139 -0.63470128    0.525623256\n[36,] 0.0029903222 0.02631579 0.004063417 -0.36591874    0.714425716\n[37,] 0.0029442098 0.01315789 0.002100421 -0.22285852    0.823645619\n[38,] 0.0180641784 0.05263158 0.007888216 -0.38920403    0.697125223\n[39,] 0.0059355717 0.03947368 0.006029376 -0.43191914    0.665800184\n[40,] 0.0032814385 0.06578947 0.009734525 -0.63354645    0.526376861\n[41,] 0.0075885184 0.05263158 0.007908250 -0.50650962    0.612498940\n[42,] 0.0038576245 0.02631579 0.004064275 -0.35227572    0.724631498\n[43,] 0.0011511480 0.02631579 0.004080383 -0.39394926    0.693618502\n[44,] 0.0041121198 0.03947368 0.006062782 -0.45414601    0.649723737\n[45,] 0.0025532004 0.03947368 0.006000693 -0.47661388    0.633637101\n[46,] 0.0066350187 0.03947368 0.006594826 -0.40437456    0.685937304\n[47,] 0.0009921345 0.01315789 0.002133375 -0.26339386    0.792247020\n[48,] 0.0092649289 0.06578947 0.009738159 -0.57279423    0.566784026\n[49,] 0.0525524825 0.03947368 0.006029684  0.16843044    0.866244663\n[50,] 0.0529041930 0.02631579 0.004060305  0.41726596    0.676483887\n[51,] 0.0504008403 0.01315789 0.002065770  0.81941327    0.412550669\n[52,] 0.0064343489 0.07894737 0.011558599 -0.67447118    0.500011800\n[53,] 0.0022032196 0.02631579 0.004067712 -0.37806669    0.705381053\n[54,] 0.0202649221 0.02631579 0.004060690 -0.09495497    0.924350594\n[55,] 0.0063208919 0.03947368 0.006052136 -0.42615323    0.669996196\n[56,] 0.0120639478 0.05263158 0.007898675 -0.45645978    0.648059389\n[57,] 0.0079439193 0.05263158 0.007960896 -0.50084879    0.616477544\n[58,] 0.0071631695 0.05263158 0.007906174 -0.51135981    0.609099135\n[59,] 0.0076163930 0.05263158 0.007914888 -0.50598386    0.612867981\n[60,] 0.0008813427 0.01315789 0.002069207 -0.26988232    0.787250791\n[61,] 0.0225222310 0.07894737 0.011519063 -0.52573156    0.599074730\n[62,] 0.0074231980 0.03947368 0.006009671 -0.41343694    0.679286515\n[63,] 0.0014919135 0.01315789 0.002066270 -0.25664198    0.797455162\n[64,] 0.2224029785 0.06578947 0.010360800  1.53862423    0.123896059\n[65,] 0.0675325754 0.05263158 0.007996094  0.16663889    0.867654193\n[66,] 0.0019677677 0.02631579 0.004060933 -0.38207690    0.702404325\n[67,] 0.0242434216 0.03947368 0.006001954 -0.19658983    0.844148528\n[68,] 0.2259809615 0.03947368 0.006178100  2.37283918    0.017651948\n[69,] 0.0364839208 0.05263158 0.007905609 -0.18161089    0.855888103\n[70,] 0.0552205480 0.02631579 0.004943791  0.41109227    0.681004878\n[71,] 0.0330707115 0.02631579 0.004065189  0.10594488    0.915626085\n[72,] 0.0267502119 0.03947368 0.006053649 -0.16352985    0.870101275\n[73,] 0.0046162337 0.02631579 0.004060391 -0.34053906    0.733450616\n[74,] 0.0062364667 0.03947368 0.006269013 -0.41978322    0.674643821\n[75,] 0.0560761530 0.05263158 0.008375989  0.03763722    0.969976936\n[76,] 0.0444054673 0.05263158 0.007948543 -0.09226794    0.926485158\n[77,] 0.0014557954 0.02631579 0.004065417 -0.38989571    0.696613665\nattr(,\"cluster\")\n [1] Low  High Low  High Low  Low  Low  Low  High Low  High Low  Low  Low  Low \n[16] Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low \n[31] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[61] Low  Low  Low  High Low  Low  Low  High Low  High Low  Low  Low  High High\n[76] Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = profit_all$total_value, listw = wm62_lw_profit)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n:::\n\n\n\nThe output of the localG() function is a vector containing G or G\\* values, with the following attributes: - \"gstari\": Indicates whether the G\\* version of the statistic was used (TRUE or FALSE). - \"call\": Stores the function call. - \"class\": Set to \"localG\", identifying the object type.\n\nThe Gi statistic is represented as a Z-score, where larger values signify stronger clustering. The sign of the value indicates the type of cluster: positive values point to high-value clusters (hotspots), while negative values indicate low-value clusters (cold spots).\n\nTo merge the Gi values with their corresponding geographic data in the Hunan spatial dataframe, use the following code to join the results to the profit sf object. This allows for the spatial visualization of clusters within the geographic data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit.gi <- cbind(profit_all, as.matrix(gi.fixed_profit)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed_profit.)\n```\n:::\n\n\n\nthe code chunk above actually performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan\\@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n## Mapping Gi values with fixed distance weights\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGimap <-tm_shape(profit.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(profits, Gimap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-131-1.png){width=672}\n:::\n:::\n\n\n\nFrom the above plot, we can infer that ‘hot spots’ tend to be neighboring regions and likewise for the cold spots too. We see high value (hot) clusters in the Central region of Thailand, particularly around Bangkok and the Bangkok Metropolitan Region as well as in the Southern Region, while the majority of the western part of Thailand is ‘cold’.\n:::\n\n#### 2.4.3.3.2 Emerging Hot-Spot Analysis\n\nWe will now conduct Emerging Hot-spot analysis to see if there are any trends popping up recently.\n\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\n-   Building a space-time cube,\n\n-   Calculating Getis-Ord local Gi\\* statistic for each bin by using an FDR correction,\n\n-   Evaluating these hot and cold spot trends by using Mann-Kendall trend test,\n\n-   Categorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin.\n\n##### 2.4.3.3.2.1 Space-Time Cube\n\nWe now use the [`spacetime()`](https://sfdep.josiahparry.com/reference/spacetime.html) function of the sfdep package to create a spatio-temporal cube.\n\nWe will do this for profits as well as occupancy rate.\n\n::: panel-tabset\n## Profits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofit_all_temporal=tourists_temporal%>%filter(variable=='revenue_all')\n\n# Rename province_eng to ADM1_EN using base R in order to facilitate the creation of the spacetime cube.\nnames(profit_all_temporal)[names(profit_all_temporal) == \"province_eng\"] <- \"ADM1_EN\"\n\n# Space-time by month\nprofits_st <- spacetime(profit_all_temporal, province,\n                      .loc_col = \"ADM1_EN\",\n                      .time_col = \"date\")\n```\n:::\n\n\n\nTo verify if the cube has been create, we implement the is_spacetime_cube() function of the sfdep package as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(profits_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nBased on the above output, we can confirm that it has been created as intended.\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_temporal=tourists_temporal%>%filter(variable=='no_tourist_all')\n\n# Rename province_eng to ADM1_EN using base R in order to facilitate the creation of the spacetime cube.\nnames(tourist_temporal)[names(tourist_temporal) == \"province_eng\"] <- \"ADM1_EN\"\n\n# Space-time by month\ntourist_st <- spacetime(tourist_temporal, province,\n                      .loc_col = \"ADM1_EN\",\n                      .time_col = \"date\")\n```\n:::\n\n\n\nTo verify if the cube has been create, we implement the is_spacetime_cube() function of the sfdep package as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(tourist_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n## Occupancy Rates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noccupancy_temporal=tourists_temporal%>%filter(variable=='ratio_tourist_stay')\n\n# Rename province_eng to ADM1_EN using base R in order to facilitate the creation of the spacetime cube.\nnames(occupancy_temporal)[names(occupancy_temporal) == \"province_eng\"] <- \"ADM1_EN\"\n\n# Space-time by month\noccupancy_st <- spacetime(occupancy_temporal, province,\n                      .loc_col = \"ADM1_EN\",\n                      .time_col = \"date\")\n```\n:::\n\n\n\nTo verify if the cube has been create, we implement the is_spacetime_cube() function of the sfdep package as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(occupancy_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nBased on the above output, we can confirm that it has been created as intended.\n:::\n\n##### 2.4.3.3.2.2 Deriving Spatial Weights\n\nWe implement the below code chunk to identify neighbors and calculate the inverse-distance weights.\n\n::: panel-tabset\n\n## Profits \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofits_nb <- profits_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb, \n                             geometry, \n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n# Create RDS File\nwrite_rds(profits_nb, 'data/rds/pro_nb')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprofits_nb=read_rds('data/rds/pro_nb')\n```\n:::\n\n\n\n## Number of Tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_nb <- tourist_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb, \n                             geometry, \n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n# Create RDS File\nwrite_rds(tourist_nb, 'data/rds/tour_nb')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_nb=read_rds('data/rds/tour_nb')\n```\n:::\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noccupancy_nb <- occupancy_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb, \n                             geometry, \n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n\n# Create RDS file\nwrite_rds(occupancy_nb,'data/rds/occ_nb')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noccupancy_nb=read_rds('data/rds/occ_nb')\n```\n:::\n\n\n:::\n\n::: insights-box\n-   `activate()` of dplyr package is used to activate the geometry context\n\n-   `mutate()` of dplyr package is used to create two new columns *nb* and *wt*.\n\n-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`\n\n    -   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.\n:::\n\n##### 2.4.3.3.3 Computing Gi Stats\n\nWe can use these new columns to manually calculate the local Gi for each location. We do this by grouping by *Year* and using the `local_gstar_perm()` function of the sfdep package. After this, we use the `unnest()` function to unnest the *gi_star* column of the newly created *gi_starts* data.frame.\n\n::: panel-tabset\n\n## Profits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the local G* statistics\ngi_stars_profit <- profits_nb %>%\n  group_by(date) %>%\n  mutate(gi_star = local_gstar_perm(\n    value,  # Make sure it's numeric\n    nb,                   # Neighbors\n    wt                    # Weights\n  )) %>%\n  tidyr::unnest(gi_star)\n```\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the local G* statistics\ngi_stars_tour <- tourist_nb %>%\n  group_by(date) %>%\n  mutate(gi_star = local_gstar_perm(\n    value,  # Make sure it's numeric\n    nb,                   # Neighbors\n    wt                    # Weights\n  )) %>%\n  tidyr::unnest(gi_star)\n```\n:::\n\n\n\n## Occupancy Rate \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the local G* statistics\ngi_stars_occ <- occupancy_nb %>%\n  group_by(date) %>%\n  mutate(gi_star = local_gstar_perm(\n    value,  # Make sure it's numeric\n    nb,                   # Neighbors\n    wt                    # Weights\n  )) %>%\n  tidyr::unnest(gi_star)\n```\n:::\n\n\n\n:::\n\n##### 2.4.3.3.4 Mann-Kendall Test\n\nWith the above Gi calculations, we can now conduct the Mann-Kendall test to evaluate selected locations, the top 5 most lucrative regions, for a trend.\n\n::: panel-tabset\n\n## Bangkok\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbkk <- gi_stars_profit %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Bangkok\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = bkk, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-148-1.png){width=672}\n:::\n:::\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbkk_occ <- gi_stars_occ %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Bangkok\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = bkk_occ, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-150-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## Krabi\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkra <- gi_stars_profit %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Krabi\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = kra, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-152-1.png){width=672}\n:::\n:::\n\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkra_occ <- gi_stars_occ %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Krabi\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = bkk_occ, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-154-1.png){width=672}\n:::\n:::\n\n\n\n\n::: \n\n## Phuket\n\n::: panel-tabset\n\n## Profit\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphk<- gi_stars_profit %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Phuket\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe now produce a plot to visualize this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = phk, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-156-1.png){width=672}\n:::\n:::\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphk_occ <- gi_stars_occ %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Phuket\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = bkk_occ, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-158-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## Chon Buri\n\n::: panel-tabset\n\n## Profit\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbr<- gi_stars_profit %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Chon Buri\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe now produce a plot for the same\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cbr, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-160-1.png){width=672}\n:::\n:::\n\n\n\n\n## Occupancy Rate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbr_occ <- gi_stars_occ%>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Chon Buri\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = bkk_occ, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-162-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## Chiang Mai\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchm<- gi_stars_profit %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Chiang Mai\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe now create a plot for the same.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = chm, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-164-1.png){width=672}\n:::\n:::\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchm_occ <- gi_stars_occ %>% \n  ungroup() %>% \n  filter(ADM1_EN == \"Chiang Mai\") %>% \n  select(ADM1_EN, date, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = chm_occ, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-166-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\nFor all of these regions, besides Chiang Mai, we see a sharp drop between 2021 and 2022 however for the most part none of these regions reach their peaks between 2020 and 2022, which was when the world was hit by a global pandemic.\n\n::: insights-box\nAlternatively, we can also create an interactive plot using the ggplotly() function of the plotly package.\n\nThe code chunk below can be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Interactive plot for Bangkok \n\np <- ggplot(data = bkk, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n```\n:::\n\n\n:::\n\nWe now generate the report for the Mann Kendall Test by implementing the below code chunk.\n\nA Monotonic series or function is one that only increases (or decreases) and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.\n\n-   **H0: No monotic trend.**\n\n-   **H1: Monotonic trend is present**\n\n::: insights-box\nTau ranges between -1 and 1 where:\n\n-   -1 is a perfectly decreasing series.\n\n-   1 is a perfectly increasing series.\n:::\n\nWe implement the below code chunk to obtain the required report.\n\n::: panel-tabset\n## Bangkok\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbkk %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n     tau    sl     S     D   varS\n   <dbl> <dbl> <dbl> <dbl>  <dbl>\n1 -0.118 0.228  -145  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n## Krabi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkra %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n      tau    sl     S     D   varS\n    <dbl> <dbl> <dbl> <dbl>  <dbl>\n1 -0.0318 0.751   -39  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n## Chiang Mai\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchm %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n    tau     sl     S     D   varS\n  <dbl>  <dbl> <dbl> <dbl>  <dbl>\n1 0.249 0.0110   305  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n:::\n\n##### 2.4.3.3.5 Mann-Kendall Test Data-Frame\n\nWe can perform the above steps for every location by using the group_by() function of the dplyr package.\n\n::: panel-tabset\n\n## Profits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- gi_stars_profit %>%\n  group_by(ADM1_EN) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  ADM1_EN            tau        sl     S     D   varS\n  <chr>            <dbl>     <dbl> <dbl> <dbl>  <dbl>\n1 Amnat Charoen -0.138   0.160      -169  1225 14292.\n2 Ang Thong     -0.429   0.0000117  -525  1225 14292.\n3 Bangkok       -0.118   0.228      -145  1225 14292.\n4 Bueng Kan     -0.0971  0.324      -119  1225 14292.\n5 Buriram        0.0204  0.841        25  1225 14292.\n6 Chachoengsao   0.00898 0.933        11  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_tour <- gi_stars_tour %>%\n  group_by(ADM1_EN) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa_tour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  ADM1_EN           tau        sl     S     D   varS\n  <chr>           <dbl>     <dbl> <dbl> <dbl>  <dbl>\n1 Amnat Charoen -0.238  0.0153     -291  1225 14292.\n2 Ang Thong     -0.0563 0.569       -69  1225 14292.\n3 Bangkok       -0.391  0.0000638  -479  1225 14292.\n4 Bueng Kan     -0.259  0.00821    -317  1225 14292.\n5 Buriram        0.153  0.120       187  1225 14292.\n6 Chachoengsao   0.0988 0.315       121  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n## Occupancy Rate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_occ <- gi_stars_occ %>%\n  group_by(ADM1_EN) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa_occ)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  ADM1_EN          tau        sl     S     D   varS\n  <chr>          <dbl>     <dbl> <dbl> <dbl>  <dbl>\n1 Amnat Charoen -0.109 0.270      -133  1225 14292.\n2 Ang Thong     -0.420 0.0000171  -515  1225 14292.\n3 Bangkok       -0.205 0.0365     -251  1225 14292.\n4 Bueng Kan      0.257 0.00863     315  1225 14292.\n5 Buriram        0.122 0.216       149  1225 14292.\n6 Chachoengsao  -0.324 0.000925   -397  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\nWe can sort the data-frame to highlight emerging hot/cold spots by implementing the below code chunk.\n\n::: panel-tabset\n\n## Profits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:10)\nhead(emerging)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  ADM1_EN         tau          sl     S     D   varS\n  <chr>         <dbl>       <dbl> <dbl> <dbl>  <dbl>\n1 Phichit       0.540 0             661  1225 14292.\n2 Mae Hong Son  0.527 0.000000119   645  1225 14292.\n3 Chiang Rai    0.528 0.000000119   647  1225 14292.\n4 Saraburi     -0.510 0.000000179  -625  1225 14292.\n5 Ratchaburi   -0.499 0.000000335  -611  1225 14292.\n6 Phitsanulok   0.471 0.00000143    577  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging_tour <- ehsa_tour %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:10)\nhead(emerging_tour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  ADM1_EN            tau          sl     S     D   varS\n  <chr>            <dbl>       <dbl> <dbl> <dbl>  <dbl>\n1 Phichit          0.572 0             701  1225 14292.\n2 Chiang Rai       0.497 0.000000358   609  1225 14292.\n3 Mae Hong Son     0.482 0.000000834   591  1225 14292.\n4 Sa Kaeo         -0.461 0.00000238   -565  1225 14292.\n5 Samut Songkhram  0.424 0.0000147     519  1225 14292.\n6 Ratchaburi      -0.407 0.0000310    -499  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n## Occupancy Rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging_occ <- ehsa_occ %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:10)\nhead(emerging_occ)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  ADM1_EN         tau          sl     S     D   varS\n  <chr>         <dbl>       <dbl> <dbl> <dbl>  <dbl>\n1 Nan           0.553 0             677  1225 14292.\n2 Nakhon Phanom 0.554 0             679  1225 14292.\n3 Phrae         0.587 0             719  1225 14292.\n4 Chiang Mai    0.507 0.000000238   621  1225 14292.\n5 Phayao        0.510 0.000000238   625  1225 14292.\n6 Uttaradit     0.460 0.00000262    563  1225 14292.\n```\n\n\n:::\n:::\n\n\n\n:::\n##### 2.4.3.3.6 Emerging Hot-Spot Analysis\n\nWe now perform EHSA by using the [`emerging_hotspot_analysis()`](https://sfdep.josiahparry.com/reference/emerging_hotspot_analysis.html) function of the sfdep package.\n\nIt takes a spacetime object x (i.e: profit_st), and the quoted name of the variable of interest (i.e. GDPPC) as the .var argument.\n\nThe `k` argument is used to specify the number of time lags which is set to 1 by default.\n\n`nsim` is number of simulations to be performed.\n\n::: panel-tabset\n\n## Profit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = profits_st, \n  .var = \"value\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n\n\nWe now implement various ggplot2 functions to reveal the distributions of EHSA classes as a bar chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-178-1.png){width=672}\n:::\n:::\n\n\n\nWe can proceed with Visualizing EHSA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_ehsa <- province %>%\n  left_join(ehsa,\n            by = join_by(ADM1_EN == location))\n```\n:::\n\n\n\nWe can now implement functions of the tmap package to produce a visualization for the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig <- thai_ehsa  %>%\n  filter(p_value < 0.1)\ntmap_mode(\"plot\")\ntm_shape(thai_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)+\n  tm_text('ADM1_EN', size=0.3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-180-1.png){width=672}\n:::\n:::\n\n\n\n## Number of tourists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_tour <- emerging_hotspot_analysis(\n  x = tourist_st, \n  .var = \"value\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n\n\nWe now implement various ggplot2 functions to reveal the distributions of EHSA classes as a bar chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa_tour,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-182-1.png){width=672}\n:::\n:::\n\n\n\nWe can proceed with Visualizing EHSA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_ehsa_tour <- province %>%\n  left_join(ehsa_tour,\n            by = join_by(ADM1_EN == location))\n```\n:::\n\n\n\nWe can now implement functions of the tmap package to produce a visualization for the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig_tour <- thai_ehsa_tour  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(thai_ehsa_tour) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig_tour) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)+\n  tm_text('ADM1_EN', size=0.3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-184-1.png){width=672}\n:::\n:::\n\n\nWe don't see too many patterns detected, indicating that it is pretty consistent over time. We do see two 'sporadic hotspots', Kanchanaburi and Khon Kaen, in addition to a single oscillating hotspot, Uttaradit. \n\n## Occupancy Rate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_occ <- emerging_hotspot_analysis(\n  x = occupancy_st, \n  .var = \"value\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n\n\nWe now implement various ggplot2 functions to reveal the distributions of EHSA classes as a bar chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa_occ,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-186-1.png){width=672}\n:::\n:::\n\n\n\nWe can proceed with Visualizing EHSA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_ehsa_occ <- province %>%\n  left_join(ehsa_occ,\n            by = join_by(ADM1_EN == location))\n```\n:::\n\n\n\nWe can now implement functions of the tmap package to produce a visualization for the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig_occ <- thai_ehsa_occ  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(thai_ehsa_occ) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig_occ) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)+\n  tm_text('ADM1_EN', size=0.3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-188-1.png){width=672}\n:::\n:::\n\n\n\nWe see a majority of the northern part of Thailand, including Chiang Mai, are oscillating hotspots. Whereas, there are oscillating cold spots scattered across the nation.\n\n::: \n\n::: insights-box\nThere are several categories for emerging hotspot analysis however these are the most common. The below will help you interpret them.\n\nSporadic Hotspots: Locations with occasional bursts of high activity but without consistent patterns over time.\n\nOscillating Hotspots: Locations where high activity alternates between being present and absent over different time periods.\n\nSporadic Coldspots: Locations with occasional periods of low activity, lacking consistent patterns over time.\n\nOscillating Coldspots: Locations where low activity alternates between being present and absent over time.\n:::\n\n\n# 2.5 Future work\n\n\nTourism across Thailand is booming and has began to rebound after Covid. There appears to be a significant difference in the trends pre and post covid, this is what must continue to be looked at over the next few years.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}