{
  "hash": "90b125b2cd99b262d65bf575c8361530",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Arjun Singh\"\ndate: 2024-10-28\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 3 Introduction\n\nHousing is a critical component of household wealth across the globe, and purchasing a home represents one of the most significant investments for many individuals. Housing prices are influenced by various factors, some of which are global—such as a country’s economic conditions and inflation rates—while others are specific to the properties themselves. These factors can be broadly categorized into structural and locational aspects.\n\nStructural factors are attributes directly related to the property, such as its size, features, and ownership tenure. In contrast, locational factors pertain to the surrounding neighborhood and accessibility, including proximity to childcare centers, public transportation, and shopping facilities.\n\nTraditionally, predictive models for housing resale prices have relied on the Ordinary Least Squares (OLS) method. However, OLS does not account for spatial autocorrelation and spatial heterogeneity—two common characteristics in geographical data like housing transactions. Ignoring spatial autocorrelation can lead to biased, inconsistent, or inefficient results in predictive housing pricing models (Anselin, 1998). To address this limitation, Geographically Weighted Models (GWMs) have been introduced, offering a more accurate approach to calibrating predictive models for housing resale prices by accounting for spatial variability.\n\n# 3.1 Data and Packages\n\nFor this exercise, we use **HDB Resale Flat Prices** provided by [**Data.gov.sg**](https://data.gov.sg/) should be used as the core data set. The study should focus on either three-room, four-room or five-room flat.\n\n![](images/clipboard-1921776033.png)\n\nThe following data-sets are used to incorporate locational factors:\n\n-   CHAS Clinics\n\n-   Eldercare\n\n-   Supermarkets\n\n-   Hawkers\n\n-   Kindergartens\n\n-   Parks\n\n-   Childcare\n\nAll of the above have been acquired from [data.gov.sg](https://data.gov.sg/). The below have been acquired from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html).\n\n-   MRTs\n\n-   Bus Stops\n\n![](images/clipboard-2079193661.png)\n\n![](images/clipboard-3240590388.png)\n\nAll the above datasets are downloaded from two main data sources- [data.gov.sg](https://data.gov.sg/) and [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html).\n\nWe will use the following packages for our analysis:\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/sf.pdf): R package for handling, analyzing, and visualizing spatial data using simple features.\n\n-   [**spdep**](https://cran.r-project.org/web/packages/spdep/spdep.pdf): R package for spatial dependence modeling, including spatial autocorrelation and regression analysis.\n\n-   [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/GWmodel.pdf): R package for geographically weighted regression (GWR) and other localized spatial models.\n\n-   [**SpatialML**](https://cran.r-project.org/web/packages/SpatialML/SpatialML.pdf): R package for spatial machine learning, offering tools for spatially explicit predictive modeling.\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/tmap.pdf): R package for creating thematic maps, offering a flexible and layered approach for spatial visualization.\n\n-   [**rsample**](https://cran.r-project.org/web/packages/rsample/rsample.pdf): R package for resampling datasets, facilitating model training and evaluation with various sampling methods.\n\n-   [**Metrics**](https://cran.r-project.org/web/packages/Metrics/Metrics.pdf): R package for calculating common metrics for regression and classification models, such as RMSE and accuracy.\n\n-   [**tidyverse**](https://cran.r-project.org/web/packages/tidyverse/tidyverse.pdf): A collection of R packages designed for data manipulation, analysis, and visualization in a consistent and coherent syntax.\n\n-   [**spatstat**](https://cran.r-project.org/web/packages/spatstat/spatstat.pdf): A package for spatial data analysis, particularly focused on point pattern analysis. It provides tools for modeling, simulation, and visualization of spatial point patterns on various geometries.\n\n-   [**httr**](https://cran.r-project.org/web/packages/httr/httr.pdf): A package for working with HTTP requests in R, facilitating interactions with web APIs by simplifying the process of sending requests (GET, POST, etc.), handling responses, and managing authentication.\n\n-   [**jsonlite**](https://cran.r-project.org/web/packages/jsonlite/jsonlite.pdf): A package for parsing and generating JSON data in R, known for its simple, reliable conversion between R objects and JSON, making it essential for data exchange with web services.\n\n-   [**rvest**](https://cran.r-project.org/web/packages/rvest/rvest.pdf): A web scraping package that allows users to easily harvest data from HTML web pages. It simplifies navigating, parsing, and extracting structured data from websites.\n\nPlease click the link and refer to the documentation for any packages that you are interested to know more about.\n\nWe use the p_load() function of the pacman package to load these packages into our environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse, spatstat, httr, jsonlite, rvest)\nset.seed(1234)\n```\n:::\n\n\n\n## 3.1.2 Importing the data\n\n### 3.1.2.1 Aspatial Data\n\nThe aspatial data for this exercise is the HDB Flat Resale data that we acquired from data.gov.sg.\n\nWe implement the read_csv() function to import this data-set into our environment.\n\nWe filter our data down to the time of interest- January 2023 till September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/aspatial/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\n\nAdditionally, we are going to focus on 3/4/5 room flats for this study.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrooms=c('3 ROOM', '4 ROOM', '5 ROOM')\nresale=resale%>%\n  filter(flat_type %in% rooms)\n```\n:::\n\n\n\nWe have over 43000 flats in our study.\n\nThe below code chunk tidies the data by combining the `block` and `street_name` columns to form the entire address.\n\nDoing this will allow us to obtain the geographical coordinates accurately to facilitate the creation of our predictive model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n\nThe code chunk below creates a list of **unique** addresses in order to avoid having the same street and area being geocoded multiple times. Geocoding is usually 'first come, first serve', so sorting actually makes the code chunk more efficient.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddress_list <- sort(unique(resale_tidy$address))\n```\n:::\n\n\n\nThe code chunk below is used in order to acquire the postal codes of the required addresses with the help of geocoding. The jsonlite and rvest packages are important for this.\n\n::: insights-box\nGeocoding is the process of converting a physical address or place name into geographic coordinates (latitude and longitude). This allows location data in address format to be mapped, visualized, and analyzed in spatial systems.\n\nFor example, if you have an address like \"1600 Amphitheatre Parkway, Mountain View, CA,\" geocoding will convert it into coordinates, such as `37.4220° N, 122.0841° W`.\n\nGeocoding is applied for a multitude of reasons, such as:\n\n-   **Mapping and navigation services**: To display locations on maps or provide directions.\n-   **Location-based services**: For ride-sharing, food delivery, and on-demand services, geocoding enables finding the user's location.\n-   **Data analysis**: Geocoding addresses in datasets allows analysis based on geography, such as customer distribution, logistics, and demographic studies.\n\nGeocoding is typically done through APIs like Google Maps, OpenStreetMap, or **OneMap in Singapore** (which we will be using), which processes the address and returns the corresponding coordinates for our use.\n:::\n\n::: panel-tabset\n## Reverse Geocoding\n\nWe start by defining a function `get_coords`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(address_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n\n\n## Obtain Coordinates and Postal Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(address_list)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords, \"data/rds/coords.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords=read_rds('data/rds/coords.rds')\n```\n:::\n\n\n:::\n\nNow that we have obtained the coordinates, we can create an sf object by using the st_as_sf() function of the sf package as shown in the code chunk below.\n\nConverting it into an sf data-frame is necessary to conduct analysis and ensure consistent geometries. We first set the EPSG code to 4326 as it is undefined, and then convert it to the correct EPSG code of 3414 for Singapore. Skipping out on setting the initial CRS as 4326 will cause issues down the line as the geometries will not be accurate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_sf=st_as_sf(coords, coords = c('longitude', 'latitude'), crs= 4326, agr = 'constant')%>%\n  st_transform(crs=3414)\n```\n:::\n\n\n\nWe now change a few columns in a way that can facilitate analysis.\n\nWe start off by changing storey ranges from bins to numeric values depicting a scale, such as floor 1-3 will be 1- which means its the lowest. We will do this for the `resale_tidy` data-frame generated earlier as this is what we will use to join with the prepared data-frame later.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First determine all the unique ranges\nunique_storey_ranges <- unique(resale_tidy$storey_range)\nprint(unique_storey_ranges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"04 TO 06\" \"25 TO 27\" \"07 TO 09\" \"01 TO 03\" \"10 TO 12\" \"13 TO 15\"\n [7] \"16 TO 18\" \"22 TO 24\" \"19 TO 21\" \"34 TO 36\" \"28 TO 30\" \"37 TO 39\"\n[13] \"31 TO 33\" \"40 TO 42\" \"43 TO 45\" \"46 TO 48\" \"49 TO 51\"\n```\n\n\n:::\n:::\n\n\n\nNow, we can generate numeric values instead. This is done in the below code chunk.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale_tidy %>%\n  mutate(\n    min_storey = as.numeric(str_extract(storey_range, \"^[0-9]+\")),  \n    storey_scale = ((min_storey - 1) %/% 3) + 1               \n  ) %>%\n  select(-min_storey)  \n```\n:::\n\n\n\n## Verification\n\nWe implement the head() function to verify if it has been created as intended.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(resale_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 15\n  month town  flat_type block street_name storey_range floor_area_sqm flat_model\n  <chr> <chr> <chr>     <chr> <chr>       <chr>                 <dbl> <chr>     \n1 2023… ANG … 3 ROOM    225   ANG MO KIO… 04 TO 06                 67 New Gener…\n2 2023… ANG … 3 ROOM    310C  ANG MO KIO… 25 TO 27                 70 Model A   \n3 2023… ANG … 3 ROOM    225   ANG MO KIO… 07 TO 09                 67 New Gener…\n4 2023… ANG … 3 ROOM    319   ANG MO KIO… 04 TO 06                 73 New Gener…\n5 2023… ANG … 3 ROOM    319   ANG MO KIO… 07 TO 09                 73 New Gener…\n6 2023… ANG … 3 ROOM    220   ANG MO KIO… 04 TO 06                 67 New Gener…\n# ℹ 7 more variables: lease_commence_date <dbl>, remaining_lease <chr>,\n#   resale_price <dbl>, address <chr>, remaining_lease_yr <int>,\n#   remaining_lease_mth <int>, storey_scale <dbl>\n```\n\n\n:::\n:::\n\n\n:::\n\nNow, we want to create a column `total_remaining_lease` that shows the number of months remaining on the lease, where we combine the total remaining number of years and months into a singular column and show the total in months.\n\n::: panel-tabset\n## Data Cleaning\n\nWe noticed quite a few values shown as NA, for example if exactly 94 years were left on the lease, then the month column would show NA. We need to fix this before proceeding else it causes issues.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale_tidy %>%\n  mutate(\n    remaining_lease_mth = ifelse(is.na(remaining_lease_mth), 0, remaining_lease_mth),\n    remaining_lease_yr = ifelse(is.na(remaining_lease_yr), 0, remaining_lease_yr)\n  )\n```\n:::\n\n\n\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine remaining_yr and remaining_mth into total_remaining in months\nresale_tidy <- resale_tidy %>%\n  mutate(total_remaining_lease = (remaining_lease_yr * 12) + remaining_lease_mth)\n```\n:::\n\n\n\n## Verification\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(resale_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 16\n  month town  flat_type block street_name storey_range floor_area_sqm flat_model\n  <chr> <chr> <chr>     <chr> <chr>       <chr>                 <dbl> <chr>     \n1 2023… ANG … 3 ROOM    225   ANG MO KIO… 04 TO 06                 67 New Gener…\n2 2023… ANG … 3 ROOM    310C  ANG MO KIO… 25 TO 27                 70 Model A   \n3 2023… ANG … 3 ROOM    225   ANG MO KIO… 07 TO 09                 67 New Gener…\n4 2023… ANG … 3 ROOM    319   ANG MO KIO… 04 TO 06                 73 New Gener…\n5 2023… ANG … 3 ROOM    319   ANG MO KIO… 07 TO 09                 73 New Gener…\n6 2023… ANG … 3 ROOM    220   ANG MO KIO… 04 TO 06                 67 New Gener…\n# ℹ 8 more variables: lease_commence_date <dbl>, remaining_lease <chr>,\n#   resale_price <dbl>, address <chr>, remaining_lease_yr <int>,\n#   remaining_lease_mth <dbl>, storey_scale <dbl>, total_remaining_lease <dbl>\n```\n\n\n:::\n:::\n\n\n:::\n\n### 3.1.2.2 Geospatial Data\n\nWe first import the URA Master Plan data by implementing the st_read() function of the sf package.\n\nAdditionally, we ensure that the CRS information is consistent with that of Singapore to facilitate the creation of our predictive model. The st_transform() function of the sf package is implemented for this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz=st_read(dsn = 'data/geospatial', layer='MP14_SUBZONE_WEB_PL')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n::: note-box\nThe EPSG code of Singapore is 3414.\n:::\n\n#### 3.1.2.2.1 Extracting the CBD\n\n::: panel-tabset\n## CBD Planning Areas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbd_spots=c('ORCHARD', 'SINGAPORE RIVER', 'DOWNTOWN CORE', 'MUSUEM', 'RIVER VALLEY', 'NEWTON', ' ROCHOR', 'OUTRAM')\n```\n:::\n\n\n\n## CBD Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbd=mpsz%>%\n  filter(PLN_AREA_N %in% cbd_spots)%>%\n  st_transform(crs=3414)\n```\n:::\n\n\n:::\n\nWe verify if it has been extracted as expected by plotting a highly cartographic map using the tmap package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(cbd)+\n  tm_polygons(col = 'green')\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\n### 3.1.2.2 Locational Factors (Geospatial)\n\nWe will now import a number of data-sets that carry the data necessary for us to measure the impact of proximity to these facilities on housing prices.\n\nAdditionally, we ensure that the CRS information is consistent with that of Singapore to facilitate the creation of our predictive model. The st_transform() function of the sf package is implemented for this.\n\n::: note-box\nNote that some data-sets may have 3-dimensional geometry, that is Point Z. To convert this to point form, we use the st_zm() function and set the `drop` argument to TRUE.\n:::\n\n::: panel-tabset\n## Eldercare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare= st_read(dsn='data/locational_factors', layer='ELDERCARE')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n## CHAS Clinics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCHAS=st_read('data/locational_factors/CHASClinics.kml')%>%\n               st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MOH_CHAS_CLINICS' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors\\CHASClinics.kml' \n  using driver `KML'\nSimple feature collection with 1193 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.5818 ymin: 1.016264 xmax: 103.9903 ymax: 1.456037\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n## Supermarkets\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket=st_read('data/locational_factors/SupermarketsKML.kml')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SUPERMARKETS' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors\\SupermarketsKML.kml' \n  using driver `KML'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsupermarket <- st_zm(supermarket, drop = TRUE, what = \"ZM\")\n```\n:::\n\n\n\n## MRT\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt=st_read(dsn='data/locational_factors', layer='RapidTransitSystemStation')%>%\n  st_transform(crs=3414)\n\nSys.setenv(OGR_GEOMETRY_ACCEPT_UNCLOSED_RING = \"NO\")\n\nmrt <- mrt[!st_is_empty(mrt), ]\n\n# Convert Polygon to Point\nmrt <- st_centroid(mrt)\n```\n:::\n\n\n\n::: note-box\nGenerally, GDAL (Geospatial Data Abstraction Library) might accept polygons with unclosed rings which may result in invalid geometries. These cause issues when conducting spatial analysis and operations on R. Setting the `OGR_GEOMETRY_ACCEPT_UNCLOSED_RING`='NO' tells GDAL explicitly to reject these unclosed rings.\n:::\n\nGiven we have modified the mrt data, we will create an RDS file to facilitate computational efficiency. The write_rds() function is used to create and store the RDS file on the local system. The read_rds() function is used to import it into our environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mrt, 'data/rds/mrt.rds')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt=read_rds('data/rds/mrt.rds')\n```\n:::\n\n\n\n## Bus Stops\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus=st_read(dsn='data/locational_factors', layer='BusStop')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n## Hawkers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkers=st_read('data/locational_factors/HawkerCentresGEOJSON.geojson')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `HawkerCentresGEOJSON' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors\\HawkerCentresGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n## Kindgergartens\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergartens=st_read('data/locational_factors/Kindergartens.geojson')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kindergartens' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors\\Kindergartens.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 448 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n## Parks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparks=st_read('data/locational_factors/Parks.geojson')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Parks' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors\\Parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 430 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n## Childcare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare=st_read(dsn='data/locational_factors', layer='CHILDCARE')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CHILDCARE' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1885 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11226.55 ymin: 25523.51 xmax: 44936.07 ymax: 49308.17\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\n## Gyms\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngym=st_read('data/locational_factors/GymsSGGEOJSON.geojson')%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `GymsSGGEOJSON' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex3\\data\\locational_factors\\GymsSGGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 159 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6938 ymin: 1.262063 xmax: 103.9518 ymax: 1.435078\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n## Dropping Z\ngym<- st_zm(gym, drop = TRUE, what = \"ZM\")\n```\n:::\n\n\n:::\n\nNow that we have imported relevant locational factors, we want to determine the proximity of flats to these factors. We will do so in the next section below.\n\n# 3.2 Data Wrangling and Manipulation\n\nWe calculate the number of data points within a distance. We will use the st_buffer() function of the sf package for this.\n\n::: note-box\nif we set the `dist` argument to 1000, we create a buffer of 1KM around each point in the resale data-set.This allows us to determine the number of data-points of other Points of Interest within this zone.\n:::\n\n::: panel-tabset\n## Defining Buffers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We first create a buffer. Alter this based on the input data. (eg: 200m for bus stops, 1000m for medical and care facilities, schools, parks and supermarkets)\nbuffer_200m=st_buffer(resale_sf, dist=200)\n\nbuffer_500m=st_buffer(resale_sf, dist=500)\n\nbuffer_1000m=st_buffer(resale_sf, dist=1000)\n```\n:::\n\n\n\n## Creating Point Counts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 200M\nbuffer_200m$bus_pts_count= lengths(\n  st_intersects(buffer_200m, bus)\n)\nbuffer_200m$chas_pts_count= lengths(\n  st_intersects(buffer_200m, CHAS)\n)\n\nbuffer_200m$eldercare_pts_count= lengths(\n  st_intersects(buffer_200m, eldercare)\n)\n\n\n#500m\nbuffer_500m$hawker_pts_count= lengths(\n  st_intersects(buffer_500m, hawkers)\n)\n\nbuffer_500m$supermarket_pts_count= lengths(\n  st_intersects(buffer_500m, supermarket)\n)\n\nbuffer_500m$childcare_pts_count= lengths(\n  st_intersects(buffer_500m, childcare)\n)\n\n# 1000M\n\n\nbuffer_1000m$park_pts_count= lengths(\n  st_intersects(buffer_1000m, parks)\n)\n\n\nbuffer_1000m$mrt_pts_count= lengths(\n  st_intersects(buffer_1000m, mrt)\n)\n\nbuffer_1000m$gym_pts_count=lengths(\n  st_intersects(buffer_1000m, gym)\n)\n```\n:::\n\n\n:::\n\n## 3.2.1 Combining Data-frames\n\nAfter creating the above data-frames (`buffer_200m`, `buffer_500m`, and `buffer_1000m`), we join all of these together to create one data-frame containing all relevant counts.\n\nThe steps are as follows:\n\n-   The first step is to drop the geometry for a data-frame to facilitate the join. As seen below, we do it first for `buffer_1000m` and then combine it with `buffer_200m`. We use the st_drop_geometry() function for this. We select the columns we want to extract from buffer_1000m using the select function as well.\n\n-   Second, we use the left_join() function of dplyr and join `buffer_200m` with `buffer_1000m_no_geom` by using the common keys.\n\n::: note-box\nDo note that the bind_rows() simply stacks these data-frames.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop geometry from `y` and select only the necessary columns\nbuffer_1000m_no_geom <- buffer_1000m %>%\n  st_drop_geometry() %>%\n  select(address, postal, park_pts_count, gym_pts_count, mrt_pts_count)\n\n# Perform a join on the common columns (address and postal)\ncombined_sf <- buffer_200m %>%\n  left_join(buffer_1000m_no_geom, by = c(\"address\", \"postal\"))\n```\n:::\n\n\n\nWe repeat the above steps to join `buffer_500m`. We name the resulting data-frame `points_count` as it contains all relevant point counts that we generated.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_500m_no_geom <- buffer_500m %>%\n  st_drop_geometry() %>%\n  select(address, postal, hawker_pts_count, supermarket_pts_count, childcare_pts_count)\n\n# Perform a join on the common columns (address and postal)\npoints_count <- combined_sf %>%\n  left_join(buffer_500m_no_geom, by = c(\"address\", \"postal\"))\n```\n:::\n\n\n\n## 3.2.2 Distance Matrix\n\nThe next step of our analysis is to determine the proximity of each location to the closest locational factor. The distance will denoted in metres, as Singapores coordinates are projected in SVY21.\n\nThe st_distance() function is applied to determines pairwise distances between points in the two data-frames. After that, we use the apply() function to obtain the minimum distance. This allows us to determine the closest facility to each respective house in our data-frame.\n\n::: panel-tabset\n## Eldercare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all eldercare facilities\ndist_matrix_eldercare <- st_distance(points_count, eldercare)\n# Get the minimum distance for each house\nmin_distances_eldercare <- apply(dist_matrix_eldercare, 1, min)\npoints_count$nearest_eldercare_dist <- min_distances_eldercare\n```\n:::\n\n\n\n## Childcare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_childcare <- st_distance(points_count, childcare)\n# Get the minimum distance for each house\nmin_distances_childcare <- apply(dist_matrix_childcare, 1, min)\npoints_count$nearest_childcare_dist <- min_distances_childcare\n```\n:::\n\n\n\n## MRT\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_mrt <- st_distance(points_count, mrt)\n# Get the minimum distance for each house\nmin_distances_mrt <- apply(dist_matrix_mrt, 1, min)\npoints_count$nearest_mrt_dist <- min_distances_mrt\n```\n:::\n\n\n\n## Bus\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_bus<- st_distance(points_count, bus)\n# Get the minimum distance for each house\nmin_distances_bus <- apply(dist_matrix_bus, 1, min)\npoints_count$nearest_bus_dist <- min_distances_bus\n```\n:::\n\n\n\n## CBD\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_cbd <- st_distance(points_count, cbd)\n# Get the minimum distance for each house\nmin_distances_cbd <- apply(dist_matrix_cbd, 1, min)\npoints_count$nearest_cbd_dist <- min_distances_cbd\n```\n:::\n\n\n\n## CHAS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_chas <- st_distance(points_count, CHAS)\n# Get the minimum distance for each house\nmin_distances_chas <- apply(dist_matrix_chas, 1, min)\npoints_count$nearest_chas_dist <- min_distances_chas\n```\n:::\n\n\n\n## Parks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_parks <- st_distance(points_count, parks)\n# Get the minimum distance for each house\nmin_distances_parks <- apply(dist_matrix_parks, 1, min)\npoints_count$nearest_park_dist <- min_distances_parks\n```\n:::\n\n\n\n## Supermarket\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_supermarket <- st_distance(points_count, supermarket)\n# Get the minimum distance for each house\nmin_distances_supermarket <- apply(dist_matrix_supermarket, 1, min)\npoints_count$nearest_childcare_dist <- min_distances_supermarket\n```\n:::\n\n\n\n## Kindergartens\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_kg <- st_distance(points_count, kindergartens)\n# Get the minimum distance for each house\nmin_distances_kg <- apply(dist_matrix_kg, 1, min)\npoints_count$nearest_kindergarten_dist <- min_distances_kg\n```\n:::\n\n\n\n## Gym\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all houses and all childcare facilities\ndist_matrix_gym <- st_distance(points_count, gym)\n# Get the minimum distance for each house\nmin_distances_gym <- apply(dist_matrix_gym, 1, min)\npoints_count$nearest_gym_dist <- min_distances_gym\n```\n:::\n\n\n:::\n\nWe now create an RDS file using the write_rds() function to facilitate computational efficiency.\n\n::: panel-tabset\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(points_count, 'data/rds/points_count.rds')\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints_count=read_rds('data/rds/points_count.rds')\n```\n:::\n\n\n:::\n\nWe now join `points_count` back with `resale_tidy` in order to have all the details consolidated. We use the left_join() function and join using the common key of address. We will only keep selected rows for our analysis. We name this data-frame `resale_data`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_data= points_count %>%\n  left_join(resale_tidy, by = \"address\")\n```\n:::\n\n\n\nWe can check if the columns have been selected as intended by using the head() function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(resale_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 31267.83 ymin: 31578.89 xmax: 39373.81 ymax: 33878.86\nProjected CRS: SVY21 / Singapore TM\n            address postal bus_pts_count chas_pts_count eldercare_pts_count\n1        1 BEACH RD 190001             3              1                   4\n2        1 BEACH RD 190001             3              1                   4\n3        1 BEACH RD 190001             3              1                   4\n4        1 BEACH RD 190001             3              1                   4\n5 1 BEDOK STH AVE 1 460001             1              1                   0\n6 1 BEDOK STH AVE 1 460001             1              1                   0\n  park_pts_count gym_pts_count mrt_pts_count hawker_pts_count\n1              3             8             3                2\n2              3             8             3                2\n3              3             8             3                2\n4              3             8             3                2\n5              6             1             1                1\n6              6             1             1                1\n  supermarket_pts_count childcare_pts_count nearest_eldercare_dist\n1                     1                   2                 0.0000\n2                     1                   2                 0.0000\n3                     1                   2                 0.0000\n4                     1                   2                 0.0000\n5                     2                   7               139.7537\n6                     2                   7               139.7537\n  nearest_childcare_dist nearest_mrt_dist nearest_bus_dist nearest_cbd_dist\n1                      0         237.9981                0          506.204\n2                      0         237.9981                0          506.204\n3                      0         237.9981                0          506.204\n4                      0         237.9981                0          506.204\n5                      0         327.2657                0         8060.530\n6                      0         327.2657                0         8060.530\n  nearest_chas_dist nearest_park_dist nearest_kindergarten_dist\n1                 0          13.57091                  217.3620\n2                 0          13.57091                  217.3620\n3                 0          13.57091                  217.3620\n4                 0          13.57091                  217.3620\n5                 0         239.50824                  221.8531\n6                 0         239.50824                  221.8531\n  nearest_gym_dist   month            town flat_type block     street_name\n1         335.3991 2023-07 KALLANG/WHAMPOA    3 ROOM     1        BEACH RD\n2         335.3991 2023-12 KALLANG/WHAMPOA    3 ROOM     1        BEACH RD\n3         335.3991 2024-01 KALLANG/WHAMPOA    3 ROOM     1        BEACH RD\n4         335.3991 2024-05 KALLANG/WHAMPOA    3 ROOM     1        BEACH RD\n5         554.4620 2023-04           BEDOK    3 ROOM     1 BEDOK STH AVE 1\n6         554.4620 2023-08           BEDOK    3 ROOM     1 BEDOK STH AVE 1\n  storey_range floor_area_sqm flat_model lease_commence_date    remaining_lease\n1     07 TO 09             74   Improved                1979 55 years 03 months\n2     10 TO 12             68   Improved                1979 54 years 10 months\n3     07 TO 09             68   Improved                1979 54 years 09 months\n4     04 TO 06             68   Improved                1979 54 years 05 months\n5     04 TO 06             59   Improved                1976 51 years 10 months\n6     10 TO 12             59   Improved                1976 51 years 05 months\n  resale_price remaining_lease_yr remaining_lease_mth storey_scale\n1       440000                 55                   3            3\n2       418000                 54                  10            4\n3       440000                 54                   9            3\n4       425000                 54                   5            2\n5       335000                 51                  10            2\n6       370000                 51                   5            4\n  total_remaining_lease                       geometry\n1                   663 POLYGON ((31667.83 31778.89...\n2                   658 POLYGON ((31667.83 31778.89...\n3                   657 POLYGON ((31667.83 31778.89...\n4                   653 POLYGON ((31667.83 31778.89...\n5                   622 POLYGON ((39373.81 33678.86...\n6                   617 POLYGON ((39373.81 33678.86...\n```\n\n\n:::\n:::\n\n\n\n# 3.3 Data Overview\n\n## 3.3.1 Popular Towns\n\nTo determine which region has the most the number of flats sold in our selected time period.\n\nWe must first compute the count, that is total sales, in each town. We do so using the group_by() and summarise() function of the dplyr package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntown_sales_count <- resale_data %>%\n  group_by(town) %>%\n  summarize(sales_count = n())\n```\n:::\n\n\n\nTo determine the top region we simply implement the filter() function as in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_region <- town_sales_count %>%\n  filter(sales_count == max(sales_count))\n(top_region)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 34120.85 ymin: 41356.12 xmax: 37815.35 ymax: 44133.95\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1 × 3\n  town    sales_count                                                   geometry\n* <chr>         <int>                                              <POLYGON [m]>\n1 PUNGGOL        3446 ((34342.41 42405.26, 34331.94 42405.54, 34321.5 42406.36,…\n```\n\n\n:::\n:::\n\n\n\nPunggol appears the region with the most sales at just over 3400 sales in the selected time period.\n\nWe implement the **tmap** package to generate a map to help us visualize the sales count across all towns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(town_sales_count) +\n  tm_polygons(\"sales_count\", \n              title = \"Sales Count\",\n              palette = \"Reds\",\n              style = \"jenks\") +\n  tm_layout(title = \"Sales Count by Town\")+\n  tmap_options(check.and.fix = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\nEastern Singapore, regions such as Punggol, Sengkang, and Tampines appear to have the most sales. The Central and Western Region are relatively mild compared to Northern and Eastern Singapore in terms of sales count.\n\n## 3.3.2 Price Trends\n\nWe want to gain an idea of the price trends across the different regions across the nation.\n\nTo do this, an average must be computed. We do so by implementing the group_by() and summarise() functions of the dplyr package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntown_avg <- resale_data %>%\n  group_by(town) %>%\n  summarize(avg_resale_price = mean(resale_price, na.rm = TRUE))\n```\n:::\n\n\n\nNow that this has been computed, we can join it back with `resale_data` so that we can map it using the **tmap** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n\ntm_shape(town_avg) +\n  tm_polygons(\"avg_resale_price\", \n              title = \"Average Resale Price\",\n              palette = \"Blues\",     \n              style = \"jenks\") +  \n  tm_layout(title = \"Average Resale Price by Town\")+\n  tmap_options(check.and.fix = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n\nWe infer from the above that the Western region, towns like Jurong West, in particular seems to relatively cheaper compared to the rest of the towns.\n\nThe central region in particular, unsurprisingly, seems to have the highest resale price on average. This could be due to a variety of factors such as its proximity to the CBD, national hospitals etc.\n\n::: note-box\nDo note that we are focusing on 3/4/5 room flats and hence there are a few empty regions, as seen in the map above.\n:::\n\n## 3.3.3 Does the level at which the apartment is on impact its price?\n\nWe are interested to determine whether or not the level impacts floor pricing, that is whether an apartment on level 13 is more expensive than an apartment on level 5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(resale_data, aes(x = factor(storey_scale), y = resale_price)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\", outlier.color = \"red\") +\n  labs(\n    title = \"Resale Price Variation by Storey Scale\",\n    x = \"Storey Scale\",\n    y = \"Resale Price\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n\nWe see a clear rise in flat prices they higher the level the flat is on, a pretty significant increase at every level.\n\nWe will keep an eye on this when creating the predictive model,\n\n# 3.4 Predictive Models\n\n## 3.4.1 Correlation\n\nThe key step that **MUST** be done before building a predictive model of any sort is to check for multicollinearity.\n\nFor this, we will also drop geometry using the st_drop_geometry() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_nogeo <- resale_data %>%\n  st_drop_geometry()\ncorrplot::corrplot(cor(resale_nogeo[, c(3:18, 27, 34:35)]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\",\n                   number.cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsapply(resale_nogeo[, c(3:18, 27, 34:35)], class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         bus_pts_count         chas_pts_count    eldercare_pts_count \n             \"integer\"              \"integer\"              \"integer\" \n        park_pts_count          gym_pts_count          mrt_pts_count \n             \"integer\"              \"integer\"              \"integer\" \n      hawker_pts_count  supermarket_pts_count    childcare_pts_count \n             \"integer\"              \"integer\"              \"integer\" \nnearest_eldercare_dist nearest_childcare_dist       nearest_mrt_dist \n             \"numeric\"              \"numeric\"              \"numeric\" \n      nearest_bus_dist       nearest_cbd_dist      nearest_chas_dist \n             \"numeric\"              \"numeric\"              \"numeric\" \n     nearest_park_dist         floor_area_sqm           storey_scale \n             \"numeric\"              \"numeric\"              \"numeric\" \n total_remaining_lease \n             \"numeric\" \n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(resale_nogeo[[35]]))  # Count of NA values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.infinite(resale_nogeo[[35]]))  # Count of Inf values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nFrom the above, we infer that there is no collinearity issue that could impact our model negatively.\n\n::: insights-box\nDespite there being a few values of magnitude \\>0.5, this is not enough to make us drop the predictor. Generally, it is a matter of concern if the value is above 0.8.\n:::\n\n## 3.4.2 Hedonic Pricing Model\n\nHedonic pricing modeling is an econometric technique used to estimate the value of a good or service by breaking down the price into its component attributes. Commonly applied in real estate, it involves analyzing how individual factors such as location, size, amenities, or proximity to schools influence the overall market price of a property. This model helps in understanding how much each characteristic contributes to the price, separating the effect of specific features from the overall value.\n\nWe implement the lm() function of base R to build hedonic pricing models for condominium resale units.\n\nFirst and foremost, we noticed that the geometry is in polygon form. We will implement the st_centroid() function of the sf package to convert this into point form as shown in the below code chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_data=st_centroid(resale_data)\n```\n:::\n\n\n\nWe start off by filtering the data to include only the relevant columns for our analysis, including filtering out all data for the year 2024 as we are to train the model using 2023 data.\n\nWe will change the order of columns in the resulting data-sets too to facilitate easier reading.\n\n::: panel-tabset\n## 2023\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter out 2024\nresale_2023=resale_data%>%\n  filter(month<=\"2023-12\")%>%\n  select(3:20,27,31, 34:35)\n\n# Reorder Cols\nresale_2023=resale_2023[, c(22:1,23)]\n```\n:::\n\n\n\n## 2024\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter out 2023\nresale_2024=resale_data%>%\n  filter(month>=\"2024-07\" & month<=\"2024-09\")%>%\n  select(3:20,27,31, 34:35)\n\n# Reorder Cols\nresale_2024=resale_2024[, c(22:1,23)]\n```\n:::\n\n\n:::\n\nNow that we have checked for multicollinearity and created the required data-frame, we proceed with creating the predictive model.\n\nTo build a hedonic model, we simply apply the lm() function as mentioned earlier.\n\nThe below code chunk shows the implementation.\n\n::: panel-tabset\n## MLR\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb.mlr <- lm(formula = resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm + nearest_gym_dist + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + childcare_pts_count + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count\n, \n                data=resale_2023)\nsummary(hdb.mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ total_remaining_lease + storey_scale + \n    floor_area_sqm + nearest_gym_dist + nearest_kindergarten_dist + \n    nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + \n    nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + \n    nearest_eldercare_dist + childcare_pts_count + supermarket_pts_count + \n    hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + \n    eldercare_pts_count + chas_pts_count + bus_pts_count, data = resale_2023)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-369313  -42975   -5377   35844  495189 \n\nCoefficients:\n                            Estimate Std. Error  t value Pr(>|t|)    \n(Intercept)               -2.044e+05  4.016e+03  -50.905  < 2e-16 ***\ntotal_remaining_lease      4.609e+02  2.929e+00  157.364  < 2e-16 ***\nstorey_scale               1.567e+04  2.312e+02   67.760  < 2e-16 ***\nfloor_area_sqm             5.334e+03  2.393e+01  222.915  < 2e-16 ***\nnearest_gym_dist          -1.127e+00  6.509e-01   -1.731  0.08345 .  \nnearest_kindergarten_dist -2.628e+01  2.928e+00   -8.976  < 2e-16 ***\nnearest_park_dist         -1.640e+01  1.252e+00  -13.098  < 2e-16 ***\nnearest_chas_dist          4.224e+01  6.664e+00    6.339 2.36e-10 ***\nnearest_cbd_dist          -1.740e+01  1.632e-01 -106.583  < 2e-16 ***\nnearest_bus_dist          -7.404e+01  3.278e+01   -2.259  0.02391 *  \nnearest_mrt_dist          -5.559e+01  1.562e+00  -35.590  < 2e-16 ***\nnearest_childcare_dist     3.961e+01  3.760e+00   10.533  < 2e-16 ***\nnearest_eldercare_dist    -1.204e+01  8.543e-01  -14.089  < 2e-16 ***\nchildcare_pts_count        8.917e+01  1.022e+02    0.872  0.38304    \nsupermarket_pts_count      8.133e+03  3.937e+02   20.657  < 2e-16 ***\nhawker_pts_count           3.005e+03  6.881e+02    4.366 1.27e-05 ***\nmrt_pts_count             -8.003e+03  2.357e+02  -33.949  < 2e-16 ***\ngym_pts_count              6.371e+03  2.440e+02   26.116  < 2e-16 ***\npark_pts_count             9.779e+02  2.103e+02    4.649 3.35e-06 ***\neldercare_pts_count       -6.600e+03  1.048e+03   -6.297 3.09e-10 ***\nchas_pts_count             4.053e+03  3.493e+02   11.602  < 2e-16 ***\nbus_pts_count             -9.146e+02  3.106e+02   -2.944  0.00324 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 65330 on 23533 degrees of freedom\nMultiple R-squared:  0.8349,\tAdjusted R-squared:  0.8347 \nF-statistic:  5666 on 21 and 23533 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nThe above output must be analysed carefully as it provides a lot of details.\n\n-   This model accounts for just under 84% of total variation in resale price of HDB flats in 2023.\n-   All but 2 variables are significant at the 5% significance level- `childcare_pts_count` and `nearest_gym_dist`.\n-   The model is statistically significant.\n\n## OLS\n\nWe first remove out the two insignifcant variables.\n\nFollowing that we create another model and then implement the ols_regress() function to produce a high quality output table to facilitate easier understanding.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb.mlr1= lm(formula = resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count\n, \n                data=resale_2023)\n\nolsrr::ols_regress(hdb.mlr1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.914       RMSE                    65303.141 \nR-Squared                   0.835       MSE                4268124214.448 \nAdj. R-Squared              0.835       Coef. Var                  11.610 \nPred R-Squared              0.834       AIC                    589187.126 \nMAE                     49424.028       SBC                    589356.535 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares           DF       Mean Square       F          Sig. \n--------------------------------------------------------------------------------\nRegression    5.078066e+14           19      2.672666e+13    6261.922    0.0000 \nResidual      1.004503e+14        23535    4268124214.448                       \nTotal         6.082569e+14        23554                                         \n--------------------------------------------------------------------------------\n\n                                                  Parameter Estimates                                                   \n-----------------------------------------------------------------------------------------------------------------------\n                    model           Beta    Std. Error    Std. Beta       t         Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------------\n              (Intercept)    -203597.900      3946.042                  -51.595    0.000    -211332.398    -195863.402 \n    total_remaining_lease        459.308         2.812        0.525     163.355    0.000        453.797        464.819 \n             storey_scale      15677.553       231.213        0.198      67.806    0.000      15224.362      16130.745 \n           floor_area_sqm       5339.281        23.758        0.632     224.738    0.000       5292.714       5385.848 \nnearest_kindergarten_dist        -26.958         2.881       -0.026      -9.357    0.000        -32.605        -21.311 \n        nearest_park_dist        -16.227         1.249       -0.044     -12.993    0.000        -18.675        -13.779 \n        nearest_chas_dist         42.466         6.663        0.021       6.374    0.000         29.407         55.526 \n         nearest_cbd_dist        -17.437         0.158       -0.426    -110.551    0.000        -17.746        -17.128 \n         nearest_bus_dist        -73.651        32.765       -0.006      -2.248    0.025       -137.872         -9.429 \n         nearest_mrt_dist        -55.735         1.560       -0.121     -35.734    0.000        -58.792        -52.677 \n   nearest_childcare_dist         39.643         3.759        0.036      10.547    0.000         32.276         47.010 \n   nearest_eldercare_dist        -12.528         0.812       -0.048     -15.428    0.000        -14.120        -10.936 \n    supermarket_pts_count       8076.802       386.798        0.065      20.881    0.000       7318.653       8834.952 \n         hawker_pts_count       3054.745       687.479        0.015       4.443    0.000       1707.243       4402.248 \n            mrt_pts_count      -8014.650       230.731       -0.122     -34.736    0.000      -8466.897      -7562.403 \n            gym_pts_count       6464.555       234.936        0.083      27.516    0.000       6004.066       6925.044 \n           park_pts_count        995.515       210.156        0.017       4.737    0.000        583.596       1407.434 \n      eldercare_pts_count      -6761.275      1044.356       -0.019      -6.474    0.000      -8808.279      -4714.270 \n           chas_pts_count       4085.661       348.576        0.035      11.721    0.000       3402.429       4768.893 \n            bus_pts_count       -850.531       308.901       -0.008      -2.753    0.006      -1455.996       -245.065 \n-----------------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n::: insights-box\nAnother thing that the ols package lets you do is check the VIF, which is another way to check multicollinearity. **If the VIF value is 10 or higher**, that is when we must be concerned with regards to multicollinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolsrr::ols_vif_tol(hdb.mlr1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   Variables Tolerance      VIF\n1      total_remaining_lease 0.6801054 1.470360\n2               storey_scale 0.8264316 1.210022\n3             floor_area_sqm 0.8863485 1.128224\n4  nearest_kindergarten_dist 0.9395810 1.064304\n5          nearest_park_dist 0.6156988 1.624171\n6          nearest_chas_dist 0.6727964 1.486334\n7           nearest_cbd_dist 0.4719791 2.118738\n8           nearest_bus_dist 0.8479954 1.179252\n9           nearest_mrt_dist 0.6105314 1.637917\n10    nearest_childcare_dist 0.6082884 1.643957\n11    nearest_eldercare_dist 0.7341674 1.362087\n12     supermarket_pts_count 0.7272130 1.375113\n13          hawker_pts_count 0.6531755 1.530982\n14             mrt_pts_count 0.5682836 1.759685\n15             gym_pts_count 0.7651070 1.307007\n16            park_pts_count 0.5726813 1.746172\n17       eldercare_pts_count 0.8578425 1.165715\n18            chas_pts_count 0.7931092 1.260860\n19             bus_pts_count 0.8151291 1.226799\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n### 3.4.1.1 Spatial Autocorrelation\n\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\n\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\n\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr.output <- as.data.frame(hdb.mlr1$residuals)\n```\n:::\n\n\n\nNext, we will join the newly created data frame with `resale_data` object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale.res.sf <- cbind(resale_2023, \n                        hdb.mlr1$residuals) %>%\nrename(`MLR_RES` = `hdb.mlr1.residuals`)\n```\n:::\n\n\n\nNext, we will convert `hdb_resale.res.sf` from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\n\nThe code chunk below will be used to perform the data conversion process.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale.sp <- as_Spatial(hdb_resale.res.sf)\nhdb_resale.sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 23555 \nextent      : 11397.31, 45392.3, 27897.64, 48941.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : total_remaining_lease, storey_scale, resale_price, floor_area_sqm, nearest_gym_dist, nearest_kindergarten_dist, nearest_park_dist, nearest_chas_dist, nearest_cbd_dist, nearest_bus_dist, nearest_mrt_dist, nearest_childcare_dist, nearest_eldercare_dist, childcare_pts_count, supermarket_pts_count, ... \nmin values  :                   505,            1,       150000,             52,                0,                         0,                 0,                 0,                0,                0,                0,                      0,                      0,                   0,                     0, ... \nmax values  :                  1154,           17,      1500000,            176,  4343.0405974637,          2967.56328554691,   2211.7822280043,  2512.20838763233, 17054.6103741159,  191.53318513933, 3292.27569241822,       3125.45180974505,       4567.54414612513,                  44,                    10, ... \n```\n\n\n:::\n:::\n\n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(hdb_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\nThere appears to be some clustering. In order to definitively determine whether there is spatial autocorrelation, we implement the Moran's Test.\n\n-   H0: There is no signs of spatial autocorrelation. Observed patterns are due to complete spatial randomness.\n-   H1: There are signs of spatial autocorrelation.\n\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb <- dnearneigh(coordinates(hdb_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(nb, 'data/rds/nb.rds')\n```\n:::\n\n\n\n## Read RDS Files\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb=read_rds('data/rds/nb.rds')\n```\n:::\n\n\n:::\n\nNext, the nb2listw() function of the spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_lw <- nb2listw(nb, style = 'W')\n```\n:::\n\n\n\n## Summary\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nb_lw)\n```\n:::\n\n\n:::\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.morantest(hdb.mlr1, nb_lw)\n```\n:::\n\n\n\n![](images/Screenshot%202024-11-09%20160250.png)\n\nFrom the above output, we can infer that the spatial autocorrelation is statistically significant at the 5% significance level. We have sufficient evidence to reject the null hypothesis and conclude that there indeed signs of spatial clustering.\n\nA value of 577.78 indicates that the observed pattern is very unlikely to be observed due to random chance.\n\nThe observed Moran I of approximately 0.2 indicates that there is **weak to moderate** positive spatial autocorrelation.\n\n### 3.4.2.1 Hedonic Pricing Model using GWModel (Adaptive Bandwidth Method)\n\n#### 3.4.2.1.1 Computing Adaptive Bandwidth\n\nIn the code chunk below, the bw.gwr() function of the GWModel package is used to determine the bandwidth to use in the model.\n\n::: insights-box\nAdopting the GWmodel approach provides is better for hedonic pricing models because it captures local variations, improves predictive accuracy, accommodates spatial non-stationarity, and offers rich spatial insights through visualization.\n\nThese benefits make it particularly suited for real estate markets, where location-specific attributes are crucial determinants of property prices, as in the study that we are conducting with regards to HDB flat resale prices in Singapore.\n:::\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.adaptive=bw.gwr(formula = resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n                   data=hdb_resale.sp,\n                   approach = 'CV',\n                   kernel = 'gaussian',\n                   adaptive = TRUE,\n                   longlat = FALSE)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw.adaptive, 'data/rds/bw_adaptive.rds')\n```\n:::\n\n\n\n## Load RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.adaptive=read_rds('data/rds/bw_adaptive.rds')\n```\n:::\n\n\n:::\n\nThe adaptive bandwidth has been determined to be 92. We will use this value to calibrate the gwr-based hedonic pricing model.\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.adaptive <- gwr.basic(formula = resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n                   data=hdb_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nwrite_rds(gwr.adaptive, 'data/rds/gwr_adapt.rds')\n```\n:::\n\n\n\nThe code chunk below can be used to display the model output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.adaptive=read_rds('data/rds/gwr_adapt.rds')\ngwr.adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-08 08:33:13.835072 \n   Call:\n   gwr.basic(formula = resale_price ~ total_remaining_lease + storey_scale + \n    floor_area_sqm + nearest_kindergarten_dist + nearest_park_dist + \n    nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + \n    nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + \n    supermarket_pts_count + hawker_pts_count + mrt_pts_count + \n    gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + \n    bus_pts_count, data = hdb_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  total_remaining_lease storey_scale floor_area_sqm nearest_kindergarten_dist nearest_park_dist nearest_chas_dist nearest_cbd_dist nearest_bus_dist nearest_mrt_dist nearest_childcare_dist nearest_eldercare_dist supermarket_pts_count hawker_pts_count mrt_pts_count gym_pts_count park_pts_count eldercare_pts_count chas_pts_count bus_pts_count\n   Number of data points: 23555\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-368270  -42963   -5454   35907  495600 \n\n   Coefficients:\n                               Estimate Std. Error  t value Pr(>|t|)    \n   (Intercept)               -2.036e+05  3.946e+03  -51.595  < 2e-16 ***\n   total_remaining_lease      4.593e+02  2.812e+00  163.355  < 2e-16 ***\n   storey_scale               1.568e+04  2.312e+02   67.806  < 2e-16 ***\n   floor_area_sqm             5.339e+03  2.376e+01  224.738  < 2e-16 ***\n   nearest_kindergarten_dist -2.696e+01  2.881e+00   -9.357  < 2e-16 ***\n   nearest_park_dist         -1.623e+01  1.249e+00  -12.993  < 2e-16 ***\n   nearest_chas_dist          4.247e+01  6.663e+00    6.374 1.88e-10 ***\n   nearest_cbd_dist          -1.744e+01  1.577e-01 -110.551  < 2e-16 ***\n   nearest_bus_dist          -7.365e+01  3.277e+01   -2.248   0.0246 *  \n   nearest_mrt_dist          -5.573e+01  1.560e+00  -35.734  < 2e-16 ***\n   nearest_childcare_dist     3.964e+01  3.759e+00   10.547  < 2e-16 ***\n   nearest_eldercare_dist    -1.253e+01  8.120e-01  -15.428  < 2e-16 ***\n   supermarket_pts_count      8.077e+03  3.868e+02   20.881  < 2e-16 ***\n   hawker_pts_count           3.055e+03  6.875e+02    4.443 8.90e-06 ***\n   mrt_pts_count             -8.015e+03  2.307e+02  -34.736  < 2e-16 ***\n   gym_pts_count              6.465e+03  2.349e+02   27.516  < 2e-16 ***\n   park_pts_count             9.955e+02  2.102e+02    4.737 2.18e-06 ***\n   eldercare_pts_count       -6.761e+03  1.044e+03   -6.474 9.73e-11 ***\n   chas_pts_count             4.086e+03  3.486e+02   11.721  < 2e-16 ***\n   bus_pts_count             -8.505e+02  3.089e+02   -2.753   0.0059 ** \n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 65330 on 23535 degrees of freedom\n   Multiple R-squared: 0.8349\n   Adjusted R-squared: 0.8347 \n   F-statistic:  6262 on 19 and 23535 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 1.004503e+14\n   Sigma(hat): 65305.91\n   AIC:  589187.1\n   AICc:  589187.2\n   BIC:  566012.9\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 92 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                    Min.     1st Qu.      Median     3rd Qu.\n   Intercept                 -6.0447e+07 -5.7658e+05 -2.9193e+05  1.5385e+04\n   total_remaining_lease     -2.1867e+03  3.1391e+02  4.3552e+02  5.7160e+02\n   storey_scale               3.9638e+03  1.0427e+04  1.2493e+04  1.4685e+04\n   floor_area_sqm             2.9550e+03  4.4388e+03  5.2097e+03  6.3082e+03\n   nearest_kindergarten_dist -7.6004e+02 -3.4989e+01  1.1502e+01  5.9307e+01\n   nearest_park_dist         -2.5185e+03 -5.4680e+01 -1.3168e+01  2.3976e+01\n   nearest_chas_dist         -1.2685e+04 -1.0022e+02 -1.2491e+01  7.9737e+01\n   nearest_cbd_dist          -1.8287e+03 -3.6244e+01 -8.0689e+00  2.1907e+01\n   nearest_bus_dist          -5.2268e+04 -3.6632e+02 -4.7123e+01  3.2595e+02\n   nearest_mrt_dist          -1.1221e+03 -8.7319e+01 -4.9292e+01 -5.1243e+00\n   nearest_childcare_dist    -3.1126e+03 -7.2903e+01 -1.1614e+01  4.9044e+01\n   nearest_eldercare_dist    -1.8161e+03 -4.1556e+01  1.3129e+00  4.2830e+01\n   supermarket_pts_count     -3.9322e+04 -2.8775e+03  1.4265e+03  5.2768e+03\n   hawker_pts_count          -8.3780e+06 -6.5949e+03  3.4557e+03  1.7893e+04\n   mrt_pts_count             -2.7134e+05 -6.1669e+03  3.4766e+02  6.0372e+03\n   gym_pts_count             -2.2739e+06 -3.3798e+03  6.6034e+03  1.8959e+04\n   park_pts_count            -2.3557e+05 -6.9592e+03 -8.1926e+02  5.6725e+03\n   eldercare_pts_count       -2.6027e+06 -1.3383e+04 -3.5345e+03  7.7470e+03\n   chas_pts_count            -3.2301e+04 -1.5971e+03  9.4891e+02  3.4014e+03\n   bus_pts_count             -6.3522e+04 -1.6689e+03  2.1774e+02  2.6510e+03\n                                   Max.\n   Intercept                 19242493.3\n   total_remaining_lease         1197.3\n   storey_scale                 24711.6\n   floor_area_sqm               11560.4\n   nearest_kindergarten_dist     1881.3\n   nearest_park_dist             2452.5\n   nearest_chas_dist             7087.8\n   nearest_cbd_dist              6990.2\n   nearest_bus_dist             89747.2\n   nearest_mrt_dist              4035.8\n   nearest_childcare_dist       14299.1\n   nearest_eldercare_dist        1701.4\n   supermarket_pts_count        90472.1\n   hawker_pts_count           1257388.2\n   mrt_pts_count               392945.6\n   gym_pts_count              6811961.3\n   park_pts_count              286344.4\n   eldercare_pts_count        1494614.5\n   chas_pts_count               99874.4\n   bus_pts_count                28085.5\n   ************************Diagnostic information*************************\n   Number of data points: 23555 \n   Effective number of parameters (2trace(S) - trace(S'S)): 2281.846 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 21273.15 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 558552.4 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 556427 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 549360.9 \n   Residual sum of squares: 2.318373e+13 \n   R-square value:  0.961885 \n   Adjusted R-square value:  0.9577964 \n\n   ***********************************************************************\n   Program stops at: 2024-11-08 08:46:54.422807 \n```\n\n\n:::\n:::\n\n\n\n#### 3.4.2.2 Visualizing GWR Output\n\nIn addition to the regression residuals, the output feature class table provides several key metrics, including observed and predicted values, the condition number (cond), Local R², residuals, and the coefficients with their standard errors for the explanatory variables:\n\n-   Condition Number: This diagnostic assesses local collinearity. When strong local collinearity is present, model results become unstable. A condition number greater than 30 suggests that the results may be unreliable due to multicollinearity.\n\n-   Local R²: Values range from 0.0 to 1.0 and indicate the goodness-of-fit of the local regression model. Low Local R² values signal poor model performance in those regions. Mapping these values can help identify areas where the Geographically Weighted Regression (GWR) model is performing well and where it is underperforming, potentially highlighting missing or unaccounted-for variables.\n\n-   Predicted Values: These are the fitted y values estimated by the GWR model.\n\n-   Residuals: Residuals are calculated by subtracting the fitted y values from the observed y values. Standardized residuals have a mean of zero and a standard deviation of one. A gradient map (cold-to-hot) of standardized residuals can be created to visualize areas of model under- or overestimation.\n\n-   Coefficient Standard Errors: These values reflect the reliability of each coefficient estimate. Smaller standard errors relative to the actual coefficients indicate higher confidence in the estimates. Large standard errors, however, may suggest issues with local collinearity.\n\nAll of these metrics are stored within a SpatialPointsDataFrame or SpatialPolygonsDataFrame object, integrated with the fit points, GWR coefficient estimates, observed and predicted y values, coefficient standard errors, and t-values in the “data” slot of an object called SDF within the output list.\n\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\nhdb_resale.sf.adaptive.svy21 <- st_transform(hdb_resale.sf.adaptive, 3414)\nhdb_resale.sf.adaptive.svy21  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 23555 features and 66 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 11397.31 ymin: 27897.64 xmax: 45392.3 ymax: 48941.06\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept total_remaining_lease storey_scale floor_area_sqm\n1  -553100.60              611.1439     16528.55       7039.609\n2  -553100.60              611.1439     16528.55       7039.609\n3   -97588.24              602.8097     13177.05       5746.557\n4   -97588.24              602.8097     13177.05       5746.557\n5  -738024.80              525.4686     10816.54       4788.974\n6  -293788.18              468.0133     11290.74       4687.995\n7  -293788.18              468.0133     11290.74       4687.995\n8  -511883.91              490.0543     14610.28       8839.442\n9  -511883.91              490.0543     14610.28       8839.442\n10 -511883.91              490.0543     14610.28       8839.442\n   nearest_kindergarten_dist nearest_park_dist nearest_chas_dist\n1                 -62.793028         37.329660         373.80842\n2                 -62.793028         37.329660         373.80842\n3                  -3.561761         30.057517          50.12696\n4                  -3.561761         30.057517          50.12696\n5                  11.086781         44.895188        -213.86965\n6                  -3.300683          6.976281          41.21432\n7                  -3.300683          6.976281          41.21432\n8                 252.971732       -102.994175        -217.84419\n9                 252.971732       -102.994175        -217.84419\n10                252.971732       -102.994175        -217.84419\n   nearest_cbd_dist nearest_bus_dist nearest_mrt_dist nearest_childcare_dist\n1         -5.551977        -64.24159       -140.57783             -123.04808\n2         -5.551977        -64.24159       -140.57783             -123.04808\n3        -43.833519        133.70031        -64.21593              -93.20306\n4        -43.833519        133.70031        -64.21593              -93.20306\n5         49.950660         54.10010        -70.22580             -113.69326\n6         -4.356659        -95.23313        -56.52733               17.48012\n7         -4.356659        -95.23313        -56.52733               17.48012\n8        -62.953835        630.03227        -28.06152              -50.72489\n9        -62.953835        630.03227        -28.06152              -50.72489\n10       -62.953835        630.03227        -28.06152              -50.72489\n   nearest_eldercare_dist supermarket_pts_count hawker_pts_count mrt_pts_count\n1               15.552703             -3685.119        13749.049     -2256.093\n2               15.552703             -3685.119        13749.049     -2256.093\n3               39.412804             -6401.161         1228.572     13554.838\n4               39.412804             -6401.161         1228.572     13554.838\n5               12.306568              4460.402       -15935.464     26482.072\n6                1.465535              4054.291        27610.985     -9804.357\n7                1.465535              4054.291        27610.985     -9804.357\n8              -64.075280              1672.093         7084.041     -6009.851\n9              -64.075280              1672.093         7084.041     -6009.851\n10             -64.075280              1672.093         7084.041     -6009.851\n   gym_pts_count park_pts_count eldercare_pts_count chas_pts_count\n1      2463.1645     11519.3488         -7900.60200       1311.954\n2      2463.1645     11519.3488         -7900.60200       1311.954\n3     31287.7213       905.5127         14847.12897      -3505.091\n4     31287.7213       905.5127         14847.12897      -3505.091\n5    -15692.3884      4250.2360         17866.31069      -8240.146\n6     14551.3298      5332.2934            79.49318       5587.964\n7     14551.3298      5332.2934            79.49318       5587.964\n8       408.1617      1653.0821        -11085.20901       1051.745\n9       408.1617      1653.0821        -11085.20901       1051.745\n10      408.1617      1653.0821        -11085.20901       1051.745\n   bus_pts_count      y     yhat   residual CV_Score Stud_residual Intercept_SE\n1      8083.8068 440000 438463.7   1536.325        0    0.04888348    12690.500\n2      8083.8068 418000 409698.8   8301.155        0    0.26397059    12690.500\n3     -3902.9116 335000 311634.1  23365.942        0    0.74300559    84141.838\n4     -3902.9116 370000 334974.1  35025.900        0    1.11921027    84141.838\n5      -589.0293 637000 708169.4 -71169.399        0   -2.50213106   159720.262\n6      2901.6799 315000 305554.2   9445.808        0    0.32084739     6776.685\n7      2901.6799 358000 354782.1   3217.930        0    0.10929477     6776.685\n8     20150.3385 860000 890362.3 -30362.267        0   -0.98274551    22062.520\n9     20150.3385 988000 990184.0  -2183.980        0   -0.07195425    22062.520\n10    20150.3385 938000 902032.2  35967.776        0    1.16235362    22062.520\n   total_remaining_lease_SE storey_scale_SE floor_area_sqm_SE\n1                  7.811053        572.9566          71.35533\n2                  7.811053        572.9566          71.35533\n3                 15.243877       1239.7483         113.17417\n4                 15.243877       1239.7483         113.17417\n5                 21.876627       1859.1527         141.45594\n6                  4.464208        408.4014          32.87683\n7                  4.464208        408.4014          32.87683\n8                 12.631774        719.2308         100.67053\n9                 12.631774        719.2308         100.67053\n10                12.631774        719.2308         100.67053\n   nearest_kindergarten_dist_SE nearest_park_dist_SE nearest_chas_dist_SE\n1                     10.540209             7.947029            35.254242\n2                     10.540209             7.947029            35.254242\n3                     25.642343            17.373349            64.479705\n4                     25.642343            17.373349            64.479705\n5                     29.577383            16.742884            97.852704\n6                      4.252736             2.414521             9.307702\n7                      4.252736             2.414521             9.307702\n8                     24.202820            11.431423            52.430171\n9                     24.202820            11.431423            52.430171\n10                    24.202820            11.431423            52.430171\n   nearest_cbd_dist_SE nearest_bus_dist_SE nearest_mrt_dist_SE\n1            2.0253650           114.48248            5.687046\n2            2.0253650           114.48248            5.687046\n3            9.3520394           137.14370           12.993674\n4            9.3520394           137.14370           12.993674\n5           19.2253880           265.51436           20.068963\n6            0.4098527            37.08575            2.371249\n7            0.4098527            37.08575            2.371249\n8           11.5589827           228.89004           13.045566\n9           11.5589827           228.89004           13.045566\n10          11.5589827           228.89004           13.045566\n   nearest_childcare_dist_SE nearest_eldercare_dist_SE supermarket_pts_count_SE\n1                  14.090197                  3.933301                 1301.525\n2                  14.090197                  3.933301                 1301.525\n3                  29.215758                 16.123411                 2880.312\n4                  29.215758                 16.123411                 2880.312\n5                  40.596640                 21.683112                 3150.926\n6                   5.840977                  1.411733                  520.767\n7                   5.840977                  1.411733                  520.767\n8                  36.456165                 34.236870                 2564.355\n9                  36.456165                 34.236870                 2564.355\n10                 36.456165                 34.236870                 2564.355\n   hawker_pts_count_SE mrt_pts_count_SE gym_pts_count_SE park_pts_count_SE\n1             2018.307        1034.2588         662.6568          925.3280\n2             2018.307        1034.2588         662.6568          925.3280\n3             3782.428        3365.4376        6439.1582          988.5184\n4             3782.428        3365.4376        6439.1582          988.5184\n5             5849.089        6196.6864        6848.9591         2491.7655\n6             1267.753         279.1408         536.2942          327.2380\n7             1267.753         279.1408         536.2942          327.2380\n8             2803.455        3058.3860         947.1786         3336.1993\n9             2803.455        3058.3860         947.1786         3336.1993\n10            2803.455        3058.3860         947.1786         3336.1993\n   eldercare_pts_count_SE chas_pts_count_SE bus_pts_count_SE Intercept_TV\n1                2256.121          863.1553        1159.1979   -43.583831\n2                2256.121          863.1553        1159.1979   -43.583831\n3                7202.088         1735.1308        1588.6310    -1.159806\n4                7202.088         1735.1308        1588.6310    -1.159806\n5                8169.242         2396.6246        1861.6468    -4.620734\n6                1776.533          502.6136         428.4428   -43.352785\n7                1776.533          502.6136         428.4428   -43.352785\n8                2765.543         1550.1835        2031.8621   -23.201516\n9                2765.543         1550.1835        2031.8621   -23.201516\n10               2765.543         1550.1835        2031.8621   -23.201516\n   total_remaining_lease_TV storey_scale_TV floor_area_sqm_TV\n1                  78.24092       28.847815          98.65569\n2                  78.24092       28.847815          98.65569\n3                  39.54438       10.628807          50.77622\n4                  39.54438       10.628807          50.77622\n5                  24.01964        5.817994          33.85488\n6                 104.83680       27.646178         142.59268\n7                 104.83680       27.646178         142.59268\n8                  38.79537       20.313763          87.80566\n9                  38.79537       20.313763          87.80566\n10                 38.79537       20.313763          87.80566\n   nearest_kindergarten_dist_TV nearest_park_dist_TV nearest_chas_dist_TV\n1                    -5.9574747             4.697310           10.6032184\n2                    -5.9574747             4.697310           10.6032184\n3                    -0.1389015             1.730093            0.7774067\n4                    -0.1389015             1.730093            0.7774067\n5                     0.3748398             2.681449           -2.1856285\n6                    -0.7761317             2.889302            4.4279799\n7                    -0.7761317             2.889302            4.4279799\n8                    10.4521594            -9.009742           -4.1549395\n9                    10.4521594            -9.009742           -4.1549395\n10                   10.4521594            -9.009742           -4.1549395\n   nearest_cbd_dist_TV nearest_bus_dist_TV nearest_mrt_dist_TV\n1            -2.741223          -0.5611478          -24.718956\n2            -2.741223          -0.5611478          -24.718956\n3            -4.687055           0.9748921           -4.942092\n4            -4.687055           0.9748921           -4.942092\n5             2.598161           0.2037558           -3.499224\n6           -10.629816          -2.5679166          -23.838632\n7           -10.629816          -2.5679166          -23.838632\n8            -5.446313           2.7525543           -2.151039\n9            -5.446313           2.7525543           -2.151039\n10           -5.446313           2.7525543           -2.151039\n   nearest_childcare_dist_TV nearest_eldercare_dist_TV supermarket_pts_count_TV\n1                  -8.732886                 3.9541098               -2.8313865\n2                  -8.732886                 3.9541098               -2.8313865\n3                  -3.190164                 2.4444457               -2.2223846\n4                  -3.190164                 2.4444457               -2.2223846\n5                  -2.800558                 0.5675647                1.4155844\n6                   2.992670                 1.0381109                7.7852300\n7                   2.992670                 1.0381109                7.7852300\n8                  -1.391394                -1.8715286                0.6520522\n9                  -1.391394                -1.8715286                0.6520522\n10                 -1.391394                -1.8715286                0.6520522\n   hawker_pts_count_TV mrt_pts_count_TV gym_pts_count_TV park_pts_count_TV\n1            6.8121700        -2.181362        3.7171044        12.4489354\n2            6.8121700        -2.181362        3.7171044        12.4489354\n3            0.3248104         4.027660        4.8589769         0.9160302\n4            0.3248104         4.027660        4.8589769         0.9160302\n5           -2.7244352         4.273586       -2.2912078         1.7057127\n6           21.7794749       -35.123339       27.1331111        16.2948464\n7           21.7794749       -35.123339       27.1331111        16.2948464\n8            2.5268961        -1.965040        0.4309237         0.4954986\n9            2.5268961        -1.965040        0.4309237         0.4954986\n10           2.5268961        -1.965040        0.4309237         0.4954986\n   eldercare_pts_count_TV chas_pts_count_TV bus_pts_count_TV  Local_R2\n1             -3.50185240         1.5199517        6.9736211 0.9644450\n2             -3.50185240         1.5199517        6.9736211 0.9644450\n3              2.06150343        -2.0200730       -2.4567766 0.9685204\n4              2.06150343        -2.0200730       -2.4567766 0.9685204\n5              2.18702180        -3.4382297       -0.3164023 0.9629397\n6              0.04474624        11.1178134        6.7726185 0.9404046\n7              0.04474624        11.1178134        6.7726185 0.9404046\n8             -4.00833063         0.6784648        9.9171782 0.9679198\n9             -4.00833063         0.6784648        9.9171782 0.9679198\n10            -4.00833063         0.6784648        9.9171782 0.9679198\n                         geometry\n1  POLYGON ((31667.83 31778.89...\n2  POLYGON ((31667.83 31778.89...\n3  POLYGON ((39373.81 33678.86...\n4  POLYGON ((39373.81 33678.86...\n5  POLYGON ((38149.03 34465.74...\n6  POLYGON ((45392.3 41164.5, ...\n7  POLYGON ((45392.3 41164.5, ...\n8  POLYGON ((27673.09 30496.64...\n9  POLYGON ((27673.09 30496.64...\n10 POLYGON ((27673.09 30496.64...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\nhdb_resale.sf.adaptive <- cbind(hdb_resale.res.sf, as.matrix(gwr.adaptive.output))\n```\n:::\n\n\n\nNext, we use the glimpse() function is used to display the content and summary of condo_resale.sf.adaptive sf data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(hdb_resale.sf.adaptive)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 23,555\nColumns: 90\n$ total_remaining_lease        <dbl> 663, 658, 622, 617, 714, 675, 670, 709, 7…\n$ storey_scale                 <dbl> 3, 4, 2, 4, 4, 1, 1, 2, 9, 3, 2, 4, 2, 1,…\n$ resale_price                 <dbl> 440000, 418000, 335000, 370000, 637000, 3…\n$ floor_area_sqm               <dbl> 74, 68, 59, 59, 133, 66, 77, 119, 119, 11…\n$ nearest_gym_dist             <dbl> 335.39906, 335.39906, 554.46197, 554.4619…\n$ nearest_kindergarten_dist    <dbl> 217.3620, 217.3620, 221.8531, 221.8531, 1…\n$ nearest_park_dist            <dbl> 13.57091, 13.57091, 239.50824, 239.50824,…\n$ nearest_chas_dist            <dbl> 0.00000, 0.00000, 0.00000, 0.00000, 0.000…\n$ nearest_cbd_dist             <dbl> 506.2040, 506.2040, 8060.5303, 8060.5303,…\n$ nearest_bus_dist             <dbl> 0.00000, 0.00000, 0.00000, 0.00000, 0.000…\n$ nearest_mrt_dist             <dbl> 237.9981, 237.9981, 327.2657, 327.2657, 7…\n$ nearest_childcare_dist       <dbl> 0.00000, 0.00000, 0.00000, 0.00000, 199.7…\n$ nearest_eldercare_dist       <dbl> 0.0000, 0.0000, 139.7537, 139.7537, 117.8…\n$ childcare_pts_count          <int> 2, 2, 7, 7, 6, 0, 0, 10, 10, 10, 2, 2, 2,…\n$ supermarket_pts_count        <int> 1, 1, 2, 2, 4, 0, 0, 5, 5, 5, 1, 1, 1, 1,…\n$ hawker_pts_count             <int> 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0, 0, 0,…\n$ mrt_pts_count                <int> 3, 3, 1, 1, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3,…\n$ gym_pts_count                <int> 8, 8, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2,…\n$ park_pts_count               <int> 3, 3, 6, 6, 9, 5, 5, 5, 5, 5, 1, 1, 1, 1,…\n$ eldercare_pts_count          <int> 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0,…\n$ chas_pts_count               <int> 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ bus_pts_count                <int> 3, 3, 1, 1, 2, 4, 4, 1, 1, 1, 1, 1, 1, 1,…\n$ MLR_RES                      <dbl> -94225.891, -97571.217, 50079.695, 56021.…\n$ Intercept                    <dbl> -553100.60, -553100.60, -97588.24, -97588…\n$ total_remaining_lease.1      <dbl> 611.1439, 611.1439, 602.8097, 602.8097, 5…\n$ storey_scale.1               <dbl> 16528.55, 16528.55, 13177.05, 13177.05, 1…\n$ floor_area_sqm.1             <dbl> 7039.609, 7039.609, 5746.557, 5746.557, 4…\n$ nearest_kindergarten_dist.1  <dbl> -62.793028, -62.793028, -3.561761, -3.561…\n$ nearest_park_dist.1          <dbl> 37.329660, 37.329660, 30.057517, 30.05751…\n$ nearest_chas_dist.1          <dbl> 373.80842, 373.80842, 50.12696, 50.12696,…\n$ nearest_cbd_dist.1           <dbl> -5.551977, -5.551977, -43.833519, -43.833…\n$ nearest_bus_dist.1           <dbl> -64.24159, -64.24159, 133.70031, 133.7003…\n$ nearest_mrt_dist.1           <dbl> -140.57783, -140.57783, -64.21593, -64.21…\n$ nearest_childcare_dist.1     <dbl> -123.04808, -123.04808, -93.20306, -93.20…\n$ nearest_eldercare_dist.1     <dbl> 15.552703, 15.552703, 39.412804, 39.41280…\n$ supermarket_pts_count.1      <dbl> -3685.119, -3685.119, -6401.161, -6401.16…\n$ hawker_pts_count.1           <dbl> 13749.049, 13749.049, 1228.572, 1228.572,…\n$ mrt_pts_count.1              <dbl> -2256.0933, -2256.0933, 13554.8383, 13554…\n$ gym_pts_count.1              <dbl> 2463.1645, 2463.1645, 31287.7213, 31287.7…\n$ park_pts_count.1             <dbl> 11519.3488, 11519.3488, 905.5127, 905.512…\n$ eldercare_pts_count.1        <dbl> -7900.60200, -7900.60200, 14847.12897, 14…\n$ chas_pts_count.1             <dbl> 1311.954, 1311.954, -3505.091, -3505.091,…\n$ bus_pts_count.1              <dbl> 8083.8068, 8083.8068, -3902.9116, -3902.9…\n$ y                            <dbl> 440000, 418000, 335000, 370000, 637000, 3…\n$ yhat                         <dbl> 438463.7, 409698.8, 311634.1, 334974.1, 7…\n$ residual                     <dbl> 1536.325, 8301.155, 23365.942, 35025.900,…\n$ CV_Score                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Stud_residual                <dbl> 0.04888348, 0.26397059, 0.74300559, 1.119…\n$ Intercept_SE                 <dbl> 12690.500, 12690.500, 84141.838, 84141.83…\n$ total_remaining_lease_SE     <dbl> 7.811053, 7.811053, 15.243877, 15.243877,…\n$ storey_scale_SE              <dbl> 572.9566, 572.9566, 1239.7483, 1239.7483,…\n$ floor_area_sqm_SE            <dbl> 71.35533, 71.35533, 113.17417, 113.17417,…\n$ nearest_kindergarten_dist_SE <dbl> 10.540209, 10.540209, 25.642343, 25.64234…\n$ nearest_park_dist_SE         <dbl> 7.947029, 7.947029, 17.373349, 17.373349,…\n$ nearest_chas_dist_SE         <dbl> 35.254242, 35.254242, 64.479705, 64.47970…\n$ nearest_cbd_dist_SE          <dbl> 2.0253650, 2.0253650, 9.3520394, 9.352039…\n$ nearest_bus_dist_SE          <dbl> 114.48248, 114.48248, 137.14370, 137.1437…\n$ nearest_mrt_dist_SE          <dbl> 5.687046, 5.687046, 12.993674, 12.993674,…\n$ nearest_childcare_dist_SE    <dbl> 14.090197, 14.090197, 29.215758, 29.21575…\n$ nearest_eldercare_dist_SE    <dbl> 3.933301, 3.933301, 16.123411, 16.123411,…\n$ supermarket_pts_count_SE     <dbl> 1301.525, 1301.525, 2880.312, 2880.312, 3…\n$ hawker_pts_count_SE          <dbl> 2018.307, 2018.307, 3782.428, 3782.428, 5…\n$ mrt_pts_count_SE             <dbl> 1034.2588, 1034.2588, 3365.4376, 3365.437…\n$ gym_pts_count_SE             <dbl> 662.6568, 662.6568, 6439.1582, 6439.1582,…\n$ park_pts_count_SE            <dbl> 925.3280, 925.3280, 988.5184, 988.5184, 2…\n$ eldercare_pts_count_SE       <dbl> 2256.121, 2256.121, 7202.088, 7202.088, 8…\n$ chas_pts_count_SE            <dbl> 863.1553, 863.1553, 1735.1308, 1735.1308,…\n$ bus_pts_count_SE             <dbl> 1159.1979, 1159.1979, 1588.6310, 1588.631…\n$ Intercept_TV                 <dbl> -43.583831, -43.583831, -1.159806, -1.159…\n$ total_remaining_lease_TV     <dbl> 78.24092, 78.24092, 39.54438, 39.54438, 2…\n$ storey_scale_TV              <dbl> 28.847815, 28.847815, 10.628807, 10.62880…\n$ floor_area_sqm_TV            <dbl> 98.65569, 98.65569, 50.77622, 50.77622, 3…\n$ nearest_kindergarten_dist_TV <dbl> -5.9574747, -5.9574747, -0.1389015, -0.13…\n$ nearest_park_dist_TV         <dbl> 4.697310, 4.697310, 1.730093, 1.730093, 2…\n$ nearest_chas_dist_TV         <dbl> 10.60321839, 10.60321839, 0.77740674, 0.7…\n$ nearest_cbd_dist_TV          <dbl> -2.7412227, -2.7412227, -4.6870546, -4.68…\n$ nearest_bus_dist_TV          <dbl> -0.5611478, -0.5611478, 0.9748921, 0.9748…\n$ nearest_mrt_dist_TV          <dbl> -24.7189559, -24.7189559, -4.9420917, -4.…\n$ nearest_childcare_dist_TV    <dbl> -8.7328859, -8.7328859, -3.1901640, -3.19…\n$ nearest_eldercare_dist_TV    <dbl> 3.9541098, 3.9541098, 2.4444457, 2.444445…\n$ supermarket_pts_count_TV     <dbl> -2.8313865, -2.8313865, -2.2223846, -2.22…\n$ hawker_pts_count_TV          <dbl> 6.8121700, 6.8121700, 0.3248104, 0.324810…\n$ mrt_pts_count_TV             <dbl> -2.1813624, -2.1813624, 4.0276600, 4.0276…\n$ gym_pts_count_TV             <dbl> 3.7171044, 3.7171044, 4.8589769, 4.858976…\n$ park_pts_count_TV            <dbl> 12.4489354, 12.4489354, 0.9160302, 0.9160…\n$ eldercare_pts_count_TV       <dbl> -3.50185240, -3.50185240, 2.06150343, 2.0…\n$ chas_pts_count_TV            <dbl> 1.5199517, 1.5199517, -2.0200730, -2.0200…\n$ bus_pts_count_TV             <dbl> 6.9736211, 6.9736211, -2.4567766, -2.4567…\n$ Local_R2                     <dbl> 0.9644450, 0.9644450, 0.9685204, 0.968520…\n$ geometry                     <POLYGON [m]> POLYGON ((31667.83 31778.89..., P…\n```\n\n\n:::\n:::\n\n\n\nWe now visualize Local R2 by URA planning regions from the `mpsz` data-frame as per the Urban Redevelopment Auuthority Master Plan.\n\n::: panel-tabset\n## Central Region\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\n  'plot'\n)\ntm_shape(mpsz[mpsz$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(hdb_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n\n\n## West Region\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz[mpsz$REGION_N==\"WEST REGION\", ])+\n  tm_polygons()+\ntm_shape(hdb_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n\n\n## East Region\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz[mpsz$REGION_N==\"EAST REGION\", ])+\n  tm_polygons()+\ntm_shape(hdb_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n\n\n## North-Eastern Region\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz[mpsz$REGION_N==\"NORTH-EAST REGION\", ])+\n  tm_polygons()+\ntm_shape(hdb_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-87-1.png){width=672}\n:::\n:::\n\n\n\n## North Region\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz[mpsz$REGION_N==\"NORTH REGION\", ])+\n  tm_polygons()+\ntm_shape(hdb_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: insights-box\nLocal R²: Values range from 0.0 to 1.0 and indicate the goodness-of-fit of the local regression model. Low Local R² values signal poor model performance in those regions. Mapping these values can help identify areas where the Geographically Weighted Regression (GWR) model is performing well and where it is underperforming, potentially highlighting missing or unaccounted-for variables.\n:::\n\n## 3.4.3 Predictive Model- Hedonic\n\nChoosing to calibrate a random forest can be beneficial for several reasons.\n\n**Random Forest** models are often better than a **hedonic pricing model** for predictive tasks because it:\n\n1.  **Captures non-linear relationships** and **complex interactions** without assuming linearity.\n2.  **Handles high-dimensional data** effectively, making use of many predictors without requiring extensive variable selection.\n3.  **Resists outliers and noise**, offering more robust predictions.\n4.  **Provides higher predictive accuracy** by adapting to varied patterns across data.\n5.  **Offers feature importance insights**, helping identify key factors influencing prices.\n\nRandom Forest excels in accuracy and flexibility, making it well-suited for complex real estate pricing predictions, like the one we are attempting to do now.\n\n### 3.4.3.1 Data Sampling\n\nThe entire data-set is split into training and test data sets with 65% and 35% respectively by using the initial_split() function of the rsample package.\n\nThe first step is to ensure that there are no overlapping point features. To do this we first implement the st_jitter() function of the sf package. The st_centroid() function is used to convert the polygon geometries to point form.\n\nAfter splitting the data, we will store them as RDS files. We use the write_rds() function to create the RDS file and the read_rds() function to load the RDS file into our environment. This facilitates computational efficiency.\n\nAdditionally, we implement the sample_n() function of the dplyr package to take a sample of 3000 observations for the training data and 1500 observations for test data. This is done as having too many observations can result in hours, sometimes more, of time taken for every computation.\n\n::: panel-tabset\n## Data Sampling\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 2023\n\nresale_2023=resale_2023%>%\n  st_centroid()%>%\n  st_jitter(amount=10)\n\n## 2024\nresale_2024=resale_2024%>%\n  st_centroid()%>%\n  st_jitter(amount=10)\n\n## Creating traing and test splits to calibrate models\nresale_split <- initial_split(resale_2023, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split)%>%\n  sample_n(3000)\ntest_data <- testing(resale_split)%>%\n  sample_n(1500)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/train_data.rds\")\nwrite_rds(test_data, \"data/test_data.rds\")\n```\n:::\n\n\n\n## Reading RDS Files\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data=read_rds('data/train_data.rds')\ntest_data=read_rds('data/test_data.rds')\n```\n:::\n\n\n:::\n\n### 3.4.3.2 Model Calibration\n\nWe start off by converting `train_data` to a Spatial object by using the as_Spatial() function of the sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 3000 \nextent      : 11806.39, 45091.62, 28105.89, 48685.26  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 22\nnames       : total_remaining_lease, storey_scale, resale_price, floor_area_sqm, nearest_gym_dist, nearest_kindergarten_dist, nearest_park_dist, nearest_chas_dist, nearest_cbd_dist, nearest_bus_dist, nearest_mrt_dist, nearest_childcare_dist, nearest_eldercare_dist, childcare_pts_count, supermarket_pts_count, ... \nmin values  :                   505,            1,       280000,             52,                0,                         0,                 0,                 0,                0,                0,                0,                      0,                      0,                   0,                     0, ... \nmax values  :                  1145,           16,      1420000,            149, 4274.65530320218,          2936.75322689975,   2211.7822280043,  2460.60405424514, 16990.5482125422,  174.19136717161, 3292.27569241822,       3044.64644345737,       4512.50732134225,                  43,                     8, ... \n```\n\n\n:::\n:::\n\n\n\nAs earlier, we will now compute the **adaptive** bandwidth using the bw.gwr() function.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive= bw.gwr(resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n                   data=train_data_sp,\n                   approach = 'CV',\n                   kernel = 'gaussian',\n                   adaptive = TRUE,\n                   longlat = FALSE)\n\n## Create RDS File\n\nwrite_rds(bw_adaptive, 'data/rds/bw_adapt_rf.rds')\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive=read_rds('data/rds/bw_adapt_rf.rds')\n```\n:::\n\n\n:::\n\nFrom the above, we infer that the optimal bandwidth that we must use to create this model is 61.\n\n::: insights-box\n`The bw.gwr()` function aims to find the best bandwidth that minimizes a specified criterion, such as AIC or CV, balancing the model’s bias and variance.\n\nThe bandwidth controls how much data around each location is included in its local model, impacting the \"localized\" nature of GWR.\n:::\n\nWe repeat the same step for `test_data`, in that we convert it to a spatial object as well.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_sp <- test_data %>%\n  as_Spatial()\ntest_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1500 \nextent      : 11808.88, 42477.98, 28249.29, 48666.74  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 22\nnames       : total_remaining_lease, storey_scale, resale_price, floor_area_sqm, nearest_gym_dist, nearest_kindergarten_dist, nearest_park_dist, nearest_chas_dist, nearest_cbd_dist, nearest_bus_dist, nearest_mrt_dist, nearest_childcare_dist, nearest_eldercare_dist, childcare_pts_count, supermarket_pts_count, ... \nmin values  :                   509,            1,       267000,             55,                0,                         0,                 0,                 0,                0,                0,                0,                      0,                      0,                   0,                     0, ... \nmax values  :                  1143,           14,      1450000,            150, 4145.60222154281,          879.662705184524,  2188.63830813697,  608.340264684751, 15332.7372563399, 177.451358774972, 1952.48652213867,       970.401743304144,       3061.57003199835,                  43,                     7, ... \n```\n\n\n:::\n:::\n\n\n\nNow that we have done the above steps, we can calibrate the model.\n\n::: panel-tabset\n## Training Data\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula =resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive, 'data/rds/gwr_adapt_hed.rds')\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive=read_rds('data/rds/gwr_adapt_hed.rds')\n```\n:::\n\n\n:::\n\n## Test data\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_bw_test_adaptive, 'data/rds/gwr_bw_test_hed.rds')\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive= read_rds('data/rds/gwr_bw_test_hed.rds')\n```\n:::\n\n\n:::\n:::\n\n### 3.4.3.3 Prediction\n\nTo compute the predicted values using `test_data`, we implement the gwr.predict() function.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_mrt_dist + nearest_bus_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw= 50, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE,\n                        theta = 0)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_pred, 'data/gwr_pred.rds')\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred=read_rds('data/gwr_pred.rds')\n```\n:::\n\n\n:::\n\nWe can view the model output using the below code chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-09 14:33:17.721381 \n   Call:\n   gwr.predict(formula = resale_price ~ total_remaining_lease + \n    storey_scale + floor_area_sqm + nearest_kindergarten_dist + \n    nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + \n    nearest_mrt_dist + nearest_bus_dist + nearest_childcare_dist + \n    nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + \n    mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + \n    chas_pts_count + bus_pts_count, data = train_data_sp, predictdata = test_data_sp, \n    bw = 50, kernel = \"gaussian\", adaptive = TRUE, theta = 0, \n    longlat = FALSE)\n\n   Dependent (y) variable for prediction:  resale_price\n   Independent variables:  total_remaining_lease storey_scale floor_area_sqm nearest_kindergarten_dist nearest_park_dist nearest_chas_dist nearest_cbd_dist nearest_mrt_dist nearest_bus_dist nearest_childcare_dist nearest_eldercare_dist supermarket_pts_count hawker_pts_count mrt_pts_count gym_pts_count park_pts_count eldercare_pts_count chas_pts_count bus_pts_count\n   Number of data points: 3000\n   ***********************************************************************\n   *     Results of Geographically Weighted Regression for prediction    *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 50 (number of nearest neighbours)\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                         Min.     1st Qu.      Median\n   Intercept_coef                 -2.0919e+06 -4.1781e+05 -2.8612e+05\n   total_remaining_lease_coef      1.9939e+02  3.6976e+02  5.0112e+02\n   storey_scale_coef               6.4057e+03  1.0227e+04  1.1919e+04\n   floor_area_sqm_coef             3.3364e+03  4.5187e+03  5.0988e+03\n   nearest_kindergarten_dist_coef -1.8542e+02 -3.5129e+01 -1.0025e+01\n   nearest_park_dist_coef         -1.0631e+02 -3.2758e+01 -1.3571e+01\n   nearest_chas_dist_coef         -4.6494e+02 -1.0122e+02 -2.2447e+01\n   nearest_cbd_dist_coef          -1.1246e+02 -2.4402e+01 -1.1158e+01\n   nearest_mrt_dist_coef          -2.2663e+02 -7.7898e+01 -4.9734e+01\n   nearest_bus_dist_coef          -1.6966e+03 -2.1588e+02  5.1462e+01\n   nearest_childcare_dist_coef    -2.4118e+02 -6.6242e+01 -1.5857e+01\n   nearest_eldercare_dist_coef    -2.1010e+02 -2.3819e+01 -5.4262e+00\n   supermarket_pts_count_coef     -1.5590e+04  1.1165e+02  3.5320e+03\n   hawker_pts_count_coef          -3.7589e+04 -8.7825e+03  3.2213e+03\n   mrt_pts_count_coef             -3.1371e+04 -3.1349e+03  1.8799e+03\n   gym_pts_count_coef             -3.0872e+05 -3.3369e+03  4.7611e+03\n   park_pts_count_coef            -2.0606e+04 -6.4313e+03 -2.6895e+03\n   eldercare_pts_count_coef       -1.2556e+05 -1.2930e+04 -6.3623e+03\n   chas_pts_count_coef            -1.2793e+04 -1.7865e+03  8.9321e+02\n   bus_pts_count_coef             -7.9513e+03 -2.1269e+03  9.6054e+02\n                                      3rd Qu.       Max.\n   Intercept_coef                 -1.1792e+05 972747.375\n   total_remaining_lease_coef      5.7667e+02    852.718\n   storey_scale_coef               1.5032e+04  20810.001\n   floor_area_sqm_coef             5.8987e+03   8081.898\n   nearest_kindergarten_dist_coef  2.8120e+01    267.923\n   nearest_park_dist_coef          1.2963e+01    138.520\n   nearest_chas_dist_coef          8.7678e+01    608.332\n   nearest_cbd_dist_coef          -1.1986e+00    103.184\n   nearest_mrt_dist_coef          -2.3066e+01    178.262\n   nearest_bus_dist_coef           3.1404e+02   4918.695\n   nearest_childcare_dist_coef     2.6772e+01    180.473\n   nearest_eldercare_dist_coef     1.1830e+01     79.032\n   supermarket_pts_count_coef      8.8940e+03  23814.318\n   hawker_pts_count_coef           1.4400e+04  60109.243\n   mrt_pts_count_coef              5.9215e+03  28640.367\n   gym_pts_count_coef              1.4091e+04  64320.818\n   park_pts_count_coef             1.3492e+03  52536.323\n   eldercare_pts_count_coef        1.8413e+03  41289.547\n   chas_pts_count_coef             2.8521e+03   8746.064\n   bus_pts_count_coef              3.5408e+03  21753.955\n\n   ****************       Results of GW prediction       ******************\n                        Min.    1st Qu.     Median    3rd Qu.       Max.\n   prediction         243929     452382     557431     641486    1226903\n   prediction_var 1655578859 1764276309 1818832214 1898710132 8982735994\n\n   ***********************************************************************\n   Program stops at: 2024-11-09 15:01:43.846285 \n```\n\n\n:::\n:::\n\n\n\nThe above output allows us to make several inferences.\n\nWe can infer each variable’s influence on resale price how it varies geographically, as shown by the range of the coefficient values.\n\n-   total_remaining_lease_coef: Positive across locations, suggesting that higher remaining lease durations consistently increase resale prices.\n-   storey_scale_coef and floor_area_sqm_coef: Positive across all observations, indicating that higher floors and larger areas increase resale prices.\n-   Distance to facilities and parks (e.g., kindergarten, park, MRT) often shows both positive and negative coefficients. For instance, nearest_mrt_dist_coef tends to be negative, implying that closer proximity to MRT stations generally increases property values, but there are locations where it has a positive coefficient as well.\n-   Points of Interest (POI) Counts: Some POIs (e.g., supermarkets, hawkers, MRT stations) show mixed impacts, likely indicating that their effect on price varies with local context (positive in some areas and negative in others).\n\nThe model predicts that the price would range between a minimum of SGD 243,929 SGD 1,226,903. The median price is just over SGD 550,000.\n\n#### 3.4.4.3.1 Calibrating Random Forest Model\n\nWe extract the coordinates for each of the following four data-frames: resale_2023, resale_2024, train_data, test_data.\n\nThe st_coordinates() function is used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_2023 = st_coordinates(resale_2023)\ncoords_2024=st_coordinates(resale_2024)\ncoords_train = st_coordinates(train_data)\ncoords_test = st_coordinates(test_data)\n```\n:::\n\n\n\nAfter extracting the coordinates, we drop the geometry field from `train_data` first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\nWe will use the [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html) package to do this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf <- ranger(resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n             data=train_data)\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ total_remaining_lease + storey_scale +      floor_area_sqm + nearest_kindergarten_dist + nearest_park_dist +      nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist +      nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist +      supermarket_pts_count + hawker_pts_count + mrt_pts_count +      gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count +      bus_pts_count, data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      3000 \nNumber of independent variables:  19 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2639526031 \nR squared (OOB):                  0.9029382 \n```\n\n\n:::\n:::\n\n\n\n# 3.4.5 Calibrating Geographical Random Forest Models\n\nWe now use the [SpatialML](https://cran.r-project.org/web/packages/SpatialML/index.html)package to create a model that will allow us to calibrate a model to predict HDB resale price. Please follow the embedded link to learn more about the SpatialML package.\n\n## 3.4.5.1 Calibrating using training data\n\nThe code chunk below is used to calibrate a geographic rand om forest model by using the `grf()` function of the **SpatialML** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- grf(formula = resale_price ~ total_remaining_lease + storey_scale + floor_area_sqm  + nearest_kindergarten_dist + nearest_park_dist + nearest_chas_dist + nearest_cbd_dist + nearest_bus_dist + nearest_mrt_dist + nearest_childcare_dist + nearest_eldercare_dist + supermarket_pts_count + hawker_pts_count + mrt_pts_count + gym_pts_count + park_pts_count + eldercare_pts_count + chas_pts_count + bus_pts_count,\n                     dframe=train_data, \n                     bw=40,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\nwrite_rds(gwRF_adaptive, \"data/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive=read_rds('data/gwRF_adaptive.rds')\n```\n:::\n\n\n\n# 3.5 Prediction\n\n## 3.5.1 Predicting using test data\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data, and drop the geometry using the st_drop_geometry() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\nWe now implement the `predict.grf()` function of the spatialML package to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n::: panel-tabset\n## Calibration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_pred, \"data/GRF_pred.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- read_rds(\"data/GRF_pred.rds\")\n```\n:::\n\n\n:::\n\n### 3.5.1.2 Converting the output into a data-frame\n\nWe implement the as.data.frame() function to convert `GRF_pred` to a data-frame as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n\n\nWe now use the `cbind()` function to append the predicted values onto the test_data data-frame for further work.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_p, \"data/test_data_p.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p=read_rds('data/test_data_p.rds')\n```\n:::\n\n\n:::\n\n### 3.5.1.3 Root Mean Square Error (RMSE)\n\nThe root mean square error (RMSE) allows us to measure how far the predicted values are from the observed values in a regression analysis.\n\nIn the code chunk below, the rmse() function of the Metrics package is used to compute the RMSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price,\n     test_data_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 66847.04\n```\n\n\n:::\n:::\n\n\n\nThe RMSE value is relatively low and indicates good model performance. This must be compared with the upcoming model to determine how the model performs in comparison.\n\n### 3.5.1.4 Visualizing the predicted values\n\nWe create a scatterplot to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-120-1.png){width=672}\n:::\n:::\n\n\n\n::: insights-box\nA better predictive model would have the scattered points close to the diagonal line. The scatter plot can be also used to detect if any outliers in the model.\n:::\n\n## 3.5.2 July to September 2024 Data\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data, and drop the geometry using the st_drop_geometry() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_2024 <- cbind(resale_2024, coords_2024) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\nWe now implement the `predict.grf()` function of the spatialML package to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n::: panel-tabset\n## Calibration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred_2024 <- predict.grf(gwRF_adaptive, \n                           resale_2024, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_pred_2024, \"data/GRF_pred_2024.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_2024 <- read_rds(\"data/GRF_pred_2024.rds\")\n```\n:::\n\n\n:::\n\n### 3.5.2.2 Converting the output into a data-frame\n\nWe implement the as.data.frame() function to convert `GRF_pred` to a data-frame as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df_2024 <- as.data.frame(GRF_pred_2024)\n```\n:::\n\n\n\nWe now use the `cbind()` function to append the predicted values onto the test_data data-frame for further work.\n\n::: panel-tabset\n## Computation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_2024_p <- cbind(resale_2024, GRF_pred_df_2024)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_2024_p, \"data/rds/resale_2024_p.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_2024_p=read_rds('data/rds/resale_2024_p.rds')\n```\n:::\n\n\n:::\n\n### 3.5.2.3 Root Mean Square Error (RMSE)\n\nThe root mean square error (RMSE) allows us to measure how far the predicted values are from the observed values in a regression analysis.\n\nIn the code chunk below, the rmse() function of the Metrics package is used to compute the RMSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(resale_2024_p$resale_price,\n     resale_2024_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100955.9\n```\n\n\n:::\n:::\n\n\n\nThe RMSE is higher than it is for when this model was applied on the test data from 2023, indicating worse performance however the model is still highly viable as shown in the plot below.\n\n### 3.5.2.4 Visualizing the predicted values\n\nWe create a scatterplot to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = resale_2024_p,\n       aes(x = GRF_pred_2024,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-130-1.png){width=672}\n:::\n:::\n\n\n\nAs mentioned earlier, a better model would have points scattered around the diagonal from the origin. That being said, we infer that our model performs well.\n\n# 3.6 Model Comparison\n\nOver this exercise, we created a few models in order to predict flat-resale prices. Each of them come with their own pros and cons.\n\nWe first compare the Hedonic Pricing Model and the Random Forest Model.\n\n| Hedonic Pricing Model                                | Random Forest                                 |\n|--------------------------------------|----------------------------------|\n| Higher (Adjusted) R-Squared Value                    | Lower (Adjusted) R-Squared Value              |\n| More observations used to calibrate model            | Fewer observations used to calibrate model    |\n| Does not handle non-linear relationships effectively | Handles non-linear relationships effectively. |\n\nWhen it comes down to choice of model, it is up to personal preference however when dealing with Spatial Data, it is recommended to incorporate Random Forest Modelling as it is better suited to deal with high-dimensional data and has the ability to not get impacted as much by outliers.\n\nWith regards to the Random Forest Model, we infer that the model performs better on the test data from 2023 compared to predicting prices for July to September 2024, however the model is viable in both cases, as shown by the plot in 3.5.1.4 and 3.5.2.4.\n\nFlat prices lately have been trending differently to how they were over 2023 for several reasons.\n\n| Test Data                      | July to September 2024                                      |\n|--------------------------|----------------------------------------------|\n| Lower RMSE at 66000            | Higher RMSE at just over 100000                             |\n| Fewer Data Points to test with | More data points used                                       |\n| Same year as training data     | Over half a year, minimum, later than training points used. |\n\nThere has been increasing demand for flats on the resale market due to a wide variety of reasons:\n\n-   The pandemic resulted in significant delays in Build-To-Order (BTO) projects, which has now caused a backlog of demand for new flats. Many buyers who were initially planning to purchase BTO flats changed their minds and have started to look to the resale market, driving up resale prices as a result due to increased demand.\n\n-   Global supply chain disruptions and inflation have only gotten worse over the past year causing construction costs to rise. Key factors of production such as raw materials, labor, and shipping are all more expensive, which has affected both new developments and resale prices, as buyers account for the higher replacement cost of newer units.\n\nThere are several other reasons that can be looked at such as more demand from foreign buyers as investment holds however the two reasons above are key in the trend we are seeing of late.\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}