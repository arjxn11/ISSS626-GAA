{
  "hash": "10b42a7e7d8d58e1046ac72bbf61676d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands On Exercise 9- Modelling Geographical Accessibility\"\nauthor: \"Arjun Singh\"\ndate: 2024-10-21\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 9 Introduction\n\nIn this hands-on exercise, we will apply various geospatial techniques to model geographical accessibility.\n\nModeling geographical accessibility using R, especially with techniques like Hansen's (Gravity Model) and SAM (Spatial Accessibility Models), serves a critical role in spatial analysis and urban planning for various sectors, including healthcare, transportation, and urban services. Here’s why it's important:\n\n1\\. **Understanding Service Accessibility**\n\n-   **Hansen’s Gravity Model** helps measure how accessible services (e.g., hospitals, schools, markets) are to people based on the distance from population centers and the capacity of those services. It assumes accessibility decreases with distance and that larger facilities attract more people.\n-   **SAM (Spatial Accessibility Models)** can integrate various factors like population density, facility capacity, and road networks to calculate accessibility indices. This makes it easier to assess disparities in access to essential services.\n\n2\\. **Data-Driven Decision Making**\n\n-   Accessibility models in R are useful for governments and planners to make **data-driven decisions** about resource allocation, such as where to build new hospitals, roads, or schools, and how to improve existing infrastructure.\n-   They help identify **underserved areas** that need attention by visualizing disparities in accessibility across different regions.\n\n3\\. **Transportation and Mobility Planning**\n\n-   **Transportation networks** and travel time are critical elements of accessibility. Modeling in R allows you to consider different transport modes (car, bus, walking) and factors like congestion or road conditions.\n-   These models help optimize **transportation routes** and plan public transit systems by analyzing travel times and service efficiency across geographical areas.\n\n4\\. **Equity and Social Justice**\n\n-   By analyzing accessibility, you can address **inequities in access to services** based on geographical location, helping improve conditions for marginalized or rural populations.\n-   It’s valuable in identifying **geographical barriers** that contribute to social and economic disparities.\n\n5\\. **Predictive and Scenario-Based Analysis**\n\n-   These models allow for **what-if scenarios**, where you can test the impact of new infrastructure projects (like roads or metro systems) or changes in population distribution.\n-   You can forecast how accessibility will change over time, especially with urbanization and migration trends.\n\n6\\. **Integration with GIS and Spatial Data**\n\n-   R is excellent for handling **large spatial datasets** and integrating it with GIS data. You can use shapefiles for mapping, analyze raster data (e.g., elevation), and overlay different spatial layers for in-depth analysis.\n\nBasically, modelling geographical accessibility using R enables us to understand spatial dynamics better, helping us improve the distribution of resources and services, optimize transportation networks, and ensure equitable access for all populations.\n\n# 9.1 Data and Packages\n\nFour data sets will be used in this hands-on exercise, they are:\n\n-   `MP14_SUBZONE_NO_SEA_PL`: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from data.gov.sg.\n\n-   `hexagons`: A 250m radius hexagons GIS data. This data set was created by using [*st_make_grid()*](https://r-spatial.github.io/sf/reference/st_make_grid.html) of sf package. It is in ESRI shapefile format.\n\n-   `ELDERCARE`: GIS data showing location of eldercare service. [This data](https://data.gov.sg/dataset/eldercare-services) is downloaded from data.gov.sg. There are two versions. One in ESRI shapefile format. The other one in Google kml file format. For the purpose of this hands-on exercise, ESRI shapefile format is provided.\n\n-   `OD_Matrix`: a distance matrix in csv format. There are six fields in the data file. They are:\n\n    -   `origin_id`: the unique id values of the origin (i.e. `fid` of hexagon data set.),\n\n    -   `destination_id`: the unique id values of the destination (i.e. `fid` of `ELDERCARE` data set.),\n\n    -   `entry_cost`: the perpendicular distance between the origins and the nearest road),\n\n    -   `network_cost`: the actual network distance from the origin and destination,\n\n    -   `exit_cost`: the perpendicular distance between the destination and the nearest road), and\n\n    -   `total_cost`: the summation of `entry_cost`, `network_cost` and `exit_cost`.\n\nAll the values of the cost related fields are in **metres**.\n\n::: note-box\nDo note that aside from `ELDERCARE` and `MP14_SUBZONE_NO_SEA_PL`, the datasets have been prepared by Professor Kam Tin Seong from Singapore Management University for the purpose of learning. You are required to solicit **explicit approval** from Prof. Kam should you want to use these datasets for your own study.\n:::\n\nThe following R packages are used for our study:\n\n-   **tmap**: A powerful R package for creating thematic maps, offering both static and interactive visualizations. It integrates well with spatial data formats like `sf` and `sp`.\n\n-   **tidyverse**: A collection of R packages (e.g., `ggplot2`, `dplyr`, `tibble`) designed for data manipulation, visualization, and analysis, emphasizing a consistent and user-friendly syntax.\n\n-   **SpatialAcc**: An R package used to compute spatial accessibility measures (e.g., Hansen’s accessibility), providing various methods to quantify how accessible services are across geographical spaces.\n\n-   **sf**: The \"simple features\" package in R, used for handling spatial vector data (points, lines, polygons) with a tidy approach, making it easier to integrate with data manipulation tools.\n\n-   **ggstatsplot**: A package that extends `ggplot2` by adding statistical tests directly onto plots, allowing for quick and interpretable data visualization with embedded statistical analysis.\n\n-   **reshape2**: A package used for reshaping data, transforming data frames between wide and long formats (pivoting), which is useful for preparing data for analysis or visualization.\n\nWe load them into our environment by using the p_load() function of the pacman package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse)\nset.seed(123)\n```\n:::\n\n\n\n## 9.1.2 Importing the data\n\n## 9.1.2.1 Geospatial Data Importing and Wrangling\n\nThree geospatial data will be imported from the *data/geospatial* sub-folder. They are MP14_SUBZONE_NO_SEA_PL, hexagons and ELDERCARE.\n\nThe code chunk below is used to import these three data sets shapefile by using *st_read()* of **sf** packages.\n\n::: panel-tabset\n## MPSZ\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n## Hexagons\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hexagons' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\n## Eldercare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n:::\n\n::: note-box\nFrom the above outputs, we can infer that there is no EPSG information for MPSZ. Though it has the SVY21 label. We must update this.\n:::\n\n### 9.1.2.1.2 Updating CRS Information\n\nWe use the st_transform() function of the sf package to update the EPSG code to 3414.\n\n::: panel-tabset\n## Updating Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n```\n:::\n\n\n\n## Checking CRS info\n\nWe can now use the st_crs() function to verify if the change has been made correctly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n:::\n\n### 9.1.2.1.3 **Cleaning and updating attribute fields of the geospatial data**\n\nThere are many redundant fields in the data tables of both `eldercare` and `hexagons`.\n\nThe code chunks below will be used to exclude those redundant fields. At the same time, two new fields called `demand` and `capacity` will be added into the data table of `hexagons` and `eldercare` sf data frame respectively.\n\nBoth fields are derived using *mutate()* of **dplyr** package.\n\n::: panel-tabset\n## Capacity (Eldercare)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- eldercare %>%\n  select(OBJECTID, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n```\n:::\n\n\n\n## Demand (Hexagons)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)\n```\n:::\n\n\n:::\n\n::: note-box\nDo note that for the purpose of this hands-on exercise, a constant value of 100 is used.\n\nIn practice, actual demand of the hexagon and capacity of the eldercare centre should be used.\n:::\n\n## 9.1.3.1 Aspatial Data Importing and Wrangling\n\nWe use the read_csv() function of the readr package to import the ODMatrix dataset into our R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", skip = 0)\n```\n:::\n\n\n\n### 9.1.3.2 **Tidying the distance matrix**\n\nThe imported ODMatrix organised the distance matrix columnwise.\n\n![](images/clipboard-3992973305.png)\n\nOn the other hands, most of the modelling packages in R is expecting a matrix look similar to the figure below.\n\n![](images/clipboard-3195140507.png)\n\nThe rows represent **origins** (i.e. also know as **from** field) and the columns represent **destination** (i.e. also known as **to** field.)\n\nWe use the spread() function of the **tidyr** package to transform the O-D matrix from a thin format into a fat format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n```\n:::\n\n\n\n::: note-box\nNote: Since tidyr version 1.0, a new function called [*pivot_wider()*](https://tidyr.tidyverse.org/reference/pivot_wider.html) has been introduced.\n\nYou should use this new function. *pivot_wider(),* instead of *spread().*\n:::\n\nCurrently, the distance is measured in metres because the SVY21 projected coordinate system is used. The code chunk below will be used to convert the unit of measurement from metre to kilometre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat_km <- as.matrix(distmat/1000)\n```\n:::\n\n\n\n# 9.2 Modelling and Visualizing Accessibility using Hansen Method\n\n## 9.2.1 Computing Hansen’s accessibility\n\nWe can now compute Hansen’s accessibility by using the *ac()* function of the [**SpatialAcc**](https://cran.r-project.org/web/packages/SpatialAcc/index.html) package. Do refer to the documentation attached on the link above to gain a better understanding of the SpatialAcc package and its functions.\n\n::: insights-box\nHansen's accessibility model, often called the **Gravity Model of Accessibility**, is a method used to measure how accessible services or opportunities (e.g., jobs, healthcare, schools) are to a population based on distance or travel time. The model assumes that the ease of accessing a location decreases with distance, and larger or more attractive destinations exert a stronger \"pull.\"\n\n### Formula:\n\nThe accessibility AiA_iAi​ for a given location iii is calculated as:\n\nAi=∑jWjf(dij)A_i = \\sum\\_j \\frac{W_j}{f(d_{ij})}Ai​=j∑​f(dij​)Wj​​\n\nWhere:\n\n-   AiA_iAi​ = Accessibility at location iii\n\n-   WjW_jWj​ = Weight of the destination jjj (e.g., number of jobs, capacity of hospitals)\n\n-   f(dij)f(d\\_{ij})f(dij​) = Distance decay function, often inversely proportional to distance or travel time between location iii and destination jjj\n\n-   dijd\\_{ij}dij​ = Distance or travel time between locations iii and jjj\n\n### Key Components:\n\n1.  **Distance Decay**: As the distance between the origin and destination increases, the accessibility decreases. This reflects the friction of distance, where people are less likely to travel far unless the service or opportunity is highly desirable.\n\n2.  **Attractiveness of Destination**: Larger or more significant destinations (like bigger hospitals or schools) have higher weights, meaning they are more attractive and accessible even at greater distances.\n:::\n\nThe code chunk below calculates Hansen’s accessibility using *ac()* of **SpatialAcc** and *data.frame()* is used to save the output in a data frame called `acc_Handsen`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n```\n:::\n\n\n\n![The default field name is very messy, we rename it to `accHansen` by using the code chunk below.](images/clipboard-3154585136.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acc_Hansen) <- \"accHansen\"\n```\n:::\n\n\n\n::: note-box\nNote that the field looks tidier now.\n\n![](images/clipboard-294853529.png)\n:::\n\nWe now convert the data table into tibble format by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- tbl_df(acc_Hansen)\n```\n:::\n\n\n\nLastly, we implement the *bind_cols()* function of the dplyr package to join the acc_Hansen tibble data frame with the hexagons simple feature data frame. The output is called `hexagon_Hansen`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n\n\nNotice that hexagon_Hansen is a simple feature data frame and not a typical tibble data frame.\n\n![](images/clipboard-3483770397.png)\n\n## 9.2.2 Visualizing Hansens Accessibility\n\n#### 9.2.2.1 Extracting map extend\n\nWe first extract the extend of the `hexagons` simple feature data frame by using the *st_bbox()* function of the **sf** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapex <- st_bbox(hexagons)\n```\n:::\n\n\n\nThe code chunk below uses a collection of mapping functions of the tmap package to create a highly cartographic map depicting accessibility to eldercare centres in Singapore.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### 9.2.2.3 Statistical Graphic Visualization\n\nWe now compare the distribution of Hansen’s accessibility values by URA Planning Region.\n\nWe first the planning region field into *hexagon_Hansen* simple feature data frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n```\n:::\n\n\n\nAfter doing the above, we can use the *ggplot()* package to plot the distribution by using a boxplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=hexagon_Hansen, \n       aes(y = log(accHansen), \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n# 9.3 Modelling and Visualizing Accessibility using KD2SFCA Method\n\n## 9.3.1 Computing KD2SFCA’s accessibility\n\nIn this section, we repeat most of the steps from the previous section to perform the analysis. However, some of the codes will be combined into one code chunk.\n\n::: insights-box\nThe **Kernel Density Two-Step Floating Catchment Area (KD2SFCA)** method is a spatial accessibility model used to measure the accessibility of services, particularly in health and social services planning. It extends upon the traditional **Two-Step Floating Catchment Area (2SFCA)** method by incorporating **kernel density estimation**, which allows for smoother, continuous accessibility values over space, rather than the sharp boundaries seen in traditional 2SFCA models.\n\n### Formula:\n\nThe basic accessibility score at location iii is given by:\n\nAi=∑jSjK(dij)A_i = \\sum*j S_j K(d*{ij})Ai​=j∑​Sj​K(dij​)\n\nWhere:\n\n-   AiA_iAi​ = Accessibility at population location iii\n\n-   SjS_jSj​ = Supply-to-demand ratio at service location jjj, calculated in Step 1\n\n-   K(dij)K(d\\_{ij})K(dij​) = Kernel weight based on the distance between iii and jjj, decreasing with distance\n\nKD2SFCA improves upon traditional accessibility models by using kernel density functions to provide more realistic, continuous measures of accessibility based on both supply and demand, accounting for the decreasing influence of distance.\n:::\n\nThe code chunk below calculates Hansen’s accessibility using *ac()* of **SpatialAcc** and *data.frame()* is used to save the output in a data frame called `acc_KD2SFCA`. Notice that `KD2SFCA` is used for the family argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_KD2SFCA <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            d0 = 50,\n                            power = 2, \n                            family = \"KD2SFCA\"))\n\ncolnames(acc_KD2SFCA) <- \"accKD2SFCA\"\nacc_KD2SFCA <- tbl_df(acc_KD2SFCA)\nhexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)\n```\n:::\n\n\n\n## 9.3.2 Visualizing KD2SFCA’s accessibility\n\nThe code chunk below uses a collection of mapping functions of the tmap package to create a highly cartographic depiction of accessibility to eldercare centres in Singapore.\n\nNotice that the `mapex` argument is reused for *bbox* argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(hexagon_KD2SFCA,\n         bbox = mapex) + \n  tm_fill(col = \"accKD2SFCA\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: KD2SFCA method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## 9.3.3 Statistical graphic visualisation\n\nWe now compare the distribution of KD2CFA accessibility values by URA Planning Region.\n\nWe must first add the planning region field into the *hexagon_KD2SFCA* simple feature data frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, \n                          join = st_intersects)\n```\n:::\n\n\n\nWe now implement the ggplot() package to plot the distribution using a boxplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=hexagon_KD2SFCA, \n       aes(y = accKD2SFCA, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n# 9.4 Modelling and Visualising Accessibility using Spatial Accessibility Measure (SAM) Method\n\n## 9.4.1 Computing SAM accessibility\n\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk.\n\n::: insights-box\n**Spatial Accessibility Models (SAM)** are a set of techniques used to measure how easily people can access services, resources, or opportunities in a geographical area. SAMs are commonly applied in areas such as healthcare, transportation, and urban planning to evaluate the distribution of services relative to the population. By incorporating spatial data, SAMs allow for a more nuanced understanding of the challenges and opportunities people face in accessing services based on their geographic location.\n\nThe formula for a basic **Spatial Accessibility Model (SAM)**, often similar to **gravity-based models** like Hansen's, can be expressed as:\n\nAi=∑jSjf(dij)A_i = \\sum\\_j \\frac{S_j}{f(d_{ij})}Ai​=j∑​f(dij​)Sj​​\n\nWhere:\n\n-   AiA_iAi​: Accessibility score for location iii (typically a population point).\n\n-   SjS_jSj​: Supply or service capacity at location jjj (e.g., the number of hospital beds, jobs, or services).\n\n-   dijd\\_{ij}dij​: Distance or travel time between location iii and service point jjj.\n\n-   f(dij)f(d\\_{ij})f(dij​): Distance decay function, which reduces the impact of service jjj based on the distance dijd\\_{ij}dij​. A common form of the distance decay function is f(dij)=dij−bf(d\\_{ij}) = d\\_{ij}\\^{-b}f(dij​)=dij−b​, where bbb is a decay parameter that controls how rapidly accessibility decreases with distance.\n\nSAMs offer a comprehensive approach to measuring and understanding the spatial distribution of services in relation to population needs, playing a key role in optimizing service delivery and improving equity in access across different geographic areas.\n:::\n\nThe code chunk below calculates Hansen’s accessibility using the *ac()* function of the **SpatialAcc package** and *data.frame()* is used to save the output in a data frame called `acc_SAM`. Notice that `SAM` is used for family argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_SAM <- data.frame(ac(hexagons$demand,\n                         eldercare$capacity,\n                         distmat_km, \n                         d0 = 50,\n                         power = 2, \n                         family = \"SAM\"))\n\ncolnames(acc_SAM) <- \"accSAM\"\nacc_SAM <- tbl_df(acc_SAM)\nhexagon_SAM <- bind_cols(hexagons, acc_SAM)\n```\n:::\n\n\n\n## 9.4.2 Visualizing SAM’s accessibility\n\nThe code chunk below uses a collection of mapping functions of the tmap package to create a high cartographic depiction of accessibility to eldercare centres in Singapore.\n\nNotice that `mapex` argument is reused for *bbox* argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(hexagon_SAM,\n         bbox = mapex) + \n  tm_fill(col = \"accSAM\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: SAM method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 3),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## 9.4.3 Statistical graphic visualisation\n\nWe now compare the distribution of SAM accessibility values by URA Planning Region.\n\nWe first add the planning region field into the *hexagon_SAM* simple feature data frame by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_SAM <- st_join(hexagon_SAM, mpsz, \n                       join = st_intersects)\n```\n:::\n\n\n\nWe now use the ggplot() package to plot the distribution by using boxplot graphical method.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=hexagon_SAM, \n       aes(y = accSAM, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}