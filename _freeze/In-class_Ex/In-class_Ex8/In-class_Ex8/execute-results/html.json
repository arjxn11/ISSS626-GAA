{
  "hash": "6dd0d1779c576b842559f34daa247d3b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 8\"\nauthor: \"Arjun Singh\"\ndate: 2024-10-21\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 8 Introduction\n\nIn this exercise, we work on reinforcing our learning from hands-on exercise 8 by conducting various tests.\n\n# 8.1 Data and Packages\n\n## 8.1.1 The Data\n\n-   **Aspatial dataset**:\n\n    -   HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n\n-   **Geospatial dataset**:\n\n    -   *MP14_SUBZONE_WEB_PL*: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n\n-   **Locational factors with geographic coordinates**:\n\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Eldercare** data is a list of eldercare in Singapore. It is in shapefile format.\n\n        -   **Hawker Centre** data is a list of hawker centres in Singapore. It is in geojson format.\n\n        -   **Parks** data is a list of parks in Singapore. It is in geojson format.\n\n        -   **Supermarket** data is a list of supermarkets in Singapore. It is in geojson format.\n\n        -   **CHAS clinics** data is a list of CHAS clinics in Singapore. It is in geojson format.\n\n        -   **Childcare service** data is a list of childcare services in Singapore. It is in geojson format.\n\n        -   **Kindergartens** data is a list of kindergartens in Singapore. It is in geojson format.\n\n    -   Downloaded from **Datamall.lta.gov.sg**.\n\n        -   **MRT** data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\n\n        -   **Bus stops** data is a list of bus stops in Singapore. It is in shapefile format.\n\n-   **Locational factors without geographic coordinates**:\n\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Primary school** data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\n    -   Retrieved/Scraped from **other sources**\n\n        -   **CBD** coordinates obtained from Google.\n\n        -   **Shopping malls** data is a list of Shopping malls in Singapore obtained from [Wikipedia](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore).\n\n        -   **Good primary schools** is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at [Local Salary Forum](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity).\n\n## 8.1.2 The Packages (Take Home Exercise 3)\n\nWe will use the following packages for our analysis:\n\n-   **tidyverse**: A collection of R packages designed for data manipulation, visualization, and exploration using a consistent, grammar-based approach.\n\n-   **sf**: Provides support for handling and analyzing spatial data in R, using simple features to represent geographic geometries.\n\n-   **httr**: Simplifies working with HTTP requests and APIs in R, enabling easy fetching and sending of web data.\n\n-   **jsonlite**: A package for parsing and generating JSON data in R, offering fast and flexible methods for converting between JSON and R objects.\n\n-   **rvest**: Facilitates web scraping in R by extracting and processing HTML content from web pages in a structured way.\n\nWe use the p_load() function of the pacman package as shown in the code chunk below to import these packages into our environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest)\nset.seed(1234)\n```\n:::\n\n\n\n## Packages for In Class Exercise 8\n\n-   **sf**: R package for handling, analyzing, and visualizing spatial data using simple features.\n\n-   **spdep**: R package for spatial dependence modeling, including spatial autocorrelation and regression analysis.\n\n-   **GWmodel**: R package for geographically weighted regression (GWR) and other localized spatial models.\n\n-   **SpatialML**: R package for spatial machine learning, offering tools for spatially explicit predictive modeling.\n\n-   **tmap**: R package for creating thematic maps, offering a flexible and layered approach for spatial visualization.\n\n-   **rsample**: R package for resampling datasets, facilitating model training and evaluation with various sampling methods.\n\n-   **Metrics**: R package for calculating common metrics for regression and classification models, such as RMSE and accuracy.\n\n-   **tidyverse**: A collection of R packages designed for data manipulation, analysis, and visualization in a consistent and coherent syntax.\n\n-   **kableExtra**: An R package that enhances the formatting and styling of tables created with `knitr::kable()`, allowing for complex and customizable tables in HTML, LaTeX, and PDF outputs.\n\n    We use the p_load() function of the pacm\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse, kableExtra)\n```\n:::\n\n\n\n# 8.2 Data\n\nWe start by importing our rds file into the environment,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/mdata.rds\")\n```\n:::\n\n\n\nWe now import the HDB Resale flat prices dataset. We narrow down the data to the time periods that we are interested in, January 2023 till September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/HDB/rawdata/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\n\n## 8.2.1 Data Sampling\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using the *initial_split()* function of the **rsample** package.\n\nAfter splitting the data, we will store them as RDS files. We use the write_rds() function to create the RDS file and the read_rds() function to load the RDS file into our environment. This facilitates computational efficiency.\n\nThe sampling below isn't done perfectly as it is completely random. Using stratified sampling may be a better approach to take for this particular situation.\n\n::: insights-box\nIn methods such as random forest, training and test data frames are enough. However, when implementing decision trees, validation data frame is needed as well as without it, the tree may be too long.\n:::\n\n::: panel-tabset\n## Data Sampling\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/train_data.rds\")\nwrite_rds(test_data, \"data/test_data.rds\")\n```\n:::\n\n\n\n## Reading RDS Files\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data=read_rds('data/train_data.rds')\ntest_data=read_rds('data/test_data.rds')\n```\n:::\n\n\n:::\n\n## 8.2.2 Data Preparation (Pre-Take Home Exercise 3)\n\nThe below code chunk tidies the data by combining the data accurately to form the entire address.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n\nWe now narrow the dataset down further to only include data from September 2024 using the below code chunk.This is done to facilitate time efficiency and speed for this In-Class Exercise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month == \"2024-09\")\n```\n:::\n\n\n\nThe code chunk below creates a list of **unique** addresses in order to avoid having the same street and area being geocoded multiple times. Geocoding is usually 'first come, first serve', so sorting actually makes the code chunk more efficient.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address))\n```\n:::\n\n\n\nThe code chunk below is used in order to acquire the postal codes of the required addresses with the help of geocoding. The jsonlite and rvest packages are important for this.\n\n**The OneMap API is used for reverse geocoding.**\n\n::: panel-tabset\n## Reverse Geocoding\n\nWe start by defining a function `get_coords`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n\n\n## Obtain Coordinates and Postal Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords, \"data/HDB/rds/coords.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords=read_rds('data/HDB/rds/coords.rds')\n```\n:::\n\n\n:::\n\n::: note-box\nBe sure to go through and verify that there are no null values with regards to coordinates. If there are, then remove those columns.\n:::\n\nDo refer to Hands-on exercise 1 to calculate the 'direct flying distance' between HDB block and locational factors such as CHAS clinics.\n\n# 8.3 Correlation Matrix\n\nAfter successfully completing the above split, we proceed to compute the correlation matrix.\n\nAs stated in previous exercises, this is a key step in predictive modelling as it helps you identify if there is multicollinearity.\n\nWe use the ggcorrmat() function for this/\n\n::: insights-box\nHaving a high level of multi-collinearity can lead to unsatisfactory models.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[,2:17])\n```\n\n::: {.cell-output-display}\n![](In-class_Ex8_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n# 8.4 **Building a non-spatial multiple linear regression model**\n\nWe create a model using the lm() function as shown in the code chunk below. After creating a model, we use the ols_regress() function of the olsrr to generate a report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nolsrr::ols_regress(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.859       RMSE                    61604.120 \nR-Squared                   0.737       MSE                3800583670.022 \nAdj. R-Squared              0.737       Coef. Var                  14.193 \nPred R-Squared              0.737       AIC                    257320.224 \nMAE                     47485.556       SBC                    257436.117 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares           DF       Mean Square       F          Sig. \n--------------------------------------------------------------------------------\nRegression    1.100899e+14           14      7.863561e+12     2069.04    0.0000 \nResidual      3.922202e+13        10320    3800583670.022                       \nTotal         1.493119e+14        10334                                         \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                 \n------------------------------------------------------------------------------------------------------------------\n                   model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n------------------------------------------------------------------------------------------------------------------\n             (Intercept)    107601.073     10601.261                  10.150    0.000     86820.546    128381.599 \n          floor_area_sqm      2780.698        90.579        0.164     30.699    0.000      2603.146      2958.251 \n            storey_order     14299.298       339.115        0.234     42.167    0.000     13634.567     14964.029 \n    remaining_lease_mths       344.490         4.592        0.442     75.027    0.000       335.489       353.490 \n                PROX_CBD    -16930.196       201.254       -0.586    -84.124    0.000    -17324.693    -16535.700 \n        PROX_ELDERLYCARE    -14441.025       994.867       -0.079    -14.516    0.000    -16391.157    -12490.893 \n             PROX_HAWKER    -19265.648      1273.597       -0.083    -15.127    0.000    -21762.144    -16769.151 \n                PROX_MRT    -32564.272      1744.232       -0.105    -18.670    0.000    -35983.305    -29145.240 \n               PROX_PARK     -5712.625      1483.885       -0.021     -3.850    0.000     -8621.328     -2803.922 \n               PROX_MALL    -14717.388      2007.818       -0.044     -7.330    0.000    -18653.100    -10781.675 \n        PROX_SUPERMARKET    -26881.938      4189.624       -0.035     -6.416    0.000    -35094.414    -18669.462 \nWITHIN_350M_KINDERGARTEN      8520.472       632.812        0.072     13.464    0.000      7280.038      9760.905 \n   WITHIN_350M_CHILDCARE     -4510.650       354.015       -0.074    -12.741    0.000     -5204.589     -3816.711 \n         WITHIN_350M_BUS       813.493       222.574        0.020      3.655    0.000       377.205      1249.781 \n       WITHIN_1KM_PRISCH     -8010.834       491.512       -0.102    -16.298    0.000     -8974.293     -7047.376 \n------------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n# 8.5 Multicollinearity check with VIF \n\nDo refer to the [Performance documentation](https://cran.r-project.org/web/packages/performance/index.html) to gain a better understanding of the package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvif= performance::check_collinearity(price_mlr)\nkable(vif,\n      caption=\"Variance Inflation Factor (VIF) Results\")%>%\n  kable_styling(font_size = 18)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Variance Inflation Factor (VIF) Results</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> VIF </th>\n   <th style=\"text-align:right;\"> VIF_CI_low </th>\n   <th style=\"text-align:right;\"> VIF_CI_high </th>\n   <th style=\"text-align:right;\"> SE_factor </th>\n   <th style=\"text-align:right;\"> Tolerance </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_low </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> floor_area_sqm </td>\n   <td style=\"text-align:right;\"> 1.126308 </td>\n   <td style=\"text-align:right;\"> 1.104360 </td>\n   <td style=\"text-align:right;\"> 1.152871 </td>\n   <td style=\"text-align:right;\"> 1.061276 </td>\n   <td style=\"text-align:right;\"> 0.8878567 </td>\n   <td style=\"text-align:right;\"> 0.8673997 </td>\n   <td style=\"text-align:right;\"> 0.9055016 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> storey_order </td>\n   <td style=\"text-align:right;\"> 1.206586 </td>\n   <td style=\"text-align:right;\"> 1.181102 </td>\n   <td style=\"text-align:right;\"> 1.235657 </td>\n   <td style=\"text-align:right;\"> 1.098447 </td>\n   <td style=\"text-align:right;\"> 0.8287846 </td>\n   <td style=\"text-align:right;\"> 0.8092862 </td>\n   <td style=\"text-align:right;\"> 0.8466672 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> remaining_lease_mths </td>\n   <td style=\"text-align:right;\"> 1.363528 </td>\n   <td style=\"text-align:right;\"> 1.331762 </td>\n   <td style=\"text-align:right;\"> 1.398335 </td>\n   <td style=\"text-align:right;\"> 1.167702 </td>\n   <td style=\"text-align:right;\"> 0.7333919 </td>\n   <td style=\"text-align:right;\"> 0.7151363 </td>\n   <td style=\"text-align:right;\"> 0.7508850 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_CBD </td>\n   <td style=\"text-align:right;\"> 1.905054 </td>\n   <td style=\"text-align:right;\"> 1.852553 </td>\n   <td style=\"text-align:right;\"> 1.960788 </td>\n   <td style=\"text-align:right;\"> 1.380237 </td>\n   <td style=\"text-align:right;\"> 0.5249196 </td>\n   <td style=\"text-align:right;\"> 0.5099991 </td>\n   <td style=\"text-align:right;\"> 0.5397957 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_ELDERLYCARE </td>\n   <td style=\"text-align:right;\"> 1.178400 </td>\n   <td style=\"text-align:right;\"> 1.154108 </td>\n   <td style=\"text-align:right;\"> 1.206522 </td>\n   <td style=\"text-align:right;\"> 1.085541 </td>\n   <td style=\"text-align:right;\"> 0.8486080 </td>\n   <td style=\"text-align:right;\"> 0.8288284 </td>\n   <td style=\"text-align:right;\"> 0.8664703 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_HAWKER </td>\n   <td style=\"text-align:right;\"> 1.187828 </td>\n   <td style=\"text-align:right;\"> 1.163132 </td>\n   <td style=\"text-align:right;\"> 1.216262 </td>\n   <td style=\"text-align:right;\"> 1.089875 </td>\n   <td style=\"text-align:right;\"> 0.8418729 </td>\n   <td style=\"text-align:right;\"> 0.8221915 </td>\n   <td style=\"text-align:right;\"> 0.8597474 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MRT </td>\n   <td style=\"text-align:right;\"> 1.240457 </td>\n   <td style=\"text-align:right;\"> 1.213579 </td>\n   <td style=\"text-align:right;\"> 1.270718 </td>\n   <td style=\"text-align:right;\"> 1.113758 </td>\n   <td style=\"text-align:right;\"> 0.8061545 </td>\n   <td style=\"text-align:right;\"> 0.7869568 </td>\n   <td style=\"text-align:right;\"> 0.8240092 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_PARK </td>\n   <td style=\"text-align:right;\"> 1.195883 </td>\n   <td style=\"text-align:right;\"> 1.170847 </td>\n   <td style=\"text-align:right;\"> 1.224588 </td>\n   <td style=\"text-align:right;\"> 1.093564 </td>\n   <td style=\"text-align:right;\"> 0.8362021 </td>\n   <td style=\"text-align:right;\"> 0.8166011 </td>\n   <td style=\"text-align:right;\"> 0.8540825 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MALL </td>\n   <td style=\"text-align:right;\"> 1.409846 </td>\n   <td style=\"text-align:right;\"> 1.376277 </td>\n   <td style=\"text-align:right;\"> 1.446409 </td>\n   <td style=\"text-align:right;\"> 1.187369 </td>\n   <td style=\"text-align:right;\"> 0.7092975 </td>\n   <td style=\"text-align:right;\"> 0.6913675 </td>\n   <td style=\"text-align:right;\"> 0.7265978 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_SUPERMARKET </td>\n   <td style=\"text-align:right;\"> 1.154751 </td>\n   <td style=\"text-align:right;\"> 1.131493 </td>\n   <td style=\"text-align:right;\"> 1.182124 </td>\n   <td style=\"text-align:right;\"> 1.074594 </td>\n   <td style=\"text-align:right;\"> 0.8659873 </td>\n   <td style=\"text-align:right;\"> 0.8459353 </td>\n   <td style=\"text-align:right;\"> 0.8837880 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_KINDERGARTEN </td>\n   <td style=\"text-align:right;\"> 1.125809 </td>\n   <td style=\"text-align:right;\"> 1.103886 </td>\n   <td style=\"text-align:right;\"> 1.152360 </td>\n   <td style=\"text-align:right;\"> 1.061042 </td>\n   <td style=\"text-align:right;\"> 0.8882499 </td>\n   <td style=\"text-align:right;\"> 0.8677846 </td>\n   <td style=\"text-align:right;\"> 0.9058910 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_CHILDCARE </td>\n   <td style=\"text-align:right;\"> 1.335594 </td>\n   <td style=\"text-align:right;\"> 1.304923 </td>\n   <td style=\"text-align:right;\"> 1.369351 </td>\n   <td style=\"text-align:right;\"> 1.155679 </td>\n   <td style=\"text-align:right;\"> 0.7487304 </td>\n   <td style=\"text-align:right;\"> 0.7302729 </td>\n   <td style=\"text-align:right;\"> 0.7663289 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_BUS </td>\n   <td style=\"text-align:right;\"> 1.148544 </td>\n   <td style=\"text-align:right;\"> 1.125564 </td>\n   <td style=\"text-align:right;\"> 1.175729 </td>\n   <td style=\"text-align:right;\"> 1.071701 </td>\n   <td style=\"text-align:right;\"> 0.8706679 </td>\n   <td style=\"text-align:right;\"> 0.8505364 </td>\n   <td style=\"text-align:right;\"> 0.8884435 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_1KM_PRISCH </td>\n   <td style=\"text-align:right;\"> 1.550879 </td>\n   <td style=\"text-align:right;\"> 1.511876 </td>\n   <td style=\"text-align:right;\"> 1.592853 </td>\n   <td style=\"text-align:right;\"> 1.245343 </td>\n   <td style=\"text-align:right;\"> 0.6447958 </td>\n   <td style=\"text-align:right;\"> 0.6278044 </td>\n   <td style=\"text-align:right;\"> 0.6614298 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vif)+\n  theme(axis.text.x = element_text(angle=45, hjust=1))\n```\n:::\n\n\n\n# 8.6 Predictive Modelling with MLR\n\nGiven we computed the bandwidth in hands-on exercise 8, we read the RDS file for this in-class exercise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/bw_adaptive.rds\")\n```\n:::\n\n\n\n::: insights-box\nBelow was the code used to compute the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n:::\n\n# 8.7 Model Calibration\n\nWe will read the RDS file that was computed in Hands-on Exercise 8.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive=read_rds('data/gwr_adaptive.rds')\n```\n:::\n\n\n\n::: insights-box\nBelow is the code chunk we used to compute the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n:::\n\n## 8.7.1 Predicting with test data\n\nWe now use the RDS file computed in hands-on exercise 8 as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive=read_rds('data/gwr_bw_test_adaptive.rds')\n```\n:::\n\n\n\n::: insights-box\nBelow was the code chunk used to compute the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n:::\n\n# **8.6 Preparing coordinates data**\n\n## **8.6.1 Extracting Coordinate Data**\n\nWe extract the coordinates for each of the following three data-frames: mdata, train_data, test_data.\n\nThe st_coordinates() function is used as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\n## **8.6.2 Dropping the Geometry Field**\n\nWe now drop the geometry field from the train_data data-frame.\n\nThe geometry column was dropped as it is needed in order for it to be a data-frame that can be used in for calibrating the random forest model. Using the Simple Feature data-frame would **NOT** work.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n# **8.7 Calibrating Random Forest Models**\n\nWe will use the [ranger](https://cran.r-project.org/web/packages/ranger/index.html) package to do this. Please click the link to learn more about the ranger package, which is primarily used to conduct random forest analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       730419635 \nR squared (OOB):                  0.949447 \n```\n\n\n:::\n:::\n\n\n\n# **8.8 Calibrating Geographical Random Forest Models**\n\nWe now use the [SpatialML](https://cran.r-project.org/web/packages/SpatialML/index.html)package to create a model that will allow us to calibrate a model to predict HDB resale price. Please follow the embedded link to learn more about the SpatialML package.\n\n## **8.8.1 Calibrating using training data**\n\nThe code chunk below is used to calibrate a geographic ranform forest model by using the `grf()` function of the **SpatialML** package.\n\nWe read the RDS file we created in hands-on exercise 8 as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive=read_rds('data/gwRF_adaptive.rds')\n```\n:::\n\n\n\n::: insights-box\nThe below code chunk was implemented in order to compute the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n:::\n\n\n:::\n\n## 8.8.2 Predicting by using test data\n\n### 8.8.2.1 Preparing the test data\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n### 8.8.2.2 Predicting with test data\n\nWe now implement the `predict.grf()` function of the spatialML package to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n::: panel-tabset\n## Calibration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_pred, \"data/GRF_pred.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- read_rds(\"data/GRF_pred.rds\")\n```\n:::\n\n\n:::\n\n### 8.8.2.3 Converting the output into a data-frame\n\nWe implement the as.data.frame() function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n\n\nIn the code chunk below, we use the `cbind()` function to append the predicted values onto the test_data data-frame.\n\n::: panel-tabset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| eval: false\n\ntest_data_p <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n\n\n## RDS File Creation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| eval: false\n\nwrite_rds(test_data_p, \"data/test_data_p.rds\")\n```\n:::\n\n\n\n## Reading RDS File\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p=read_rds('data/test_data_p.rds')\n```\n:::\n\n\n:::\n\n## 8.8.3 Root Mean Square Error (RMSE)\n\nThe root mean square error (RMSE) allows us to measure how far the predicted values are from the observed values in a regression analysis.\n\nIn the code chunk below, the rmse() function of the Metrics package is used to compute the RMSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price,\n     test_data_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27302.16\n```\n\n\n:::\n:::\n\n\n\n## 8.8.4 Visualizing the predicted values\n\nAlternatively, we can use a scatterplot to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex8_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}