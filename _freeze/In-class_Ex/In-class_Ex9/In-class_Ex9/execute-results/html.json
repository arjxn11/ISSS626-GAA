{
  "hash": "2cd6663ffd89dfdc96f39e72ec625fad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 9\"\nauthor: \"Arjun Singh\"\ndate: 2024-10-28\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 9 Introduction\n\nIn this exercise, we will perform a variety of exercises to reinforce our learning from Hands-on Exercise 9.\n\nWe also discussed further data preparation and wrangling techniques for take-home exercise 3, similar to how we did in In-class Exercise 8.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse)\nset.seed(1234)\n```\n:::\n\n\n\nHexagons are always preferred to squares as they're better in reducing the sampling bias, due to the low perimeter-to-area ratio. That is why when building a so called 'artificial boundary', we prefer to use hexagons.\n\nThere is 'no good size' however you can set it based on the local context of your study area. Using this method allows you to avoid revealing confidential information, especially with regards to low rise buildings for example,\n\n## 9.1.2 Importing the data\n\n## 9.1.2.1 Geospatial Data Importing and Wrangling\n\nThree geospatial data will be imported from the *data/geospatial* sub-folder. They are MP14_SUBZONE_NO_SEA_PL, hexagons and ELDERCARE.\n\nThe code chunk below is used to import these three data sets shapefile by using *st_read()* of **sf** packages.\n\n::: panel-tabset\n\n## MPSZ\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\In-class_Ex\\In-class_Ex9\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n## Hexagons\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\")%>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hexagons' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\In-class_Ex\\In-class_Ex9\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\n## Eldercare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\")%>%\n  st_transform(crs=3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\In-class_Ex\\In-class_Ex9\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n::: note-box\nNotice how we transform the EPSG code above using the st_transform() function. This is Singapores EPSG code and also ensures consistency during Analysis. \n:::\n\n## 9.1.2.2 Aspatial Data Importing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nODMatrix=read_csv('data/aspatial/OD_Matrix.csv', \n                  skip=0)\n```\n:::\n\n\n::: panel-tabset\n\n## Supply\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare= eldercare%>%\n  select(OBJECTID, ADDRESSPOS)%>%\n  mutate(capacity=100)\n```\n:::\n\n\n\n## Demand\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)\n```\n:::\n\n\n\n## OD Matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat_km=as.matrix(distmat/1000)\n```\n:::\n\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen= data.frame(ac(hexagons$demand,\n                          eldercare$capacity,\n                          distmat_km,\n                          d0=50,\n                          power=2,\n                          family='Hansen'))\n```\n:::\n\n\n\nWe now tidy the output.\n\n\n::: panel-tabset\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acc_Hansen)='accHansen'\nacc_hansen=as_tibble(acc_Hansen)\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n\n\n:::\n\n\n# 9.1.3 Hansen method: The Map\n\nWe can now plot a highly cartographic map using functions of the tmap package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapex <- st_bbox(hexagons)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex9_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can also use the ggbetweenstats() function of the ggstatsplot package. This gives us a more analytical plot to provide a better perspective.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen=st_join(hexagon_Hansen, mpsz, join=st_intersects)\nggbetweenstats(data=hexagon_Hansen,\n  x= REGION_N,\n  y= accHansen,\n  type='p')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex9_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::",
    "supporting": [
      "In-class_Ex9_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}