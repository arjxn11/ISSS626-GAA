{
  "hash": "5f94e918906e39e827a715809567159e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 6\"\nauthor: \"Arjun Singh\"\ndate: 2024-09-30\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\nformat:\n  html:\n    css: styles.css \n---\n\n\n\n# 6 Introduction\n\nIn this in-class exercise, we will reinforce our learning from Hands-on Exercise 6 and conduct Emerging Hot/Cold Spot Analysis.\n\nFor this exercise we will use Hunan GDPPC data.\n\n::: insights-box\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\n-   Building a space-time cube,\n-   Calculating Getis-Ord local Gi\\* statistic for each bin by using an FDR correction,\n-   Evaluating these hot and cold spot trends by using Mann-Kendall trend test,\n-   Categorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin.\n:::\n\n# 6.1 Data and Packages\n\nWe first import the necessary packages using the p_load() function of the pacman package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, plotly, Kendall)\nset.seed(1234)\n```\n:::\n\n\n\nThe data that we use for this exercise are as follows:\n\n-   Hunan, which is a geospatial dataset in ESRI shapefile format.\n\n-   Hunan_GDPPC, attribute data in csv format.\n\nWe now import the Hunan Shapefile data into our environment using the st_read() function of the sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\arjxn11\\ISSS626-GAA\\In-class_Ex\\In-class_Ex6\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nWe now import the aspatial data, Hunan_GDPPC into our environment using the read_csv() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n```\n:::\n\n\n\n# 6.2 Creating a Space-Time Cube\n\nWe now use the [`spacetime()`](https://sfdep.josiahparry.com/reference/spacetime.html) function of the sfdep package to create a spatio-temporal cube.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_st <- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n```\n:::\n\n\n\nTo verify if the cube has been create, we implement the is_spacetime_cube() function of the sfdep package as shown in the code chunk eblow.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(GDPPC_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nBased on the above output, we can confirm that it has been created as intended.\n\n# 6.3 Computing Local Gi statistics\n\n## 6.3.1 Deriving the Spatial Weights\n\nWe implement the below code chunk to identify neighbors and calculate the inverse-distance weights.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_nb <- GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb, \n                             geometry, \n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n\n\n::: insights-box\n-   `activate()` of dplyr package is used to activate the geometry context\n-   `mutate()` of dplyr package is used to create two new columns *nb* and *wt*.\n-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`\n    -   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.\n:::\n\n## 6.3.2 Computing Gi\n\nWe can use these new columns to manually calculate the local Gi for each location. We do this by grouping by *Year* and using the `local_gstar_perm()` function of the sfdep package. After this, we use the `unnest()` function to unnest the *gi_star* column of the newly created *gi_starts* data.frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars <- GDPPC_nb %>% \n  group_by(Year) %>% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n```\n:::\n\n\n\n## 6.3.3 Mann-Kendall Test\n\nWe the above Gi calculations, we can now conduct the Mann-Kendall test to evaluate each location for a trend.\n\nIn the code chunk below, we use Changsha,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg <- gi_stars %>% \n  ungroup() %>% \n  filter(County == \"Changsha\") %>% \n  select(County, Year, gi_star)\n```\n:::\n\n\n\nWe can now produce a plot by using the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex6_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nAlternatively, we can also create an interactive plot using the ggplotly() function of the plotly package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-94a1e27ac577598af369\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-94a1e27ac577598af369\">{\"x\":{\"data\":[{\"x\":[2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021],\"y\":[5.0282995066289047,5.1692011079782345,5.2958892892912894,5.6039537096873993,6.2788862246004742,5.9357455762937326,5.7508709054298892,5.6942475830114576,5.7085054237054784,5.7608121561733521,6.097127241257188,6.0036547779673146,6.2028053540357906,6.0371816202738318,6.579432171885526,5.7669155664195504,5.7486534794156494],\"text\":[\"Year: 2005<br />gi_star: 5.028300\",\"Year: 2006<br />gi_star: 5.169201\",\"Year: 2007<br />gi_star: 5.295889\",\"Year: 2008<br />gi_star: 5.603954\",\"Year: 2009<br />gi_star: 6.278886\",\"Year: 2010<br />gi_star: 5.935746\",\"Year: 2011<br />gi_star: 5.750871\",\"Year: 2012<br />gi_star: 5.694248\",\"Year: 2013<br />gi_star: 5.708505\",\"Year: 2014<br />gi_star: 5.760812\",\"Year: 2015<br />gi_star: 6.097127\",\"Year: 2016<br />gi_star: 6.003655\",\"Year: 2017<br />gi_star: 6.202805\",\"Year: 2018<br />gi_star: 6.037182\",\"Year: 2019<br />gi_star: 6.579432\",\"Year: 2020<br />gi_star: 5.766916\",\"Year: 2021<br />gi_star: 5.748653\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283104,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":43.105022831050235},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[2004.2,2021.8],\"tickmode\":\"array\",\"ticktext\":[\"2005\",\"2010\",\"2015\",\"2020\"],\"tickvals\":[2005,2010,2015,2020],\"categoryorder\":\"array\",\"categoryarray\":[\"2005\",\"2010\",\"2015\",\"2020\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Year\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[4.9507428733660737,6.656988805148357],\"tickmode\":\"array\",\"ticktext\":[\"5.0\",\"5.5\",\"6.0\",\"6.5\"],\"tickvals\":[5,5.5,6,6.5],\"categoryorder\":\"array\",\"categoryarray\":[\"5.0\",\"5.5\",\"6.0\",\"6.5\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"gi_star\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(179,179,179,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"673476ec9f4\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"673476ec9f4\",\"visdat\":{\"673476ec9f4\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### 6.3.3.1 Mann-Kendall Test Report\n\nA Monotonic series or function is one that only increases (or decreases) and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.\n\n-   **H0: No monotic trend.**\n\n-   **H1: Monotonic trend is present**\n\n::: note-box\nTau ranges between -1 and 1 where:\n\n-   -1 is a perfectly decreasing series.\n\n-   1 is a perfectly increasing series.\n:::\n\nWe implement the below code chunk to obtain the required report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  <dbl>   <dbl> <dbl> <dbl> <dbl>\n1 0.485 0.00742    66  136.  589.\n```\n\n\n:::\n:::\n\n\n\n::: note-box\nNote that `sl`in the output above is the p-value in this situation.\n:::\n\nFrom the above output, we can infer that there is a slight upward but insignificant trend.\n\n### 6.3.3.2 Mann-Kendall Test Data-Frame\n\nWe can perform the above steps for every location by using the group_by() function of the dplyr package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- gi_stars %>%\n  group_by(County) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  County        tau        sl     S     D  varS\n  <chr>       <dbl>     <dbl> <dbl> <dbl> <dbl>\n1 Anhua      0.191  0.303        26  136.  589.\n2 Anren     -0.294  0.108       -40  136.  589.\n3 Anxiang    0      1             0  136.  589.\n4 Baojing   -0.691  0.000128    -94  136.  589.\n5 Chaling   -0.0882 0.650       -12  136.  589.\n6 Changning -0.750  0.0000318  -102  136.  589.\n```\n\n\n:::\n:::\n\n\n\nWe can sort the data-frame to highlight emerging hot/cold spots by implementing the below code chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:10)\nhead(emerging)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  County        tau         sl     S     D  varS\n  <chr>       <dbl>      <dbl> <dbl> <dbl> <dbl>\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589.\n6 Wugang     -0.809 0.00000712  -110  136.  589.\n```\n\n\n:::\n:::\n\n\n\n# 6.4 Emerging hot/cold spot analysis\n\nWe now perform EHSA by using the [`emerging_hotspot_analysis()`](https://sfdep.josiahparry.com/reference/emerging_hotspot_analysis.html) function of the sfdep package.\n\nIt takes a spacetime object x (i.e. `GDPPC_st`), and the quoted name of the variable of interest (i.e. GDPPC) as the .var argument.\n\nThe `k` argument is used to specify the number of time lags which is set to 1 by default.\n\n`nsim` is number of simulations to be performed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n\n\n## 6.4.1 Visualizing the distribution of EHSA Classes\n\nWe now implement various ggplot2 functions to reveal the distributions of EHSA classes as a bar chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex6_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nThe figure above shows that the 'sporadic coldspot' class has a high number of county's.\n\n## 6.4.2 Visualizing EHSA \n\nBefore we can proceed with visualization, we need to join both *hunan* and *ehsa* together by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_ehsa <- hunan %>%\n  left_join(ehsa,\n            by = join_by(County == location))\n```\n:::\n\n\n\nWe can now implement functions of the tmap package to produce a visualization for the above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig <- hunan_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex6_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nWe can further look at this in greater detail by each location as well if required.\n",
    "supporting": [
      "In-class_Ex6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}