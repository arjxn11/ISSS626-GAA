---
title: "Hands-on Exercise 1"
author: "Arjun Singh"
date: 2024-08-22
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---



## 1 Getting Started.

### 1.1 Install and launch R packages

The code chunk below uses p_load() of the pacman package to check if tidyverse has been installed. If it has been, it will be launched into R.



```{r}
pacman::p_load(sf, tidyverse)


```



### 1.2 Importing the data

#### 1.2.1 Importing polygon feature data in Shapefile format.

The relevant data is now going to be imported using the st_read() function of package sf.



```{r}
mpsz=st_read(dsn = "data/geospatial",
             layer="MP14_SUBZONE_WEB_PL")
```



From the output above, it can be inferred that there are 323 multipolygon features and 15 fields in `mpsz`, which is projected in the ***SVY21*** coordinate system.

#### 1.2.2 Importing polygon feature data in Shapefile form.



```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```



The output above reveals that there are 3138 features and 2 fields in the `cyclingpath` linestring feature data frame, which is also projected in the SVY21 coordinate system.

#### 1.2.3 Importing GIS data in kml format.



```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```



The output reveals that `preschool` is a **point feature data-frame,** with 2290 features and 2 fields. Unlike the two previous simple feature data-frames, `preschool`is projected using the WGS84 coordinate system.

### 1.3 Checking the contents of a Simple Feature Data-Frame.

We now focus on the different methods of retrieving information related to the contents of a simple feature data-frame.

#### 1.3.1 Working with st_geometry()

The column in the sf data.frame that contains the geometries is a list of class `sfc`. The geometry list–column can be retrieved using the mpsz\$geom or mpsz\[\[1\]\], but st_geometry, shown below, is the most commonly used method.



```{r}
st_geometry(mpsz)
```



#### 1.3.2 Working with glimpse()

Using glimpse(), a function of the **dplyr** package, we can learn more about the data-frame beyond the basic feature information.



```{r}
glimpse(mpsz)
```



#### 1.3.3 Working with head()

The function head(), an in-built R function, will reveal complete information about a feature object.



```{r}
head(mpsz, n=5)
```



### 1.4 Plotting the Geospatial Data.

In Geopspatial Data Science, simply looking at the feature information is not enough. Visualizing the geospatial features is a key step to improve our understanding of the data. We can use plot(), an in-built function of R Graphic, to facilitate visualization.



```{r}
plot(mpsz)
```



By default, a multi-plot of all attributes is obtained, up to a reasonable maximum as shown above. We can also choose to plot only the geometry by implementing the code shown below.



```{r}
plot(st_geometry(mpsz))
```



Alternatively, we can also choose to plot the sf object by using a specific attribute as shown in the code chunk below.



```{r}
plot(mpsz['PLN_AREA_N'])
```



~*It must be noted that plot() plots the geospatial data for a quick overview. For high cartographic quality, R packages such as tmap should be used.*~

### 1.5 Working with Projection

Map projection is an important property of geospatial data. When performing geoprocessing using two geospatial datasets, we need to ensure that they are both projected using similar coordinate systems.

#### 1.5.1 Assigning EPSG code to a Simple Feature Data-Frame.

One of the most common issues faced when importing Geospatial data into R is that the coordinate system of the source data was either missing (for example, due to missing .proj for ESRI Shapefile) or wrongly assigned during the importing process.

By using the st_crs() function of the sf package, we can view the **Coordinate Reference System** of `mpsz`.



```{r}
st_crs(mpsz)
```



Although the `mpsz` data-frame is projected in SVY21, it indicates that the EPSG is 9001. This is the wrong EPSG- the correct EPSG code for SVY21 should be 3414.

To correct the EPSG code, we use st_set_crs() of the sf package as shown below.



```{r}
mpsz3414<- st_set_crs(mpsz, 3414)
```



We now check the CSR again using the st_crs() function from earlier,



```{r}
st_crs(mpsz3414)
```



#### 1.5.2 Transforming the projection of preschool from WGS84 to SVY21.

When analyzing geospatial data, its common to have to transform the original data from geographic coordinate system to project coordinate system because the geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.

Earlier, we learnt that the preschool simple feature data-frame was in WGS84 format. In this scenario, using st_set_crs() is not appropriate because we need to *re-project* `preschool` from one coordinate system to another coordinate system mathematically.

We use the st_transform() function for this.



```{r}
preschool3414<- st_transform(preschool, crs=3414)
```



We now check for the contents of the newly transformed data-frame using the st_geometry() function from earlier.



```{r}
st_geometry(preschool3414)
```



It is now the appropriate projected coordinate system now- SVY21. Additionally, if you refer to the *Bounding Box* data above, the values are greater than the 0-360 range of decimal degrees commonly used by most geographic coordinate systems.

### 1.6 Working with Aspatial Data

It is not unusual to come across data such as the `listing`data set obtained from AirBnb. Such data is called Aspatial data. This is because it has separate data fields containing the x and y coordinates of the data points, unlike Geospatial data.

#### 1.6.1 Importing Aspatial Data

Since the `listing` data set is in csv format, we use the read_csv() function of the **readr** package to import it.



```{r}
listings <- read_csv("data/aspatial/listings.csv")
```



We will now examine if the data file has been imported correctly for analysis.



```{r}
list(listings)
```



The above output informs us that there are 18 columns and 3540 rows of data. Two important columns that will be used in the next phase of the analysis are the latitude and longitude columns. These columns are in decimal degree format. As a best guess, it is assumed that the data is projected in the WGS84 Geographic Coordinate System.

#### 1.6.2 Creating a Simple Feature Data-Frame from Aspatial data.

The st_as_sf() function of the sf package is used to convert the `listing` data-frame into a simple feature data-frame.



```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```



We now examine the contents of the newly created data-frame.



```{r}
glimpse(listings_sf)
```



A new column 'geometry' has been added into the data-frame, while the latitude and longitude columns have been dropped.

### 1.7 Geoprocessing with the sf package.

The sf package offers a wide range of geoprocessing (also known as GIS analysis) functions in addition to the functions it provides to facilitate handling of geospatial data.

#### 1.7.1 Buffering

Scenario: The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. We are tasked with determining the extent of the land that needs to be acquired and the total area.

Solution:

The st_buffer() function of the sf package is used to ciompute the 5-meter buffers around cycling paths.



```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```



Now, we calculate the area of the buffers using the st_area() function.



```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```



Finally, we use sum() to derive the total area of land required.



```{r}
sum(buffer_cycling$AREA)
```



**Q.E.D**

#### 1.7.2 Point-in-polygon count

Scenario: A pre-school service group wants to find out the number of pre-schools in each Planning Subzone.

Solution:

Using the code chunk below, we are able to firstly identify the pre-schools located inside each Planning Subzone (using the st_intersects() function), after which we use the length() function to calculate the number of pre-schools that fall inside each Planning Subzone.



```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```



The summary statistics are below.



```{r}
summary(mpsz3414$`PreSch Count`)
```



To obtain a list of the Planning Subzones with the most pre-schools, we use the top_n() function of the dplyr package.



```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```



The density of pre-schools by Planning Subzone is now calculated using the st_area() function of the sf package and the mutate() function of the dplyr package.



```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```



### 1.8 Exploratory Data Analysis

We now conduct Exploratory Data Analysis to gain a better understanding of the data using relevant visualizations plotted using the ggplot2 package.

First, we plot a histogram to reveal the distribution of `PreSch Density` using the hist() function of R Graphics.



```{r}
hist(mpsz3414$`PreSch Density`)
```



Although the method is straightforward, the output is far from the required quality and has limited room for further customization. Using ggplot2, we create a higher quality histogram that fits our needs better.



```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="purple") +
  labs(title = "Are pre-schools evenly distributed across Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```



To gain a better understanding of the relationship between pre-school density and pre-school count, we plot a scatterplot using ggplot2.



```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue",
             na.rm=TRUE) +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

