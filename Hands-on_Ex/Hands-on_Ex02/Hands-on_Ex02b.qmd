---
title: "Hands On Exercise 2- Part 2: 2nd order Spatial Point Patterns"
author: "Arjun Singh"
date: 2024-08-28
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
  warning: false
---

# 2.7 Overview

Spatial Point Pattern Analysis involves examining the distribution or arrangement of a set of points on a surface. These points can represent various phenomena, such as:

-   Events like crime, traffic accidents, or disease onset,

-   Business services, such as coffee shops and fast-food outlets,

-   Facilities like childcare and eldercare centers.

In this hands-on exercise, we will utilize functions from the `spatstat` package to explore the spatial distribution of childcare centers in Singapore.

Our primary questions are:

1.  Are childcare centers in Singapore randomly distributed across the country?

2.  If they are not randomly distributed, where are the areas with a higher concentration of childcare centers?

## 2.7.1 Data and Libraries

The data being used are as follows:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

For this exercise, we will use the following R packages:

-   **sf**, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   **spatstat**, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   **raster**, which reads, writes, manipulates, analyses and model of gridded spatial data (i.e.Â raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   **tidyverse** simplifies spatial analysis by offering a consistent and efficient framework that facilitates working with spatial data.

-   **tmap** which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.

We will load in the packages above by implementing the code chunk below.

<details>

<summary>Click to show/hide code</summary>

```{r}
pacman::p_load(sf, spatstat, raster, tmap, tidyverse)
```

</details>

<details>

<summary>Click to show/hide code</summary>

```{css}
.insights-box {
  background-color: #f0f9f5;
  border-left: 5px solid #28a745;
  padding: 15px;
  border-radius: 5px;
  margin: 20px 0;
  font-size: 1rem;
  display: flex;
  align-items: flex-start;
}

.insights-box::before {
  content: "\1F4A1"; /* Light bulb emoji */
  font-size: 1.5rem;
  margin-right: 10px;
  color: #28a745;
}
```

</details>

<details>

<summary>Setting seed</summary>

```{r}
set.seed(1234)
```

</details>

# 2.8 Spatial Data Wrangling

## 2.8.1 Importing the Spatial Data

We will now import the *GEOJSON* using the **st_read()** function of the **sf** package.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

We notice that its projected in the **WGS84** system so we transformed the **EPSG** code to **3414**, to be consistent with the **SVY21** projected coordinate system of Singapore.

We will now import the coastal outline data using the **st_read()** function again.

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

This is projected correctly in the SVY21 system, however we will verify the EPSG code using the **st_crs()** function of the sf package.

```{r}
st_crs(sg_sf)
```

We notice that the EPSG code isn't correct, so we transform it to the correct value of 3414 using the **st_transform()** function.

```{r}
st_transform(sg_sf, 3414)
```

Now, we import the Master Planning Subzone data using the **st_read()** function

```{r}
mpsz_sf <- st_read(dsn = "data", 
                   layer = "MP14_SUBZONE_WEB_PL")
```

We must now verify the EPSG code for `mpsz_sf` before proceeding to facilitate analysis.

```{r}
st_crs(mpsz_sf)
```

Since it has the wrong EPSG code, we will transform it to the correct value of 3414.

```{r}
st_transform(mpsz_sf, 3414)
```

Now, we can proceed with the analysis as all the data-frames are projected consistently.

::: insights-box
Note that when working transforming crs, we can code more efficiently by using the code chunk below for example (which we implemented above). Using '%\>%' allows you to chain multiple operations together.

```{r}
#childcare_sf=st_read("data/child-care-services-geojson.geojson") %>%
 # st_transform(crs = 3414) 
```
:::

## 2.8.2 Mapping the Geospatial Data

We prepare a pin map using functions from the **tmap** package.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

There are several benefits to using a pin map in this situation. Firstly, since it is an interactive map we can move around the map freely and look at specific areas that we're interested in. Second, we can query the information for each simple feature by simply clicking them. Additionally, you can also change the background of the internet map layer- currently, three internet map layers are provided (ESRI.WorldGrayCanvas \[default\], ESRI.WorldTopoMap, and OpenStreetMap.)

# 2.9 Geospatial Data Wrangling

In this section, we will develop a better understanding of how we can convert a simple feature data-frame to sp's **Spatial class.**

## 2.9.1 Converting simple feature data-frames to sp's Spatial Class

We can convert geospatial data from a simple feature data-frame to sp's Spatial class using the as_Spatial() function of the sf package. The code chunk below showcases how it will be done.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

Now, we want to have a look at each of these data-frames. We do it using the glimpse() function.

::: panel-tabset
## Childcare

```{r}
glimpse(childcare)
```

We verify that is now in the form that we intended for it to be in- Spatial Points Data-Frame.

## MPSZ

```{r}
glimpse(mpsz)
```

We verify that is now in the form that we intended for it to be in- Spatial Polygons Data-Frame.

## sg

```{r}
glimpse(sg)
```

We verify that is now in the form that we intended for it to be in- Spatial Polygons Data-Frame.
:::

## 2.9.2 Converting Spatial Class into generic sp format.

In order to use the **spatstat** package, the data must be in ***ppp*** object form. There is no direct way to convert Spatial Classes into ppp objects. So, we start by converting the Spatial Classes into Spatial Objects first.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

::: panel-tabset
## childcare_sp

```{r}
glimpse(childcare_sp)
```

We have successfully converted to an object as opposed to a class like above.

## sg_sp

```{r}
glimpse(sg_sp)
```

We have successfully converted to an object as opposed to a class like above.
:::

::: insights-box
Generally, Spatial Classes are more structured and more suitable for complex and more rigorous Spatial Analytics. Generic 'sp' objects allow for simpler, more flexible, data manipulation where having a format Spatial Class is necessary.
:::

## 2.9.3 Converting the generic sp format into Spatstat's *ppp* format.

To convert the spatial data into the required ppp form, we implement the **as.ppp()** function of the spatstat package. ::: panel-tabset \## Conversion to ppp object

```{r}
childcare_ppp=as.ppp(childcare_sf)
(childcare_ppp)
```

## Summary of newly obtained ppp object

```{r}
summary(childcare_ppp)
```

:::

We will now plot the newly obtained *ppp object* to visualize the differences to previous data-frames.

```{r}
plot(childcare_ppp)
```

## 2.9.4 Handling duplicated points

We check `childcare_ppp` for any duplicates in order to handle duplicates if they are present.

```{r}
any(duplicated(childcare_ppp))
```

We now check for the points of co-incidence using the **multiplicity()** function.

```{r}
multiplicity(childcare_ppp)
```

We further verify if there are any duplicates by checking to see if there are any points occurring more than once in the object using the code chunk below.

```{r}
sum(multiplicity(childcare_ppp)>1)
```

It appears that there is indeed 0 duplicated point events.

::: insights-box
In the case that there are duplicates, they can be handled as follows. We use ***jittering*** (shown in the code chunk below), which adds a small perturbation to the duplicate points so that they do not occupy the exact same space. Additionally, we could also make each point unique and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need to implement analytical techniques that take these marks into account.

```{r}
#childcare_ppp_jit <- rjitter(childcare_ppp, 
 #                            retry=TRUE, 
  #                           nsim=1, 
   #                          drop=TRUE)
```
:::

::: insights-box
And then we can check for any duplicates to ensure that the above function worked using the following code chunk, the same as earlier.

```{r}
# any(duplicated(childcare_ppp_jit))
```
:::

### 2.9.5 Creating an ***owin*** object

When analyzing Spatial Point patterns, it is a good practice to confine the boundaries of the analysis with a Geographical area, such as Singapore's boundary. Using the **spatstat** package, we can create an **owin** object that is designed to represent such polygonal regions.

We use the **as.owin()** function from **spatstat** for this transformation.

```{r}
sg_owin <- as.owin(sg_sf)
```

::: panel-tabset
## plot of the newly obtained sg_owin object

We can plot the newly obtained object using the code chunk below.

```{r}
plot(sg_owin)
```

## Summary of the object

```{r}
summary(sg_owin)
```

From the summary, we see that the object itself is a polygonal boundary with a window area of 725376000 square units.
:::

# 2.10 Second-order Spatial Point Patterns Analysis

In this section we will perform Second Order SPPA using the **spatstat** package.

## 2.10.1 Analysing Spatial Point Process Using the G-Function

In this section we will learn how to compute a G-function estimation by using the **Gest()** function of the **spatstat** package.

We will also perform a monte-carlo simulation test using **envelope()** function of the **spatstat** package.

### 2.10.1.1 Extracting target planning areas.

Using the code chunk below, as in Hands-on Exercise 2 Part 1, we will extract the data for selected target planning areas for analysis.

The code chunk below will first extract the target planning areas and then convert it into the required form for analysis.

<details>

<summary>Click to show/hide code.</summary>

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
ys <- mpsz_sf %>%
  filter(PLN_AREA_N == "YISHUN")
bbk <- mpsz_sf %>%
  filter(PLN_AREA_N == "BUKIT BATOK")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")

pg_owin = as.owin(pg)
ys_owin = as.owin(ys)
bbk_owin = as.owin(bbk)
jw_owin = as.owin(jw)


childcare_ppp_jit <- rjitter(childcare_ppp, 
                          retry=TRUE, 
                           nsim=1, 
                            drop=TRUE)

childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_ys_ppp = childcare_ppp_jit[ys_owin]
childcare_bbk_ppp = childcare_ppp_jit[bbk_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

</details>

### 2.10.1.2 Calculating G-function estimates and testing for Complete Spatial Randomness.

::: panel-tabset
## Jurong West Planning Area

We use the Gest() function of the spatstat package to compute a G-function estimation for the Jurong West planning area. Following that, we plot the result.

```{r}
G_JW = Gest(childcare_jw_ppp, correction = "border")
plot(G_JW, xlim=c(0,500))
```

The empirical G(r) (the solid black line in the plot above) consistently lies above the theoretical G(r) (dashed red line in the plot above) across a significant range of r. This indicates that the points in our dataâchildcare centers in Jurong Westâexhibit a higher degree of clustering than would be expected under a completely random distribution.

To confirm our findings above, we carry out a **hypothesis test**. The following are our hypotheses:

-   Ho = The distribution of childcare services at Jurong West are randomly distributed.

-   H1= The distribution of childcare services at Jurong West are not randomly distributed.

The **null hypothesis (Ho)** will be **rejected** if **p-value\<0.001**.

We will perform a monte-carlo simulation, using the **envelope()** function of the **spatstat** package, using the g-function.

```{r}
G_JW.csr <- envelope(childcare_jw_ppp, Gest, nsim = 999)
```

::: insights-box
The nsim argument in the envelope() function tells the function how many simulations to run.
:::

::: insights-box
We can also calculate an estimate for the p-value using the code chunk below.

```{r}
# Number of simulations where the observed value is more extreme
#more_extreme <- sum(G_JW.csr$obs > G_JW.csr$hi | G_JW.csr$obs < #G_JW.csr$lo)

# Calculate the p-value
#p_value <- (more_extreme + 1) / (G_JW.csr$nsim + 1)

```
:::

We now create a plot to visualize this.

```{r}
plot(G_JW.csr)
```

The observed spatial distribution of childcare centers in Jurong West indicates that the overall pattern does not significantly deviate from what would be expected under complete spatial randomness (CSR) for most distances.

## Yishun Planning Area

We now carry out the exact same steps as above for the Yishun Planning area.

First, we implement the gest() function to compute a G-function estimate.

```{r}
G_YS = Gest(childcare_ys_ppp, correction = "border")
plot(G_YS, xlim=c(0,500))
```

Once again we see that the solid black line, the empirical G(r) lies over the dashed red line consistently. This indicates a higher level of clustering, even more so than in Jurong West, than would be expected under a completely random distribution.

We now carry out the hypothesis test using the envelope() function. The following are our hypotheses: -

-   Ho = The distribution of childcare services at Yishun are randomly distributed.

-   H1= The distribution of childcare services at Yishun are not randomly distributed.

The **null hypothesis (Ho)** will be **rejected** if **p-value\<0.001**.

```{r}
G_YS.csr <- envelope(childcare_ys_ppp, Gest, nsim = 999)
```

We now create a plot to visualize this.

```{r}
plot(G_YS.csr)
```

The observed spatial distribution of childcare centers in Yishun exhibits a slight tendency, more so than Jurong West, towards clustering at certain distances, as evidenced by the brief instances where the empirical G(r) exceeds the Monte Carlo envelope. We do have sufficient evidence to **reject** the null hypothesis.
:::

::: insights-box
When using the **envelope()** test like above, we generally reject the null hypothesis based on whether the observed function lies inside or outside the 'envelope'. Another key factor to note is the distances depicted by the x-axis. For example, the black line (observed values) may cross the upper bound of the upper envelope at a certain distance, below which there is random distribution, while above it there is more clustering.
:::

::: insights-box
-   The grey zone indicates the confidence envelop (In this case, we have set it as 95% as indicated by the critical value of 0.05)

-   When an observed L value is greater than its corresponding L(theo) value for a particular distance and lower than the upper confidence envelop, spatial clustering for that distance is statistically NOT significant (e.g. distance between B and C).

-   When an observed L value is smaller than its corresponding L(theo) value for a particular distance and beyond the lower confidence envelop, spatial dispersion for that distance is statistically significant. - When an observed L value is smaller than its corresponding L(theo) value for a particular distance and within the lower confidence envelop, spatial dispersion for that distance is statistically NOT significant (e.g. distance between A and B).
:::

::: insights-box
For reference, this is how we can perform the Clark-Evans test to obtain the test statistics, namely the R value, to draw insights. Closer to zero means more cluster. If the index is equal to 1, the pattern is random, and if its more than 1, the trend is towards dispersion or competition.

```{r}
# Perform the Clark-Evans test
clark_evans_result <- clarkevans(childcare_jw_ppp, correction = "none")

# Print the result
print(clark_evans_result)

```
:::

# 2.11 Analysing Spatial Point Process Using the F-Function

In geospatial analysis, The F-function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern within a window of any shape.

We will use the **fest()** function of the **spatstat** package to compute the F-function estimate. Following this, we will implement the **envelope()** function as we did earlier to perform a **monte-carlo simulation test.**

::: panel-tabset
## Punggol planning area

We first compute the F-function estimate using fest() function as shown in the code chunk below. We plot it to gain a better understanding.

```{r}
F_PG = Fest(childcare_pg_ppp)
plot(F_PG)
```

Following this, we will implement the envelope() function to perform the monte-carlo simulation test to check for Complete Spatial Randomness.

The following are the hypotheses:

-   Ho = The distribution of childcare services at Punggol are randomly distributed.

-   H1= The distribution of childcare services at Punggol are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
F_PG.csr <- envelope(childcare_pg_ppp, Fest, nsim = 999)
```

We can now plot the above obtained simulation in order to draw insights regarding the distribution of childcare services in Punggol.

```{r}
plot(F_PG.csr)
```

We see a significantly higher portion of the black line outside the shaded region, but below the lower bound. it seems as if there is a lack of clustering of childcare services in this region. We do not have sufficient evidence to reject the null hypothesis.

## Bukit Batok

We implement the same steps as we did for the Punggol planning area. We start by implementing the Fest() function first.

```{r}
F_BBK = Fest(childcare_bbk_ppp)
plot(F_BBK)
```

We see that the dashed red line and the black line are pretty close to one another, indicating that its likely that this region has little clustering relative to the other regions we have looked at so far.

We implement a monte-carlo simulation test to check for Complete Spatial Randomness to confirm.

The following are the hypotheses:

-   Ho = The distribution of childcare services at Bukit Batok are randomly distributed.

-   H1= The distribution of childcare services at Bukit Batok are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
F_BBK.csr <- envelope(childcare_bbk_ppp, Fest, nsim = 999)
```

We plot it to be able to draw insights.

```{r}
plot(F_BBK.csr)
```

Indeed, our earlier belief is confirmed. The black line is entirely inside the shaded region, indicating that it is more than likely randomly distributed with minimal clustering. We **do not** have enough evidence to reject the null hypothesis.
:::

# 2.12 Analysing Spatial Point Process using the K-Function

The **K function** is a second-order statistic used in spatial point pattern analysis to measure the degree of clustering or dispersion at different spatial scales. It compares the observed number of points within a given distance of each other to what would be expected under complete spatial randomness (CSR).

In this section we will compute the K-function estimate using the **Kest()** function of the **spatstat** package. After computing the estimate, we apply the envelope() function to conduct the monte-carlo simulation test.

::: panel-tabset
## Jurong West Planning Area

We use the **Kest()** function of the spatstat package to compute a K-function estimation for the Jurong West planning area. Following that, we plot the result.

```{r}
K_JW = Kest(childcare_jw_ppp, correction = "border")
plot(K_JW, xlim=c(0,500))
```

The black line (empirical/observed) deviates quite significantly away from the dashed red line (theoretical, based on poisson distribution) above.

We now implement the **envelope()** function to conduct the monte-carlo simulation test to check for Complete Spatial Randomness.

-   Ho = The distribution of childcare services at Jurong West are randomly distributed.

-   H1= The distribution of childcare services at Jurong West are not randomly distributed.

The null hypothesis will be rejected if p-value\<0.001.

```{r}
K_JW.csr=envelope(childcare_jw_ppp, Kest, nsim=99, rank=1, glocal= TRUE)
```

We plot it to visualize this in order to draw insights.

```{r}
plot(K_JW.csr)
```

Based on the plot above, we can infer that the distribution of childcare services in Singapore is not randomly distributed, the black line is almost entirely out of the shaded region. This indicates that we can **reject** the null hypothesis and conclude that the distribution of childcare services in Jurong West is not randomly distributed.

## Bukit Batok Planning Area

We implement the same steps as we did for the Punggol planning area. We start by implementing the **Kest()** function first.

```{r}
K_BBK = Kest(childcare_bbk_ppp)
plot(K_BBK)
```

We see that the black line deviates pretty significantly away from the dashed red line, indicating that its likely that this region has some clustering, similar to Jurong West.

We implement a **monte-carlo simulation test** to check for Complete Spatial Randomness to confirm.

The following are the hypotheses:

-   Ho = The distribution of childcare services at Bukit Batok are randomly distributed.

-   H1= The distribution of childcare services at Bukit Batok are not randomly distributed.

The null hypothesis will be rejected if p-value\<0.001.

```{r}
K_BBK.csr <- envelope(childcare_bbk_ppp, Kest, nsim = 99, rank=1, glocal=TRUE)
```

We plot it to be able to draw insights.

```{r}
plot(K_BBK.csr)
```

Indeed, our earlier belief is confirmed. The black line is almost entirely outside the shaded region, indicating that it is more than likely **NOT** randomly distributed with minimal clustering. We are able to **reject** the null hypothesis and conclude that the distribution of childcare services in Bukit Batok is not random.
:::

# 2.13 Analysing Spatial Point Processes using the L-function

The **L function** is a linearised version of the K function, designed to stabilize its variance and make interpretation easier. It transforms the K function into a form where deviation from the expected value under CSR is more directly observable as deviation from a straight line.

We will now compute the L-Function estimate using the **Lest()** function of the **spatstat** package. After that, we will implement the envelope() function to conduct the monte-carlo simulation test to check for Complete Spatial Randomness.

::: panel-tabset
## Punggol Planning Area

We start by implementing the Lest() function and plotting its result.

```{r}
L_pg = Lest(childcare_pg_ppp, correction = "Ripley")
plot(L_pg, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

The output above indicates that the spatial distribution of childcare services in our data in Punggol exhibits clustering across a broad range of distances. This clustering deviates significantly from what would be expected under complete spatial randomness, as evidenced by the black line's being above the CSR baseline.

We want to further investigate so we implement the envelope() function to conduct a **monte-carlo simulation test** for Complete Spatial Randomness.

The following are the hypotheses:

Ho = The distribution of childcare services at Punggol are randomly distributed.

H1= The distribution of childcare services at Punggol are not randomly distributed.

The null hypothesis will be rejected if p-value\<0.001.

We implement the **envelope()** function to run the simulations.

```{r}
L_pg.csr <- envelope(childcare_pg_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

We now plot the above to visualize it.

```{r}
plot(L_pg.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

Based on the plot above, we have sufficient evidence to **reject** the null hypothesis.

It seems clear that the distribution of childcare services in Punggol is not randomly distributed.

## Yishun Planning Area

We carry out the same steps as we did when analysing the Punggol planning area. We start by implementing the Lest() function and plotting its result.

```{r}
L_ys = Lest(childcare_ys_ppp, correction = "Ripley")
plot(L_ys, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

The output above indicates that the spatial distribution of childcare services in our data in Punggol exhibits clustering across a broad range of distances. This clustering deviates significantly from what would be expected under complete spatial randomness, as evidenced by the black line's being above the CSR baseline.

To further investigate, we will implement the **monte-carlo simulation test** to check for **Complete Spatial Randomness**.

The following are the hypotheses:

-   Ho = The distribution of childcare services at Yishun are randomly distributed.

-   H1= The distribution of childcare services at Yishun are not randomly distributed.

The null hypothesis will be rejected if p-value\<0.001.

We implement the **envelope()** function to run the simulations.

```{r}
L_ys.csr <- envelope(childcare_ys_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

Now, we plot the above to visualize the result.

```{r}
plot(L_ys.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

Based on the plot above, we have sufficient evidence to **reject** the null hypothesis.

The distribution of childcare services in Yishun is not randomly distributed.
:::
