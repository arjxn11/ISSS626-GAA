---
title: "Hands On Exercise 4- Spatial Weights and Applications"
author: "Arjun Singh"
date: 2024-09-04
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
  warning: false
format:
  html:
    css: styles.css  
---

# 4 Introduction

In this Hands-On Exercise we are going to focus on computing spatial weights using appropriate functions of the **spdep** package on R.

# 4.1 Data and Packages

For this exercise, we will be focusing on Hunan. The following data sets will be used:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

The following packages are used:

-   **`sf`**: Provides simple features support for handling and analyzing spatial vector data in R.
-   **`spdep`**: A package for spatial dependence and spatial regression analysis, particularly for handling spatial weights.
-   **`tmap`**: A flexible visualization package for thematic maps, supporting both static and interactive mapping in R.
-   **`tidyverse`**: A collection of R packages designed for data science, emphasizing data manipulation, visualization, and functional programming.
-   **`knitr`**: A dynamic report generation tool in R, allowing for the integration of code, results, and narrative in reproducible documents.

Below, we import these packages into our environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
set.seed(123)
```

# 4.2 Importing the data

We start of by importing the Hunan shapefile into R using the st_read() function of the sf package.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

We see that it is a simple feature data-frame with 88 features and 7 fields, projected in the WGS84 coordinate system.

We now import the csv file using the read_csv() function of the readr package.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

This is a simple R data-frame.

## 4.2.1 Performing relational joins

We will proceed to join this to the simple feature data-frame, `hunan`, obtained above using a relational join technique.

The left_join() function of the dplyr package is used as shown in the code chunk below.

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 4.3 Visualizing Regional Development Indicators

After successfully completing the relational join, we can now plot a choropleth map to visualize the GDP per capita of Hunan in 2012 using various functions of the tmap package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

From the above, we can infer that Changsha has the highest GDP per capita, between 80,000 and 100,000 while several surrounding regions have relatively high GDP per capita as well.

Many regions, especially in the Central, South-West and North-West region of Hunan seem to have a lower GDP per capita.

# 4.4 Computing Contiguity Spatial Weights

We now implement the **poly2nb()** function of the **spdep** package to compute contiguity weight matrices for the study area selected.

Using this function, we are able to build a 'neighbors list' based on regions with contiguous boundaries.

In this function, we will pass an argument, 'queen', that can be set as either TRUE (default) or FALSE. If the 'queen' argument is not explicitly set to FALSE, the function returns a list of first order neighbors using the Queen criteria.

[You may refer to the `spdep` package documentation here](https://cran.r-project.org/web/packages/spdep/spdep.pdf) to learn more about its functions and arguments.

## 4.4.1 Computing (QUEEN) contiguity based neighbors

We use the poly2nb() function as shown in the code chunk below. Using this, we are able to compute a Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

From the output above, we can infer that there are 88 area units in total in Hunan. The *most connected* area unit has 11 neighbors. There are two area units with just 1 neighbor, while 24 area units have 5 neighbors.

For each polygon in our polygon object, `wm_q` lists all neighboring polygons. For example, to see the neighbors for the first polygo in the object.

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors as shown above. The numbers in the output represent the polygon IDs as stored in the **Hunan SpatialPolygonsDataFrame class**.

::: insights-box
We can retrieve the county name of selected polygon IDs by using the code chunk below. In the below example, we retrieve the county name for the county with Polygon-ID=1.

```{r}
hunan$County[1]
```

The name of the county with Polygon-ID 1 is Anxiang.
:::

To retrieve the name of the 5 neighboring polygons, the below code chunk is used.

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can proceed to retrieve the GDP Per Capita for each of these regions using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

From the above output, we infer that the GDP Per Capita of the five nearest neighbors based on the Queen method are 20981, 34592, 24473, 21311, and 22879, which happen to be on the lower middle end of the spectrum of GDP Per Capita.

The entire weight matrix can be displayed using the **str()** function.

```{r}
str(wm_q)
```

::: note-box
Do note that sometimes the output of the str() function may be very long. Save the trees if you are going to print out the report.
:::

## 4.4.2 Creating (ROOK) contiguity based neighbors

The below code chunk helps us compute the Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The most connected area unit has 10 neighbors. 5 neighbors are most commonly seen, similar to the Queen method.

## 4.4.3 Visualizing contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons in this situation, so we need to ensure that our points are in order to produce our connectivity graphs.

Usually, the method of choice will be polygon centroids. We calculate using the sf package before moving onto the graphs. Getting latitude and longitude of the Polygon Centroids.

We need points to associate with each polygon before we can make our connectivity graph. It won't be as simple as applying the st_centroid() function of the sf sf object: *`us.bound`*. We need the coordinates in a separate data-frame for this to work.

To do this, we will use a mapping function which will apply a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of `us.bound`.

The function that we implement in this situation will be st_centroid().

We will be using the map_dbl variation of map from the purrr package.

### 4.4.3.1 Longitude and Latitude values

::: panel-tabset
## Longitude Values

To obtain our longitude values, we map the st_centroid function over the geometry column of `us.bound` and access the longitude value through the double bracket notation \[\[\]\] and 1. This allows us to extract the longitude value, the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

## Latitude Values

We proceed to do the same method to extract latitude values, with one **key** difference. We access the second value in each centroid using \[\[2\]\] instead of \[\[1\]\] like we did when obtaining the longitude values.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```
:::

Now that we have the latitude and longitude values, we can use the cbind() function to put the longitude and latitude values into the same object, `coords`.

```{r}
coords <- cbind(longitude, latitude)
```

We use the head() function to verify if `coords` is in the correct format.

```{r}
head(coords)
```

### 4.4.3.2 Plotting Queen and Rook Contiguity Based Neighbors Map

::: panel-tabset
## Queen Contiguity Based Neighbors Map

We use the plot() function as shown in the code chunk below to plot the map.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "purple")
```

## Rook Contiguity Based Neighbors Map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "purple")
```
:::

We can plot both side by side to compare the two methods using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "purple")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "purple")
```

::: insights-box
-   **Queen Contiguity**: In this plot, points are connected if they share either an edge or a vertex. This results in more connections, including diagonal ones, creating a denser network.

-   **Rook Contiguity**: In this plot, points are only connected if they share an edge, not a vertex. This results in a grid-like pattern without diagonal connections, making the network less dense compared to Queen Contiguity.
:::

# 4.5 Computing Distance Based Neighbors

In order to derive distance-based weight matrices, we will implement the **dnearneigh()** function of the **spdep** package.

This function identifies neighbors of region points by Euclidean Distance with a distance band with lower d1 and upper d2 bounds controlled by the `bounds=` argument.

If un-projected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and `longlat=TRUE,` great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.

## 4.5.1 Determining the cut-off distance

We first determine the upper limit for the distance band by using the steps shown below:

-   **Find k Nearest Neighbours**: Use **`knearneigh()`** from the **`spdep`** package to get a matrix of indices for the k nearest neighbours of each point.

-   **Convert to Neighbours List**: Convert the **`knn`** object returned by **`knearneigh()`** into a neighbours list of class **`nb`** using **`knn2nb()`**. This list contains integer vectors with neighbour region number IDs.

-   **Calculate Edge Lengths**: Use **`nbdists()`** from **`spdep`** to return the lengths of neighbour relationship edges. The function returns distances in the units of the coordinates if projected, otherwise in kilometers.

-   **Flatten the List**: Remove the list structure of the returned object using **`unlist()`**

The code chunk below is implemented.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

From the output above, we can infer that the largest first nearest neighbor distance is just under 62KM. Using this value, 61.79KM, as the upper threshold gives certainty that all units will have at least one neighbor.

## 4.5.2 Computing Fixed Distance weight matrix

We now implement the dnearneigh() function to compute the distance weight matrix.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: insights-box
From the output above, we infer that there are 88 distinct regions, as we identified earlier. There are 324 connections between regions where the distance is within the threshold that we have set. 4.18% of all possible region pairs have a connection. On average, each region is connected to approximately 3.68 other regions.
:::

We now implement the str() function to display the entirety of the `wm_d62` weight matrix.

```{r}
str(wm_d62)
```

::: insights-box
As an alternative to str(), we can also use the combination of table() and card() functions from the spdep package to display the structure of the weight matrix.

```{r}
table(hunan$County, card(wm_d62))
```
:::

Next, we implement the n.comp.nb() function to identify the number of connected components in a neighbor list object of class nb.

::: note-box
Note: A connected component is a subset of regions where each region is reachable from any other region within the same subset. The function returns an object that includes the number of connected components (`nc`) and a vector indicating the component membership for each region.
:::

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

::: insights-box
The output `[1] 1` from `n_comp$nc` indicates that there is one connected component in your neighbour list `wm_d62`. This means all 88 regions are part of a single, interconnected network with no isolated subgroups.
:::

### 4.5.2.1 Plotting fixed distance weight matrix

We now plot the distance weight matrix using the plot() function.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="purple", length=0.08)
```

In the plot above, the purple lines show the links of 1st nearest neighbors and the black lines show the links of neighbors within the specified cut-off distance of 62KM.

We can also plot the separately, side by side, using the code chunk below. Doing so gives us a clearer visualization and facilitates comparison.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## 4.5.3 Computing Adaptive Distance Weight Matrix

One of the characteristics of fixed distance weight matrices is that the more densely settled areas (usually urban areas) tend to have more neighbors and the less densely settled areas (usually rural areas) tend to have lesser neighbors.

Having many neighbors smoothens the neighbor relationship across more neighbors.

It is possible to control the numbers of neighbors directly using k-nearest neighbors by either accepting asymmetric neighbors or imposing symmetry

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Each region has an average of 6 neighbors in this scenario.

We will display the matrix by implementing the str() function as earlier.

```{r}
str(knn6)
```

As it turns out, each county has **exactly 6 neighbors!**

### 4.5.3.1 Plotting distance based neighbors

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 4.6 Weights based on Inversed Distance Weighting (IDW)

We first compute the distances between areas by implementing the **nbdists()** function of the **spdep** package.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

# 4.7 Row-Standardized Weights Matrix

We now need to assign weights to each neighboring polygon. We use equal weights (style=“W”), where each neighboring polygon is assigned a weight of 1 divided by the number of neighbors.

This means each neighboring county’s weight is calculated as 1/(# of neighbors), and these weights are then used to sum the weighted income values.

While this method is intuitive for summarizing neighbors’ values, it has a drawback: polygons at the edges of the study area may rely on fewer neighbors, potentially skewing the spatial autocorrelation results.

::: note-box
Note: For simplicity, we’ll use the style=“W” option in this example, but be aware that more robust options, such as style=“B”, are available.
:::

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

Setting the argument `zero.policy` to TRUE allows for lists of non-neighbors. This should be used with caution as users may not be aware of missing neighbors in their data however setting `zero,policy` to FALSE would return an error.

The code chunk below is implemented to check the weights of the first polygons eight neighbors type:

```{r}
rswm_q$weights[10]
```

::: insights-box
Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.
:::

Using the same method, we derive a row standardized distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

# 4.8 Application of Spatial Weight Matrix

We now create four different spatial lagged variables:

-   spatial lag with row-standardized weights

-   spatial lag as a sum of neighbouring values

-   spatial window average

-   spatial window sum

## 4.8.1 Spatial Lag With Row-Standardized Weights

We now compute the average neighbor GDP Per Capita value for each polygon. We often refer to these values as Spatially Lagged Values.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

We can retrieve the GDP Per Capita by using the code Chunk Below

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

::: insights-box
A spatial lag with row-standardized weights means that each observation’s value is influenced by the average values of its neighboring observations. Specifically, the weights are standardized so that the sum of the weights for each observation equals one. This approach ensures that the spatial lag is essentially the weighted average of the neighboring values.
:::

We can append the spatially lagged GDP Per Capita values onto Hunan sf data-frame by using the code chunk shown below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the lnc.lab object) for each county.

```{r}
head(hunan)
```

We now plot the GDP Per Capita and Spatial Lag GDP Per Capita for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

There is a difference especially in the eastern half of Hunan when spatially lagged GDP Per Capita is plotted.

## 4.8.2 Spatial Lag as a sum of neighboring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. For this, we must apply a function that will assign binary weights to our neighbors list. We then use the `glist` argument in the nb2listw function to explicitly assign these weights.

We first apply a function that assigns a value of 1 per neighbor. This is done with help of lapply(), which helps manipulate the neighbors structure. It basically applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Now that we have assigned the proper weights, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

We check the result below.

```{r}
lag_sum
```

We now append the lag_sum GDP Per Capita field into `hunan` sf data-frame and then plot the GDP Per Capita and Spatial Lag Sum GDP Per Capita for comparison.

```{r}
hunan <- left_join(hunan, lag.res)
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

There is a big difference throughout the region when using Spatial Lag Sum GDP Per Capita.

## 4.8.3 Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we use the include.self() function from the **spdep** package.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

There is a difference in the key statistics shown above when compared to `wm_q`. The average number of links, the number of non-zero links as well as percentage of non-zero weights are all higher for `wm_qs`.

We look at the neighbor list of area \[1\] using the code chunk below.

```{r}
wm_qs[[1]]
```

This region has 6 neighbors.

We now implement the nb2listw() function to obtain weights.

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

We now create the lag variable from our weight structure and GDP Per Capita variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

We now convert the lag variable `listw`object into a data-frame by using as.data.frame().

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

::: note-box
Note: The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.
:::

We now append the lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, The kable() function of the Knitr package is used to prepare a table.

```{r}
hunan %>%
  dplyr::select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

We now plot the lag_gdppc and w_ave_gdppc maps next to each other for comparison using the qtm() function of the tmap package.

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## 4.8.4 Spatial Window Sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

We now assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice that now \[1\] has six neighbours instead of five.

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our newly obtained weight structure, we can compute the lag variable with *lag.listw()*.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

::: note-box
Note: The second command line on the code chunk above renames the field names of *w_sum_gdppc.res* object into *NAME_3* and *w_sum GDPPC* respectively.
:::

Next, the code chunk below will be used to append w_sum *GDPPC* values onto hunan sf data.frame by using left_join() of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Finally, we plot the lag_sum GDP Per Capita and w_sum_gdppc maps next to each other using the qtm() function of the tmap package.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

::: note-box
Note: For more effective comparison, it is advicible to use the core tmap mapping functions.
:::
